{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./src/components/SEO.js"],"names":["IndexRoute","render","items","this","props","data","site","siteMetadata","title","subtitle","caption","logo","allMarkdownRemark","edges","forEach","post","push","key","node","fields","slug","style","color","background","transition","minHeight","image","description","name","content","className","React","Component","pageQuery","SEO","meta","query","metaDescription","metaImage","siteUrl","url","htmlAttributes","lang","titleTemplate","property","author","aboutme","concat","defaultProps"],"mappings":"uNAQMA,E,gLACJC,OAAA,WACE,IAAMC,EAAQ,GADP,EAIHC,KAAKC,MAAMC,KAAKC,KAAKC,aADvBC,EAHK,EAGLA,MAAOC,EAHF,EAGEA,SAAUC,EAHZ,EAGYA,QAASC,EAHrB,EAGqBA,KAO5B,OALcR,KAAKC,MAAMC,KAAKO,kBAAkBC,MAC1CC,QAAQ,SAAAC,GACZb,EAAMc,KAAK,kBAAC,IAAD,CAAMX,KAAMU,EAAME,IAAKF,EAAKG,KAAKC,OAAOC,UAInD,yBAAKC,MAAO,CACVC,MAAO,oBACPC,WAAY,YACZC,WAAY,gDACZC,UAAW,UAGX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAOf,EAAMgB,YAAalB,EAAUD,MAAOA,EAAOE,QAASA,IAChE,6BACE,kBAAC,IAAD,KACE,+BAAQF,GACR,0BAAMoB,KAAK,cAAcC,QAASpB,KAEpC,kBAAC,IAAYN,KAAKC,OAClB,yBAAK0B,UAAU,WACb,yBAAKA,UAAU,kBAAkB5B,Q,GA5BtB6B,IAAMC,WAqChBhC,YAER,IAAMiC,EAAS,c,+FC1BhBC,EAAM,SAAC,GAAD,IACVC,EADU,EACVA,KAAMT,EADI,EACJA,MAAOlB,EADH,EACGA,MAAOE,EADV,EACUA,QAASiB,EADnB,EACmBA,YAAaP,EADhC,EACgCA,KADhC,OAGV,kBAAC,cAAD,CACEgB,MApBO,aAqBPnC,OAAQ,SAAAI,GAAS,IACPE,EAAiBF,EAAKC,KAAtBC,aACF8B,EAAkBV,GAAepB,EAAaE,SAC9C6B,EAAYZ,EAAWnB,EAAagC,QAAnB,IAA8Bb,EAAU,KACzDc,EAAG,GAAMjC,EAAagC,QAAUnB,EACtC,OACE,kBAAC,IAAD,eACEqB,eAAgB,CAAEC,KAAM,OACnBhC,EACD,CACAiC,cAAkBjC,EAAL,QACbF,MAAOD,EAAaC,OAEpB,CACAA,MAAM,kCAAmCD,EAAaC,OAR5D,CAUE2B,KAAM,CACJ,CACEP,KAAM,cACNC,QAASQ,GAEX,CACEO,SAAU,SACVf,QAASW,GAEX,CACEI,SAAU,WACVf,QAASrB,GAASD,EAAaC,OAEjC,CACEoC,SAAU,iBACVf,QAASQ,GAEX,CACET,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAAStB,EAAasC,OAAOC,SAE/B,CACElB,KAAM,gBACNC,QAASrB,GAASD,EAAaC,OAEjC,CACEoB,KAAM,sBACNC,QAASQ,IAGVU,OACCT,EACI,CACA,CACEM,SAAU,WACVf,QAASS,GAEX,CACEV,KAAM,gBACNC,QAASS,IAGX,IAELS,OAAOZ,OAlElB,UAyEFD,EAAIc,aAAe,CACjBb,KAAM,GACNf,KAAM,IAWOc,O","file":"component---src-pages-index-jsx-fafdeffc3843eac51a05.js","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport Post from '../components/Post';\nimport Sidebar from '../components/Sidebar';\nimport SEO from '../components/SEO';\n\nclass IndexRoute extends React.Component {\n  render() {\n    const items = [];\n    const {\n      title, subtitle, caption, logo,\n    } = this.props.data.site.siteMetadata;\n    const posts = this.props.data.allMarkdownRemark.edges;\n    posts.forEach(post => {\n      items.push(<Post data={post} key={post.node.fields.slug}/>);\n    });\n\n    return (\n      <div style={{\n        color: 'var(--textNormal)',\n        background: 'var(--bg)',\n        transition: 'color 0.2s ease-out, background 0.2s ease-out',\n        minHeight: '100vh',\n      }}\n      >\n        <Layout>\n          <SEO image={logo} description={subtitle} title={title} caption={caption} />\n          <div>\n            <Helmet>\n              <title>{title}</title>\n              <meta name=\"description\" content={subtitle}/>\n            </Helmet>\n            <Sidebar {...this.props} />\n            <div className=\"content\">\n              <div className=\"content__inner\">{items}</div>\n            </div>\n          </div>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default IndexRoute;\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    site {\n      siteMetadata {\n        title\n        subtitle\n        caption\n        copyright\n        declaration\n        logo\n        menu {\n          label\n          path\n        }\n        author {\n          name\n          email\n          telegram\n          twitter\n          github\n          linkedin\n          stackoverflow\n          aboutme\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      filter: { frontmatter: { layout: { eq: \"post\" }, draft: { ne: true } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            categorySlug\n          }\n          timeToRead\n          frontmatter {\n            title\n            date\n            category\n            description\n            cover {\n              childImageSharp {\n                original {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        subtitle\n        caption\n        siteUrl\n        author {\n          aboutme\n        }\n      }\n    }\n  }\n`;\n\nconst SEO = ({\n  meta, image, title, caption, description, slug,\n}) => (\n  <StaticQuery\n    query={query}\n    render={data => {\n      const { siteMetadata } = data.site;\n      const metaDescription = description || siteMetadata.subtitle;\n      const metaImage = image ? `${siteMetadata.siteUrl}/${image}` : null;\n      const url = `${siteMetadata.siteUrl}${slug}`;\n      return (\n        <Helmet\n          htmlAttributes={{ lang: 'en' }}\n          {...(caption\n            ? {\n              titleTemplate: `${caption} - %s`,\n              title: siteMetadata.title,\n            }\n            : {\n              title: `A blog by Gopal S Akshintala - ${siteMetadata.title}`,\n            })}\n          meta={[\n            {\n              name: 'description',\n              content: metaDescription,\n            },\n            {\n              property: 'og:url',\n              content: url,\n            },\n            {\n              property: 'og:title',\n              content: title || siteMetadata.title,\n            },\n            {\n              property: 'og:description',\n              content: metaDescription,\n            },\n            {\n              name: 'twitter:card',\n              content: 'summary',\n            },\n            {\n              name: 'twitter:creator',\n              content: siteMetadata.author.aboutme,\n            },\n            {\n              name: 'twitter:title',\n              content: title || siteMetadata.title,\n            },\n            {\n              name: 'twitter:description',\n              content: metaDescription,\n            },\n          ]\n            .concat(\n              metaImage\n                ? [\n                  {\n                    property: 'og:image',\n                    content: metaImage,\n                  },\n                  {\n                    name: 'twitter:image',\n                    content: metaImage,\n                  },\n                ]\n                : []\n            )\n            .concat(meta)}\n        />\n      );\n    }}\n  />\n);\n\nSEO.defaultProps = {\n  meta: [],\n  slug: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}