<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Overfullstack's RSS]]></title><description><![CDATA[So excited about this Craft that, I can't keep myself from blogging about it.]]></description><link>https://overfullstack.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 07 Mar 2020 02:54:50 GMT</lastBuildDate><item><title><![CDATA[Template-Oriented-Programming (TOP) with Ad-Hoc Polymorphism]]></title><description><![CDATA[Top-up the Polymorphism]]></description><link>https://overfullstack.github.io/posts/top-with-ad-hoc-polymorphism/</link><guid isPermaLink="false">https://overfullstack.github.io/posts/top-with-ad-hoc-polymorphism/</guid><pubDate>Fri, 06 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;Abstract&quot; style=&quot;position:relative;&quot;&gt;Abstract&lt;a href=&quot;#Abstract&quot; aria-label=&quot;Abstract permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the advent of B2C products, the same product can have use-cases (or Services) with varied traffic and scaling needs. The trend is to split them into Microservices built on different paradigms/tech-stacks (blocking or non-blocking [1]). In domains like Payments, many such heterogeneous services are parallel as well (having most of the domain business logic in common e.g., Purchases and Refunds). Although the business logic is common, it cannot be reused among these parallel services, as the code is written specifically to that paradigm.&lt;/p&gt;
&lt;p&gt;This paper attempts to overcome this challenge and make such common logic &lt;strong&gt;reusable&lt;/strong&gt;, turning the &lt;code&gt;Monomorphic&lt;/code&gt; common code to &lt;code&gt;Polymorphic&lt;/code&gt; templates, using an innovative design technique called &lt;code&gt;Ad-hoc Polymorphism&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Things-to-know-before-reading&quot; style=&quot;position:relative;&quot;&gt;Things to know before reading&lt;a href=&quot;#Things-to-know-before-reading&quot; aria-label=&quot;Things to know before reading permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A good understanding of generics and exposure to blocking/non-blocking paradigms. This is language-agnostic, but the I will use &lt;strong&gt;Kotlin&lt;/strong&gt; (a modern JVM language) for demonstration along with &lt;strong&gt;Arrow&lt;/strong&gt; (An upcoming Functional Programming library for Kotlin).&lt;/p&gt;
&lt;h2 id=&quot;The-Case-for-Heterogeneous-services&quot; style=&quot;position:relative;&quot;&gt;The Case for Heterogeneous services&lt;a href=&quot;#The-Case-for-Heterogeneous-services&quot; aria-label=&quot;The Case for Heterogeneous services permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Taking the example from Payments domain, &lt;strong&gt;Purchases&lt;/strong&gt; tend to have high traffic (especially during Black Fridays, Flash sales, etc), and it&apos;s common to model them with an Asynchronous non-blocking paradigm like &lt;strong&gt;Reactive Stack&lt;/strong&gt; [2]. Whereas, &lt;strong&gt;Refunds&lt;/strong&gt; tend to have relatively low traffic and its scaling needs can easily be catered with a simple blocking stack.&lt;/p&gt;
&lt;h2 id=&quot;Problem-of-Reusability-among-Heterogeneous-services&quot; style=&quot;position:relative;&quot;&gt;Problem of Reusability among Heterogeneous services&lt;a href=&quot;#Problem-of-Reusability-among-Heterogeneous-services&quot; aria-label=&quot;Problem of Reusability among Heterogeneous services permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Despite being heterogenous, these services have a lot of commonality in their Domain logic - like Authentication, Request-Validation, Idempotency, external integrations (like gateway interaction), logging, etc. In the case of homogeneous services, this reusable code can be placed in a different module and be added as a dependency in all services. But in heterogeneous case, blocking code can&apos;t be reused for non-blocking service or vice-versa, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Their styles of programming are different (Functional in non-blocking vs Imperative in blocking).&lt;/li&gt;
&lt;li&gt;Non-Blocking code is filled with callbacks while the blocking code is sequential.&lt;/li&gt;
&lt;li&gt;The DB APIs are different, as non-blocking services use non-blocking DBs.&lt;/li&gt;
&lt;li&gt;Each paradigm has specific &lt;code&gt;Effect (or Container)&lt;/code&gt; it operates on, e.g - Non-blocking paradigms operate on reactive containers like &lt;code&gt;Mono&amp;#x3C;A&gt;/Flux&amp;#x3C;A&gt; or Observable&amp;#x3C;A&gt;&lt;/code&gt;, contrary to blocking paradigms which may (or need not) use simple containers like &lt;code&gt;Option/Either&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Due to this problem, the code is rewritten or duplicated for common use-cases, which eventually leads to maintenance overhead. This also applies to services that have future plans to migrate to async non-blocking as their business increases, in which case, the entire service needs to be rewritten although the domain business logic remains the same.&lt;/p&gt;
&lt;h2 id=&quot;Monomorphic-to-Polymorphic&quot; style=&quot;position:relative;&quot;&gt;Monomorphic to Polymorphic&lt;a href=&quot;#Monomorphic-to-Polymorphic&quot; aria-label=&quot;Monomorphic to Polymorphic permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Monomorphic code is written specifically to the &lt;code&gt;Effect (or Container)&lt;/code&gt;. If the Effect is abstracted out as a &lt;em&gt;Generic&lt;/em&gt;, the domain logic turns reusable for any type of service, and it can be called &lt;strong&gt;Polymorphic&lt;/strong&gt;. But to achieve that, we need to understand concepts like &lt;strong&gt;TypeClasses&lt;/strong&gt; and &lt;strong&gt;Higher-Kinds&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;But let&apos;s briefly touch upon types of Polymorphism:&lt;/p&gt;
&lt;h3 id=&quot;Subtype-Polymorphism-Inheritance-3&quot; style=&quot;position:relative;&quot;&gt;Subtype Polymorphism (Inheritance) [3]&lt;a href=&quot;#Subtype-Polymorphism-Inheritance-3&quot; aria-label=&quot;Subtype Polymorphism Inheritance 3 permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the most common OOP pattern, where we achieve polymorphism through inheritance. An interface is implemented by multiple classes (called subtypes).&lt;/p&gt;
&lt;h3 id=&quot;Parametric-Polymorphism-Generics-4&quot; style=&quot;position:relative;&quot;&gt;Parametric Polymorphism (Generics) [4]&lt;a href=&quot;#Parametric-Polymorphism-Generics-4&quot; aria-label=&quot;Parametric Polymorphism Generics 4 permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Simply put, this style uses generics (like &lt;code&gt;&amp;#x3C;T&gt;&lt;/code&gt;), to generate templates of reusable code. This works when the logic doesn&apos;t depend on any type-specific behavior. e.g., &lt;code&gt;Array&amp;#x3C;T&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Ad-hoc-Polymorphism-Type-Classes-5&quot; style=&quot;position:relative;&quot;&gt;Ad-hoc Polymorphism (Type Classes) [5]&lt;a href=&quot;#Ad-hoc-Polymorphism-Type-Classes-5&quot; aria-label=&quot;Ad hoc Polymorphism Type Classes 5 permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The term &lt;strong&gt;Ad-hoc polymorphism&lt;/strong&gt; refers to polymorphic functions that can be applied to arguments of different types, but that behave differently depending on the type of the argument to which they are applied. To achieve this, we use &lt;strong&gt;TypeClasses&lt;/strong&gt;. &lt;code&gt;Comparator&amp;#x3C;T&gt;&lt;/code&gt; in JDK is a simple typeClass. TypeClasses are just generic interfaces that are parametric on a Type &lt;code&gt;T&lt;/code&gt;. &lt;/p&gt;
&lt;h2 id=&quot;TypeClass&quot; style=&quot;position:relative;&quot;&gt;TypeClass&lt;a href=&quot;#TypeClass&quot; aria-label=&quot;TypeClass permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A type class &lt;code&gt;C&lt;/code&gt; defines some behavior in the form of operations that must be supported by a type &lt;code&gt;T&lt;/code&gt; for it to be a member of type class &lt;code&gt;C&lt;/code&gt;. A type can be a member of a type class simply by providing implementations of the operations the type must support. Once &lt;code&gt;T&lt;/code&gt; is made a member of the type class &lt;code&gt;C&lt;/code&gt;, functions that have constrained one or more of their parameters to be members of &lt;code&gt;C&lt;/code&gt; can be called with arguments of type &lt;code&gt;T&lt;/code&gt;.
&lt;code&gt;Comparator&amp;#x3C;T&gt;&lt;/code&gt; has one operation &lt;code&gt;fun compare(a: T?, b: T?): Int&lt;/code&gt;. Now for a type &lt;code&gt;Apple&lt;/code&gt; to be a member of this TypeClass, prepare a concrete &lt;code&gt;Comparator&amp;#x3C;Apple&gt;&lt;/code&gt; implementing its &lt;code&gt;fun compare(a: Apple?, b: Apple?): Int&lt;/code&gt;. That&apos;s it! Now the JDK&apos;s &lt;code&gt;Collections.sort()&lt;/code&gt; can make use of this concrete implementation to compare apples.
The code that relies on type classes is open for extension. Just like how &lt;code&gt;Comparator&amp;#x3C;T&gt;&lt;/code&gt; can be extended to compare any type.&lt;/p&gt;
&lt;h3 id=&quot;Need-for-Higher-Kinded-Types-6&quot; style=&quot;position:relative;&quot;&gt;Need for Higher-Kinded Types [6]&lt;a href=&quot;#Need-for-Higher-Kinded-Types-6&quot; aria-label=&quot;Need for Higher Kinded Types 6 permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Effects are of the form &lt;code&gt;F&amp;#x3C;A&gt;&lt;/code&gt; (e.g. &lt;code&gt;Mono&amp;#x3C;A&gt;&lt;/code&gt;), where &lt;code&gt;F&lt;/code&gt; is the container type and &lt;code&gt;A&lt;/code&gt; is the value type. The problem is, most JVM languages only support parametricity on the value type &lt;code&gt;A&lt;/code&gt; but not on the Container type &lt;code&gt;F&lt;/code&gt;. So to represent it, we need &lt;strong&gt;Higher-Kinded Types&lt;/strong&gt;, which are represented by &lt;code&gt;Kind&amp;#x3C;F, A&gt;&lt;/code&gt; which is synonymous to &lt;code&gt;F&amp;#x3C;A&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Ad-hoc-Polymorphism-by-example&quot; style=&quot;position:relative;&quot;&gt;Ad-hoc Polymorphism by example&lt;a href=&quot;#Ad-hoc-Polymorphism-by-example&quot; aria-label=&quot;Ad hoc Polymorphism by example permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that we have both the tools (TypeClasses and Higher-Kinded Types), let’s make a polymorphic template for our reusable domain logic. A POC working sample can be found in this &lt;a href=&quot;https://github.com/overfullstack/ad-hoc-poly&quot;&gt;GitHub repo&lt;/a&gt;. I shall be using references from this code to explain the subsequent examples, where we have two identical services, one built with &lt;code&gt;Spring-WebFlux&lt;/code&gt; (non-blocking reactive stack) [7] and another built with &lt;code&gt;Spring-WebMVC&lt;/code&gt; (blocking servlet stack) [8]. We shall take-up the &lt;em&gt;user validate-and-upsert&lt;/em&gt; as our example use-case (where a request to upsert a user is validated and either inserted or updated based on the user&apos;s existence in the DB). We shall attempt to abstract this into a common module so that both the services can consume it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Spring-WebFlux&lt;/code&gt; works with &lt;code&gt;Mono&amp;#x3C;A&gt;/Flux&amp;#x3C;A&gt;&lt;/code&gt; while &lt;code&gt;Spring-WebMVC&lt;/code&gt; doesn&apos;t. Also, we shall see how the difference in paradigms prevents reusability.&lt;/li&gt;
&lt;li&gt;The first step, is to abstract the DB behavior in both these stacks to a generic TypeClass interface, &lt;code&gt;RepoTC&amp;#x3C;F&gt;&lt;/code&gt;, where &lt;code&gt;F&lt;/code&gt; represents the Effect-type on which the DB works in their respective stacks. This is how the simplest version of it looks like:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin:title=RepoTC.kt&quot;&gt;interface RepoTC&amp;#x3C;F&gt; : Async&amp;#x3C;F&gt; {
    fun User.get(): Kind&amp;#x3C;F, User?&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code may look alien at first, but if we get into the details it all makes sense.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The operation &lt;code&gt;get()&lt;/code&gt; has a return type &lt;code&gt;Kind&amp;#x3C;F, User?&gt;&lt;/code&gt;, which is synonymous to &lt;code&gt;F&amp;#x3C;User?&gt;&lt;/code&gt;. This indicates our operations are agnostic of &lt;code&gt;Effect&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Our &lt;code&gt;RepoTC&amp;#x3C;F&gt;&lt;/code&gt; extends from &lt;code&gt;Async&amp;#x3C;F&gt;&lt;/code&gt; which is TypeClass from &lt;em&gt;Arrow&lt;/em&gt; library.&lt;/li&gt;
&lt;li&gt;Our Services are supposed to supply concrete instances of this &lt;code&gt;RepoTC&amp;#x3C;F&gt;&lt;/code&gt; and provide implementation for its operation &lt;code&gt;get()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We can help our services to map their &lt;em&gt;Effect-full&lt;/em&gt; operations to generic operations, for which we can write two utility functions, which are extension functions on &lt;code&gt;Async&amp;#x3C;F&gt;&lt;/code&gt; as below:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin:title=RepoUtils&quot;&gt;fun &amp;#x3C;R&gt; forMono(thunk: () -&gt; Mono&amp;#x3C;R&gt;): Kind&amp;#x3C;F, R?&gt; = effect { thunk().k().suspended() }
fun &amp;#x3C;R&gt; forIO(thunk: () -&gt; R): Kind&amp;#x3C;F, R&gt; = effect { thunk() }
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;Async&amp;#x3C;F&gt;&lt;/code&gt; typeClass has an important method called &lt;code&gt;effect{..}&lt;/code&gt;, which wraps a function with an &lt;em&gt;Effect&lt;/em&gt; return type (like &lt;code&gt;Mono&amp;#x3C;F&gt;&lt;/code&gt;) and returns a generic effect type &lt;code&gt;Kind&amp;#x3C;F, A&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Utilizing these utilities, Just like &lt;code&gt;Comparator&amp;#x3C;T&gt;&lt;/code&gt; example we discussed, we can create two concrete instances of our &lt;code&gt;Repo&amp;#x3C;TC&gt;&lt;/code&gt; - &lt;code&gt;blockingRepo&lt;/code&gt;, &lt;code&gt;nonBlockingReactiveRepo&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin:title=ConcreteInstances&quot;&gt;val blockingRepo = object : RepoTC&amp;#x3C;ForIO&gt;, Async&amp;#x3C;ForIO&gt; by IO.async() {
    override fun User.get(): Kind&amp;#x3C;ForIO, User?&gt; = forIO { userRepo.findOne(loginId) }
}

val nonBlockingReactiveRepo = object : RepoTC&amp;#x3C;ForMonoK&gt;, Async&amp;#x3C;ForMonoK&gt; by MonoK.async() {
    override fun User.get(): Kind&amp;#x3C;ForMonoK, User?&gt; = forMono { userReactiveRepo.findOne(loginId) }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;For blocking operations, &lt;code&gt;IO.async()&lt;/code&gt; instance is supplied as implementation for &lt;code&gt;Async&amp;#x3C;F&gt;&lt;/code&gt; and for non-blocking operations, &lt;code&gt;MonoK.async()&lt;/code&gt; is supplied. These concrete instances effect the &lt;code&gt;effect{..}&lt;/code&gt; method&apos;s behavior and supplies it with superpowers to handle a specified effect (&lt;code&gt;Mono&lt;/code&gt; or &lt;code&gt;IO&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The return types of &lt;code&gt;userRepo.findOne(loginId)&lt;/code&gt; is &lt;code&gt;User?&lt;/code&gt; and &lt;code&gt;userReactiveRepo.findOne(loginId)&lt;/code&gt; is &lt;code&gt;Mono&amp;#x3C;User?&gt;&lt;/code&gt;, both these are mapped to generic function &lt;code&gt;User.get()&lt;/code&gt; whose return type is a higher-kind &lt;code&gt;Kind&amp;#x3C;F, User?&gt;&lt;/code&gt; where &lt;code&gt;F&lt;/code&gt; is represented by &lt;code&gt;ForMonK&lt;/code&gt; and &lt;code&gt;ForIO&lt;/code&gt; in their respective concrete entities.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;How-the-pieces-fit&quot; style=&quot;position:relative;&quot;&gt;How the pieces fit?&lt;a href=&quot;#How-the-pieces-fit&quot; aria-label=&quot;How the pieces fit permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This typeClass &lt;code&gt;RepoTC&amp;#x3C;F&gt;&lt;/code&gt; is the bridge between the service and common module (In the GitHub repo, this common module is named as &lt;code&gt;validation-fx&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RepoTC&amp;#x3C;F&gt;&lt;/code&gt; has all the common business logic template (refer &lt;code&gt;validateUserForUpsert&lt;/code&gt; function &lt;a href=&quot;https://github.com/overfullstack/ad-hoc-poly/blob/master/validation-fx/src/main/kotlin/com/validation/RepoTC.kt#L32&quot;&gt;here&lt;/a&gt;). Arrow&apos;s &lt;code&gt;fx&lt;/code&gt; blocks are used to write this code, which shall be briefly explained in the talk.&lt;/li&gt;
&lt;li&gt;These templates depend on the TypeClass&apos;s abstract functions (like &lt;code&gt;get()&lt;/code&gt;) to weave their business logic. As shown in &lt;a href=&quot;https://github.com/overfullstack/ad-hoc-poly/blob/master/validation-fx/src/main/kotlin/com/validation/RepoTC.kt#L13&quot;&gt;this code&lt;/a&gt;, the &lt;code&gt;RepoTC&amp;#x3C;F&gt;&lt;/code&gt; can be extended with more DB operations to be used inside our templates.&lt;/li&gt;
&lt;li&gt;On the service side, we supply concrete implementation of TypeClasses as a dependency (Refer &lt;a href=&quot;https://github.com/overfullstack/ad-hoc-poly/blob/master/kofu-mvc-validation/src/main/kotlin/com/sample/Configurations.kt#L29&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;https://github.com/overfullstack/ad-hoc-poly/blob/master/kofu-reactive-validation/src/main/kotlin/com/sample/Configurations.kt#L20&quot;&gt;this&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Now both services can consume the common business logic through these concrete entities (Refer &lt;a href=&quot;https://github.com/overfullstack/ad-hoc-poly/blob/master/kofu-mvc-validation/src/main/kotlin/com/sample/Handlers.kt#L84&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;https://github.com/overfullstack/ad-hoc-poly/blob/master/kofu-reactive-validation/src/main/kotlin/com/sample/Handlers.kt#L97&quot;&gt;this&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Outcomes-and-Conclusions&quot; style=&quot;position:relative;&quot;&gt;Outcomes and Conclusions&lt;a href=&quot;#Outcomes-and-Conclusions&quot; aria-label=&quot;Outcomes and Conclusions permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We achieved reusable domain logic using Ad-hoc Polymorphism, abstracting out the effect using TypeClasses and Higher-Kinded Types, migrating our Monomorphic code to Polymorphic. This is very powerful to model B2C-services and to-be-scalable services. This &lt;strong&gt;zeros-down the cost and effort&lt;/strong&gt; to rewrite and maintain common business logic across all parallel services and future service migrations, speeding-up the feature development.&lt;/p&gt;
&lt;h2 id=&quot;References&quot; style=&quot;position:relative;&quot;&gt;References&lt;a href=&quot;#References&quot; aria-label=&quot;References permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://community.oracle.com/docs/DOC-918126&quot;&gt;https://community.oracle.com/docs/DOC-918126&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.reactivemanifesto.org/&quot;&gt;https://www.reactivemanifesto.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Subtyping&quot;&gt;https://en.wikipedia.org/wiki/Subtyping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Parametric_polymorphism&quot;&gt;https://en.wikipedia.org/wiki/Parametric_polymorphism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ad_hoc_polymorphism&quot;&gt;https://en.wikipedia.org/wiki/Ad&lt;em&gt;hoc&lt;/em&gt;polymorphism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymorphism.pdf&quot;&gt;https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymorphism.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html&quot;&gt;https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web&quot;&gt;https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://danielwestheide.com/blog/the-neophytes-guide-to-scala-part-12-type-classes/&quot;&gt;https://danielwestheide.com/blog/the-neophytes-guide-to-scala-part-12-type-classes/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Monads for Drunken Coders, Pint-1🍺]]></title><description><![CDATA[A chilled introduction to the Dreaded Monad, using Java 8]]></description><link>https://overfullstack.github.io/posts/monads-for-drunken-coders-pint-1/</link><guid isPermaLink="false">https://overfullstack.github.io/posts/monads-for-drunken-coders-pint-1/</guid><pubDate>Sun, 09 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;Story-of-an-Egg-validator&quot; style=&quot;position:relative;&quot;&gt;Story of an Egg validator&lt;a href=&quot;#Story-of-an-Egg-validator&quot; aria-label=&quot;Story of an Egg validator permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;img class=&quot;post-gif&quot; src=&quot;./media/introduction.gif&quot;&gt;
&lt;h3 id=&quot;Sol-1-One-egg---One-validation&quot; style=&quot;position:relative;&quot;&gt;Sol 1: One egg - One validation&lt;a href=&quot;#Sol-1-One-egg---One-validation&quot; aria-label=&quot;Sol 1 One egg   One validation permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Life is so simple. Pass that one egg through that one validator. Results in good or bad.&lt;/p&gt;
&lt;h3 id=&quot;Sol-23-Many-eggs---One-validation&quot; style=&quot;position:relative;&quot;&gt;Sol 23: Many eggs - One validation&lt;a href=&quot;#Sol-23-Many-eggs---One-validation&quot; aria-label=&quot;Sol 23 Many eggs   One validation permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Not difficult at all, simply pass them through validator, one after the other and collect the results for each one, in order. With simple if-else condition, this code looks like a Cute Sprout! 🌱&lt;/p&gt;
&lt;h3 id=&quot;Sol-97-Many-eggs---Many-validations&quot; style=&quot;position:relative;&quot;&gt;Sol 97: Many eggs - Many validations&lt;a href=&quot;#Sol-97-Many-eggs---Many-validations&quot; aria-label=&quot;Sol 97 Many eggs   Many validations permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Why do I sense climate&apos;s getting a bit hotter. Ok, still no problem, I know Java 8. Let me write a pipe of filter functions. Each of them just pass the good ones ahead and discard bad ones.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java:title=FirstFunctionalCode.java&quot;&gt;eggs.stream()
    .filter(EggValidator::validator1)
    .filter(EggValidator::validator2)
    .filter(EggValidator::validator3)
    ....
    ...
    ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yay! I&apos;m a Functional programmer! Let me have a 🍺&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;But what if at the end of validation pipeline, I need both good and bad eggs? Hmm, placing the 🍺 mug back on table. &lt;/li&gt;
&lt;li&gt;How can I make all of them pass through every validator and accumulate the results? &lt;/li&gt;
&lt;li&gt;Probably, ditch that FP, let me just use the all-friendly for-each loop to iterate through all the eggs, call validator on each egg, store bad eggs separately in a bucket as and when I find one. &lt;/li&gt;
&lt;li&gt;Bad! I couldn&apos;t use those Streams and Lambdas. Anyways, they are just fancy syntactic-sugar. May be next time! Let me go ahead with this if-else ladder for now. Let me take a sip! 🍺&lt;/li&gt;
&lt;li&gt;Wait, what if I also need to know the reason why an egg is bad? &lt;/li&gt;
&lt;li&gt;Let me use a global badEggFailureBucketMap and put eggIndex to validation failure.&lt;/li&gt;
&lt;li&gt;But! how can I tightly map validation-failure-TO-failed-validation-method? Hmm... it&apos;s ok to not tightly map them, I just know which failure is-to what.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suddenly, the cute sprout turned into a tree🎋, with multiple if-else-break-continue branches of execution.&lt;/p&gt;
&lt;h3 id=&quot;Sol-179-Many-Types-of-eggs---Many-validations&quot; style=&quot;position:relative;&quot;&gt;Sol 179: Many Types of eggs - Many validations&lt;a href=&quot;#Sol-179-Many-Types-of-eggs---Many-validations&quot; aria-label=&quot;Sol 179 Many Types of eggs   Many validations permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Seriously, how many validators should I write? One per every egg type? Repeat this entire algo for each and every type, just changing the parameter types!?&lt;/li&gt;
&lt;li&gt;Also, there can be some &lt;strong&gt;exceptional&lt;/strong&gt; eggs, that blow-off while going through the validator, how am I supposed to deal with all those exceptions?&lt;/li&gt;
&lt;li&gt;How am I gonna jenga new validations in the middle of this chaos!?&lt;/li&gt;
&lt;li&gt;By the way, notice, I kept mutating egg list while iterating, removing bad ones. It&apos;s totally confusing to reason-out, how is the state changing. &lt;/li&gt;
&lt;li&gt;Now, don&apos;t ask me to add inter-dependent validations. If they throw exceptions as well, the if-else-try-catch nest crosses all margins and overflows out of my screen.&lt;/li&gt;
&lt;li&gt;Again, don&apos;t ask me to unit-test this shit!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Sol-237-Many-Types-of-eggs---Many-more-validations---in-parallel&quot; style=&quot;position:relative;&quot;&gt;Sol 237: Many Types of eggs - Many more validations - &lt;em&gt;in parallel&lt;/em&gt;&lt;a href=&quot;#Sol-237-Many-Types-of-eggs---Many-more-validations---in-parallel&quot; aria-label=&quot;Sol 237 Many Types of eggs   Many more validations   in parallel permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I think, I&apos;m too drunk. My head is spinning! 🤯&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This design pattern has a name and it&apos;s called the &quot;Evolution-of-a-Problem-Over-Time&quot;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The code ended-up like an Alien plant 👽&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java{8,9,10,18,23,26}:title=CyclomaticEggValidator.java&quot;&gt;void cyclomaticCode() {
  var eggList = Egg.getEggCarton();
  Map&amp;#x3C;Integer, ValidationFailure&gt; badEggFailureBucketMap = new HashMap&amp;#x3C;&gt;();
  var eggIndex = 0;
  for (var iterator = eggList.iterator(); iterator.hasNext(); eggIndex++) {
    var eggTobeValidated = iterator.next();
    if (!Operations.simpleOperation1(eggTobeValidated)) {
      iterator.remove(); // Mutation
      // How can you cleanly map validation-failure to which validation-method failed?
      badEggFailureBucketMap.put(eggIndex, VALIDATION_FAILURE_1);
      continue;
    }
    try {
      if (!Operations.throwableOperation2(eggTobeValidated)) {
        iterator.remove();
        badEggFailureBucketMap.put(eggIndex, VALIDATION_FAILURE_2);
      }
    } catch (Exception e) { // Repetition of same logic for exception handling
      iterator.remove();
      badEggFailureBucketMap.put(eggIndex, ValidationFailure.withErrorMessage(e.getMessage()));
      continue;
    }
    try { // Inter-dependent validations
      if (Operations.throwableOperation31(eggTobeValidated)) {
        var yellowTobeValidated = eggTobeValidated.getYolk();
        if (yellowTobeValidated != null) { // Nested-if for null checking nested objects
          try {
            if (!Operations.throwableAndNestedOperation32(yellowTobeValidated)) {
              iterator.remove();
              badEggFailureBucketMap.put(eggIndex, VALIDATION_FAILURE_32);
            }
          } catch (Exception e) {
            iterator.remove();
            badEggFailureBucketMap.put(eggIndex, ValidationFailure.withErrorMessage(e.getMessage()));
          }
        }
      } else {
        iterator.remove();
        badEggFailureBucketMap.put(eggIndex, VALIDATION_FAILURE_2);
      }
    } catch (Exception e) {
      iterator.remove();
      badEggFailureBucketMap.put(eggIndex, ValidationFailure.withErrorMessage(e.getMessage()));
    }
  }
  for (var entry : badEggFailureBucketMap.entrySet()) {
    System.out.println(entry);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;Imperative-vs-Functional-Chatter&quot; style=&quot;position:relative;&quot;&gt;Imperative vs Functional Chatter&lt;a href=&quot;#Imperative-vs-Functional-Chatter&quot; aria-label=&quot;Imperative vs Functional Chatter permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If a right Paradigm isn&apos;t chosen, you literally have to stab and cut-open the Open-Closed principle every time you get a new requirement. &lt;/li&gt;
&lt;li&gt;Every Software design problem can be seen like a block of objects doing functions or functions doing (I mean, processing) objects. There you go! I just metaphored OOPs vs FP.&lt;/li&gt;
&lt;li&gt;Eggs aren&apos;t doing anything here, they are being done. This clearly is a Functional programming problem. Eggs should NOT be juggled around validation functions, but validations should be &lt;em&gt;applied&lt;/em&gt; on eggs.&lt;/li&gt;
&lt;li&gt;In OOPs, we build classes with state and have functions exposed to operate on that state. But, how can you build a class which lets you provide functions dynamically at run time, to operate on its state. This is fundamental premises on which Functional style is built.&lt;/li&gt;
&lt;li&gt;Of-course, Functional thinking doesn&apos;t solve all the problems, neither is Object oriented thinking. However, in this problem FP is not fighting with OOPs, but with &lt;strong&gt;Imperative Programming&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Our friend here is clearly suffering from trying to do too much of administration, dealing with the eggs.&lt;/li&gt;
&lt;li&gt;Like any other problem, this too has multiple sub-problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Problemsplit&quot; style=&quot;position:relative;&quot;&gt;Problem&lt;code&gt;.split()&lt;/code&gt;&lt;a href=&quot;#Problemsplit&quot; aria-label=&quot;Problemsplit permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;One master function which loops and calls all validation functions and passes around the results to other functions. That&apos;s like doing all the &lt;strong&gt;Administrative-Orchestration-Imperatively&lt;/strong&gt; (That&apos;s how you use 3 adjectives 😎). Such functions are so difficult to Unit test, which indicates, they are difficult to reason-out as well.&lt;/li&gt;
&lt;li&gt;Validations should be &lt;strong&gt;Streamlined&lt;/strong&gt;, in a way that they can be plugged in and out of anywhere in between (like the bars in Jenga).&lt;/li&gt;
&lt;li&gt;The Streamline should let different types of data (The Good, the Bad and the Ugly), to co-exist as they flow. One bucket per type won&apos;t scale, need an alternative to hold &lt;strong&gt;Heterogeneous-Data&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It&apos;s 2k18, please don&apos;t use &lt;strong&gt;&lt;code&gt;if&lt;/code&gt; to null check while Streaming&lt;/strong&gt;. Especially when you have nested objects, you end-up in an if-else hell. The code-flow should not be like a Trigonometric curve, but should be like a Linear equation.&lt;/li&gt;
&lt;li&gt;Mutation is sin, especially when you are mutating a global state. &lt;strong&gt;Immutability&lt;/strong&gt; should be enforced, while the data is streamed across multiple functions, or predicting who-changed-what can kill a lot of your time while debugging.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exceptions are Evil&lt;/strong&gt;, they are camouflaged gotos. Never throw them with your own hands and interrupt your stream and code flow.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ValidationFailure&lt;/code&gt; and validation method are loosely coupled, this makes it way harder to reason-out.&lt;/li&gt;
&lt;li&gt;It is so difficult to unit-test a function like this.&lt;/li&gt;
&lt;li&gt;Finally, we need to find a way to compose our algorithm without worrying about the parameter type, basically abstract away the parameter type on which this algo is being run. &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;But rather than solving them one-by-one, it&apos;s important to find a paradigm, which can solve these problems as a group. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Octopus-Functions&quot; style=&quot;position:relative;&quot;&gt;Octopus Functions&lt;a href=&quot;#Octopus-Functions&quot; aria-label=&quot;Octopus Functions permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It&apos;s been told since my Grandfather, that functions need to be small and do only one thing and do it well, nothing new. We don&apos;t achieve much by splitting the above alien plan into separate functions.&lt;/li&gt;
&lt;li&gt;Coz, there should be an &lt;strong&gt;Octopus function&lt;/strong&gt; administrating all these function calls, which in itself is a monster. &lt;/li&gt;
&lt;li&gt;State being pin-balled among imperative control statements, function calls and try-catches, is a horror show, when trying to reason-out the code flow or debug it.
&lt;img class=&quot;post-gif&quot; src=&quot;./media/octopus.gif&quot;&gt;&lt;/li&gt;
&lt;li&gt;In our problem, it is even trying to handle the coupling between Validation method and Validation failure, through a &lt;code&gt;badEggFailureBucketMap&lt;/code&gt;. That surely is not its responsibility. The Validation method should be responsible to communicate its corresponding validation failure to the orchestrator.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Imperative-Responsibility&quot; style=&quot;position:relative;&quot;&gt;Imperative Responsibility&lt;a href=&quot;#Imperative-Responsibility&quot; aria-label=&quot;Imperative Responsibility permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Let&apos;s take a break from our Monster-Validation-Octopus and look at this simple function, which is just trying to append all last-names from a List of Names with &lt;code&gt;&amp;#x26;&lt;/code&gt;, with a lot of do-this-do-that imperative administration. It might be clear to the computer, but not very intuitive to another developer (or the same dev after sometime). &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-java{3,4,5,6,7,10,11}:title=ImperativeLastName.java&quot;&gt;public static String concatLastNames(List&amp;#x3C;String&gt; team) {
  var output = new StringBuilder();
  var isFirst = true;
  for (var teamMemberName : team) { // Concern-1: Looping through the list
    if (teamMemberName != null) { // Catch-1: Deal with nulls
      teamMemberName = teamMemberName.trim(); // Catch-2: Deal with only white space names
      if (!teamMemberName.isEmpty()) { // Catch-3: Deal with empty names
        if (!isFirst) { // Catch-4: Should not prepend delimiter for first entry. 
          output.append(DELIMITER);
        }
        var lastName = extractLastName(teamMemberName); // Concern-2: Extracting last name
        output.append(lastName); // Concern-3: Aggregating the results with the delimiter.
        isFirst = false;
      }
    }
  }
  return output.toString();
}

private static String extractLastName(String fullName) {
  return fullName.substring(fullName.lastIndexOf(&quot; &quot;) + 1);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Imagine how complicated it becomes, if we require more conditions and exception handling.&lt;/li&gt;
&lt;li&gt;In the age of Java 8, I can say this developer is trying too hard, using low-level stuff like dry if-else and for-each.&lt;/li&gt;
&lt;li&gt;He is taking too much of control over iterating and filtering stuff, and as Uncle Ben says, &lt;strong&gt;With great Power comes great Responsibility&lt;/strong&gt;.
&lt;img class=&quot;post-gif&quot; src=&quot;./media/uncle-ben.gif&quot;&gt;&lt;/li&gt;
&lt;li&gt;You sure don&apos;t have to take this responsibility. Pass that to the Collections library itself, they know how to iterate and filter and much more. Just pass them the &lt;strong&gt;Criteria&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If you get too serious into functional programming, you shall think twice every-time before writing any for-loop or if-else condition. (But don&apos;t take it too serious 😉, for-loops are good for small iterations).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Behead-the-Octopus-Lego-the-Focussed-Functions&quot; style=&quot;position:relative;&quot;&gt;Behead the Octopus, Lego the Focussed Functions&lt;a href=&quot;#Behead-the-Octopus-Lego-the-Focussed-Functions&quot; aria-label=&quot;Behead the Octopus Lego the Focussed Functions permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;State should always march &lt;strong&gt;Unidirectional&lt;/strong&gt;, like an unstoppable army of zombies.
&lt;img class=&quot;post-gif&quot; src=&quot;./media/zombies.gif&quot;&gt;&lt;/li&gt;
&lt;li&gt;I ain&apos;t copying this from the &lt;a href=&quot;https://facebook.github.io/flux/&quot;&gt;Flux&lt;/a&gt; guys at Facebook. This is seen ever since there are pipes in Unix, since 1978.&lt;/li&gt;
&lt;li&gt;Simply, make the shit of a function be the food for another.&lt;/li&gt;
&lt;li&gt;To do that, above Imperative Program can be transformed into &lt;strong&gt;Declarative Style&lt;/strong&gt; like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-java{6,7,8}:title=FunctionalLastName.java&quot;&gt;private static final UnaryOperator&amp;#x3C;String&gt; GET_LAST_NAME =
  fullName -&gt; fullName.substring(fullName.lastIndexOf(&quot; &quot;) + 1);
            
void lastNameCollectorWithStream() {
  final var expected = TEAM.stream()
    .filter(Objects::nonNull) // Catch-11: Deal with nulls.
    .map(String::trim) // Catch-12: Deal with only white space strings.
    .filter(not(String::isEmpty)) // Catch-13: Deal with empty strings.
    .map(GET_LAST_NAME)
    .collect(Collectors.joining(DELIMITER));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;This might not be familiar to many Java devs, but sure is more readable, even for someone unfamiliar with code, if feels like reading an English sentence. &lt;strong&gt;Familiarity is different from Readability&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Separation of Concerns&lt;/strong&gt; made it clear and concise, like an SQL Query.&lt;/li&gt;
&lt;li&gt;This way functions can be fitted into each other to create a smooth pipeline, aiding unidirectional flow of data. &lt;/li&gt;
&lt;li&gt;This is flexible to restructure, and it&apos;s easy to hire and fire these criterion functions, without thinking too much.
&lt;img class=&quot;post-gif&quot; src=&quot;./media/lego.gif&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Flow-Heterogeneous-data-Fluently&quot; style=&quot;position:relative;&quot;&gt;Flow Heterogeneous data Fluently&lt;a href=&quot;#Flow-Heterogeneous-data-Fluently&quot; aria-label=&quot;Flow Heterogeneous data Fluently permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Now that we saw Functional Lego, can we do the same with our validations functions? Can we nicely pipe them and flow our eggs stream through it and expect to see both good eggs and bad eggs at the end of our pipeline?&lt;/li&gt;
&lt;li&gt;Streamlining of functions is easier said than done when dealing with Heterogeneous data.&lt;/li&gt;
&lt;li&gt;Unidirectional flow demands uniform data structure for the entire stream-per-step. A pipeline can have different types of streams, but how can a stream/collection have different data types?
&lt;img class=&quot;post-gif&quot; src=&quot;https://media.giphy.com/media/OeX0obPwKJ0OI/giphy.gif&quot;&gt;&lt;/li&gt;
&lt;li&gt;Flowing through a function, Data inside a stream/collection of one type can metamorphose into various life forms of all shapes and sizes as it comes out, may be due to invalidations or exceptions or some eggs hatch into chickens or dinosaurs or your database just gets struck by a lightning.&lt;/li&gt;
&lt;li&gt;The dichotomy of Data metamorphism with Stream Uniformity can be seen in our current problem. &lt;/li&gt;
&lt;li&gt;We have two categories of data, Good eggs and Bad eggs. But who needs bad eggs, what you really interested are, the Validation failures for bad eggs. &lt;/li&gt;
&lt;li&gt;So two categories here, demand two totally disparate data types (Good-eggs), (Validation-failures due to (invalidations) and (exceptions)) to co-exist, inside a stream, as they flow through the pipeline. Check-out these cases in this pseudo code:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-java{11,14,17,20}:title=PseudoValidator.java&quot;&gt;Stream&amp;#x3C;Egg&gt; validatedEggStream = eggs.stream().map(egg -&gt; validate(egg));

private &amp;#x3C;what-should-I-return?&gt; validate(Egg egg) {
  boolean isValid = false;
  if (!egg.isRotten()) {
    if (egg.getYellow() != null) {
      try {
        makeHalfBoiledOmelette(egg); // My Fav Omlet
        isValid = true;
      } catch (EggException e) { 
        return &amp;#x3C;How-to-return-exception?&gt;; // case 1 exception
      }
    } else if (egg.getEggWhite() != null) {
      eggWhiteDefect = examineEggWhite(egg); // case 2 inter-dependent validation fails
      isValid = (eggWhiteDefect == null);
    } else {
      return &amp;#x3C;not-an-egg&gt;; // case 3
    }
  }
  return isValid ? egg : &amp;#x3C;How-to-return-defect?&gt;; //case 4
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;This poor function is not sure how to communicate back to its caller with multiple possibilities. Unfortunately, Strongly-typed languages are strict about return type.&lt;/li&gt;
&lt;li&gt;Had it been a Dynamically-typed-language like Javascript, this is not a problem at all. This is one of the reasons why Dynamically typed languages got popular for. Of-course, that makes them very difficult to debug. It&apos;s difficult to build even a proper IDE around them.&lt;/li&gt;
&lt;li&gt;A dirty solution in a Strongly-typed-language like Java can be, have some Enum &lt;code&gt;ValidationFailureType&lt;/code&gt; as the return type which has all failure types listed, and in all these cases just return that specific failure accordingly. &lt;/li&gt;
&lt;li&gt;In valid case, you need to return something like &lt;code&gt;ValidationFailureType.NONE&lt;/code&gt;. But, that means you can&apos;t pipe this function, with other validation functions (without the octopus orchestrator), as the valid egg is now lost in the oblivion of if-else labyrinth.&lt;/li&gt;
&lt;li&gt;If you return a &lt;code&gt;null&lt;/code&gt; in valid case, you know what happens if caller doesn&apos;t know about that. A blast of NPE!  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Containerization&lt;/strong&gt; solves this. &lt;/li&gt;
&lt;li&gt;Ship your heterogeneous data inside these containers. Not those plain-old-java-wrappers, but &lt;strong&gt;Containers&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&apos;s take a fork here and visit the Monad-Land to understand Containerization.&lt;/p&gt;
&lt;h4 id=&quot;Functors&quot; style=&quot;position:relative;&quot;&gt;Functors&lt;a href=&quot;#Functors&quot; aria-label=&quot;Functors permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Ya, data container is too simple to be intimidating, and so they named them &lt;strong&gt;Functors&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;They are just simple objects that implement &lt;code&gt;map&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Functor contains a value &lt;code&gt;x&lt;/code&gt; of some type, and let you operate on that value by passing a first-class function &lt;code&gt;f&lt;/code&gt; through &lt;code&gt;map&lt;/code&gt;, that returns you a new functor containing result value &lt;code&gt;f(x)&lt;/code&gt;. (This is Functional English 😋).&lt;/li&gt;
&lt;li&gt;If that&apos;s not clear, this code snippet should clarify it:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-java{7}:title=Functor.java&quot;&gt;public class Functor&amp;#x3C;T&gt; {
  private final T value;
  public Functor(T value) {
    this.value = value;
  }
  public &amp;#x3C;U&gt; Functor&amp;#x3C;U&gt; map(Function&amp;#x3C;T, U&gt; mapperFunction) {
    return new Functor&amp;#x3C;&gt;(mapperFunction.apply(value)); // Functor wrapping f(x)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;The-Siblings---map-flatMap&quot; style=&quot;position:relative;&quot;&gt;The Siblings - &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;flatMap()&lt;/code&gt;&lt;a href=&quot;#The-Siblings---map-flatMap&quot; aria-label=&quot;The Siblings   map flatMap permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;img class=&quot;post-gif&quot; src=&quot;./media/minions.gif&quot;&gt;
&lt;ul&gt;
&lt;li&gt;Both &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;flatMap()&lt;/code&gt; are Higher-Order functions, which take first-class functions as parameters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt; applies the mapper-function on wrapped value and returns a new Functor instance, wrapping the result value. Say, if the return value of the mapper-function is a &lt;code&gt;Functor&amp;#x3C;T&gt;&lt;/code&gt;, then the return value of &lt;code&gt;map&lt;/code&gt; ends up being &lt;code&gt;Functor&amp;#x3C;Functor&amp;#x3C;T&gt;&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flatMap&lt;/code&gt; applies the mapper-function and simply returns its result without wrapping in another Functor.&lt;/li&gt;
&lt;li&gt;So, the difference is, the return value of the mapper-function should be a &lt;code&gt;Functor&amp;#x3C;T&gt;&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt; returns it as is.&lt;/li&gt;
&lt;li&gt;But why am I speaking about &lt;code&gt;flatMap()&lt;/code&gt; ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;The-Monad&quot; style=&quot;position:relative;&quot;&gt;The Monad&lt;a href=&quot;#The-Monad&quot; aria-label=&quot;The Monad permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Finally! the Dawn of Monad (Introducing the title lead with a BGM)
&lt;img class=&quot;post-gif&quot; src=&quot;./media/dawn-of-justice.gif&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The curse of the monad is that once you get the epiphany, once you understand - &quot;oh that&apos;s what it is&quot; - you lose the ability to explain it to anybody.
- Douglas Crockford&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Douglas is right in a way, but here is what my understanding (although not an epiphany), in its most simplistic form: &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Monads are Functors, which also implement &lt;code&gt;flatmap&lt;/code&gt; and abide by some Monad laws.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Monad laws are simple math-rules, like the associativity, Left identity and Right identity. More on these later.&lt;/li&gt;
&lt;li&gt;Of-course, there is no such constraint that Monads should ONLY implement &lt;code&gt;flatMap&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This is how the simplest Monad looks. (Observe the difference in mapper functions passed to &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-java{9,10,11}:title=Monad.java&quot;&gt;public class Monad&amp;#x3C;T&gt; {
  private final T value;
  public Monad(T value) {
    this.value = value;
  }
  public &amp;#x3C;U&gt; Monad&amp;#x3C;U&gt; map(Function&amp;#x3C;T, U&gt; mapperFunction) {
    return new Monad&amp;#x3C;&gt;(mapping.apply(value));
  }
  public &amp;#x3C;U&gt; Monad&amp;#x3C;U&gt; flatMap(Function&amp;#x3C;T, Monad&amp;#x3C;U&gt;&gt; mapperFunction) {
    return mapperFunction.apply(value);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Monad&apos;s anatomy needs 3 basic organs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Parameterized type: &lt;code&gt;Monad&amp;#x3C;T&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A Unit function: &lt;code&gt;new Monad()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A Bind function: &lt;code&gt;flatMap()&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enough of Theory! how can this help the problem at hand?&lt;/p&gt;
&lt;h3 id=&quot;Problemssplitstreambrmapthissolveproblem&quot; style=&quot;position:relative;&quot;&gt;Problems&lt;code&gt;.split().stream()&lt;/code&gt;&lt;br/&gt;&lt;code&gt;.map(this::solve(problem))&lt;/code&gt;&lt;a href=&quot;#Problemssplitstreambrmapthissolveproblem&quot; aria-label=&quot;Problemssplitstreambrmapthissolveproblem permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You would have got a hint by now. Monads are the data containers you need. The problem is solved by one container-type (which can be the unit for uniformity through-out the pipeline) and a variable-value-type contained inside (which can be morphed from type to type).&lt;/li&gt;
&lt;li&gt;Now every function can speak the same language, by passing around these Monad boxes and operate on them with functions, without worrying much about what it contains. Uniform boxes with Heterogenous data.&lt;/li&gt;
&lt;li&gt;Like, validation functions can ship either a goodEgg or a validation failure to the orchestration function by wrapping them in a Monad box, and it doesn&apos;t even care what&apos;s in the box. &lt;/li&gt;
&lt;li&gt;Now, Orchestrator only has one job to do, just pump the data inside the pipeline ahead to the next validation function.
&lt;img class=&quot;post-gif&quot; src=&quot;./media/wow.gif&quot;&gt;&lt;/li&gt;
&lt;li&gt;Now, both the Parameter type and Algorithm are cleanly separate, and algo can be reused on multiple parameter types, which solves our last problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Post-credits-scene-Making-of-a-Monad&quot; style=&quot;position:relative;&quot;&gt;Post credits scene: Making of a Monad&lt;a href=&quot;#Post-credits-scene-Making-of-a-Monad&quot; aria-label=&quot;Post credits scene Making of a Monad permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now you see it? Now you don&apos;t?
&lt;img class=&quot;post-gif&quot; src=&quot;./media/now-you-see-me.gif&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This blog post is already too long and so I left the part on how these problems are solved with Monads for the sequel.&lt;/li&gt;
&lt;li&gt;Chances are you already worked with lot of Monads, if you started adapting Java 8 or above.&lt;/li&gt;
&lt;li&gt;Java guys took 3 years between Java 7 and 8 and packed Java 8 with bunch of functional toys, and alongside came some Monads like Optional, Stream etc.,.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wanna see how the entire pipeline works seamlessly with the Monad, even with some exceptional eggs blown in-between?
The sequel brings-in some new names like Immutability, Parallelism, Memoization and X-Men evolution (Just kidding!)&lt;/p&gt;
&lt;p&gt;Let&apos;s cook a Monad.&lt;/p&gt;
&lt;p&gt;Well, I couldn&apos;t find time to prepare a pint-2, but this talk I gave covers everything about what is discussed till now and further:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;youtube: https://www.youtube.com/embed/l9jJ7m7_VpM&lt;/code&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Functional Terminology ⨐]]></title><description><![CDATA[Speak Functional language fluently]]></description><link>https://overfullstack.github.io/posts/functional-terminology/</link><guid isPermaLink="false">https://overfullstack.github.io/posts/functional-terminology/</guid><pubDate>Fri, 07 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;Pure-Functions&quot; style=&quot;position:relative;&quot;&gt;Pure Functions&lt;a href=&quot;#Pure-Functions&quot; aria-label=&quot;Pure Functions permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;These return a value based on what is passed in to the function.&lt;/li&gt;
&lt;li&gt;For instance, if we pass x into a function as input we will get F of x out as output. &lt;/li&gt;
&lt;li&gt;Another property of a pure function is that it will always return the same result for the same passed in value. &lt;/li&gt;
&lt;li&gt;If we pass input x into the function again, we should get back the exact same value, F of x. You should be able to do this an infinite amount of times and always get back the same output for a specific input. In addition, pure functions do not modify values outside of its scope. They are independent from any state in the system.&lt;/li&gt;
&lt;li&gt;They never mutate data and they do not produce side effects. Generally, they can also easily be reused.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;First-Class-Functions&quot; style=&quot;position:relative;&quot;&gt;First-Class Functions&lt;a href=&quot;#First-Class-Functions&quot; aria-label=&quot;First Class Functions permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;First of all, a programming language must support first-class functions to support the functional programming paradigm.&lt;/li&gt;
&lt;li&gt;First-class functions can be stored as a variable, they can be passed as an argument, and also they can be returned as the result of a function call.&lt;/li&gt;
&lt;li&gt;In addition, a first-class function can also be bound to a variable name, as well as stored in a data structure. Basically, you can generally do anything with a first-class function that you would be able to do with a variable or object. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Higher-order-Functions&quot; style=&quot;position:relative;&quot;&gt;Higher-order Functions&lt;a href=&quot;#Higher-order-Functions&quot; aria-label=&quot;Higher order Functions permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;These are functions that can operate on other functions. They can take in a function as input, or even return one as output.&lt;/li&gt;
&lt;li&gt;First-class functions are useless without higher-order functions to pass them into or return them from.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Anonymous-Functions&quot; style=&quot;position:relative;&quot;&gt;Anonymous Functions&lt;a href=&quot;#Anonymous-Functions&quot; aria-label=&quot;Anonymous Functions permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The roots of anonymous functions lie heavily in lambda calculus.&lt;/li&gt;
&lt;li&gt;An anonymous function allows us to define ad hoc logic as we need, without needing to declare a formal named function. &lt;/li&gt;
&lt;li&gt;They are nameless and they can also serve as an argument to another function. &lt;/li&gt;
&lt;li&gt;Also, they can be assigned to a variable. They are basically a nameless first-class function.&lt;/li&gt;
&lt;li&gt;Anonymous functions can be passed into or returned from a higher-order function. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Clousures&quot; style=&quot;position:relative;&quot;&gt;Clousures&lt;a href=&quot;#Clousures&quot; aria-label=&quot;Clousures permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Closures are lexically scoped name binding in languages with first-class functions. Closures give us function portability. Closures are what allow us to pass around and store functions. &lt;/li&gt;
&lt;li&gt;A closure is defined as a &lt;strong&gt;persistent local variable scope&lt;/strong&gt; which holds on to local variables after the code execution has moved out of that block.&lt;/li&gt;
&lt;li&gt;Captured variables can be accessed through the closure&apos;s copies of variable values or references when the function is invoked outside of their scope. A closure, which is the scope of a function, is kept alive by a reference to that function. Variables which were in scope when that function was defined will still be in scope when we call it later in a different context.&lt;/li&gt;
&lt;li&gt;A closure can also be thought of as a record storing a function together with a environment. One final way of defining a closure is as a mapping associating each variable of the function with the value or reference to which the name was bound when the closure was created. Next up, let&apos;s go over functional composition.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Some-more&quot; style=&quot;position:relative;&quot;&gt;Some-more&lt;a href=&quot;#Some-more&quot; aria-label=&quot;Some more permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Monad&lt;/strong&gt;, Think of monad as a context object that wraps a value and allows us to apply a set of transformations on that value and get it back out with all the transformations applied. &lt;/li&gt;
&lt;li&gt;Stream and Optional are Monads, when they are used as &lt;code&gt;Stream.of()&lt;/code&gt; and &lt;code&gt;Optional.of()&lt;/code&gt; as constructors and &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;flatMap()&lt;/code&gt; as binding functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-java:title=OptionalMonad.java&quot;&gt;Optional.of(5).flatMap(addOne).flatMap(addTwo).equals(Optional.of(5).flatMap(addThree));
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collect()&lt;/code&gt; method is called &lt;strong&gt;fold&lt;/strong&gt; in FP terms, which summarizes bunch of values into one.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Pocket Design Patterns 📋]]></title><description><![CDATA[All the popular Design Patterns abridged for quick revision, along with some tidbits.]]></description><link>https://overfullstack.github.io/posts/pocket-design-patterns/</link><guid isPermaLink="false">https://overfullstack.github.io/posts/pocket-design-patterns/</guid><pubDate>Sat, 14 Apr 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;Creational-Patterns&quot; style=&quot;position:relative;&quot;&gt;Creational Patterns&lt;a href=&quot;#Creational-Patterns&quot; aria-label=&quot;Creational Patterns permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;Factory-method-Vs-Abstract-Factory&quot; style=&quot;position:relative;&quot;&gt;Factory method Vs Abstract Factory&lt;a href=&quot;#Factory-method-Vs-Abstract-Factory&quot; aria-label=&quot;Factory method Vs Abstract Factory permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Abstract factory has a level more depth of abstraction.&lt;/li&gt;
&lt;li&gt;Factory method abstracts creation of a family of objects.&lt;/li&gt;
&lt;li&gt;Abstract factory does the same, but inside, the product depends on an abstract factory which can be assigned any of the family of factories. &lt;/li&gt;
&lt;li&gt;This abstract factory is &apos;composed&apos; (HAS-A) inside factory.&lt;/li&gt;
&lt;li&gt;Abstract Factory is one level higher in abstraction than Factory Method. Factory Method abstracts the way objects are created, while Abstract Factory abstracts the way factories are created which in turn abstracts the way objects are created.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Builder-Pattern&quot; style=&quot;position:relative;&quot;&gt;Builder Pattern&lt;a href=&quot;#Builder-Pattern&quot; aria-label=&quot;Builder Pattern permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When the parameters involved in construction of an object are dynamic and inconsistent in terms of optional/required, passing null for optionals or having multiple constructors can get dirty.&lt;/li&gt;
&lt;li&gt;Instead, a &apos;builder&apos; class, which HAS-A the object to build, can be made responsible of creation.&lt;/li&gt;
&lt;li&gt;This can be achieved by fluent methods inside builder class, which act like setter methods on the object to be created.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Behavioral-Patterns&quot; style=&quot;position:relative;&quot;&gt;Behavioral Patterns&lt;a href=&quot;#Behavioral-Patterns&quot; aria-label=&quot;Behavioral Patterns permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;Strategy-Pattern&quot; style=&quot;position:relative;&quot;&gt;Strategy Pattern&lt;a href=&quot;#Strategy-Pattern&quot; aria-label=&quot;Strategy Pattern permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&quot;Encapsulate what varies&quot;, use HAS-A over IS-A.&lt;/li&gt;
&lt;li&gt;Behavior encapsulated into an object which is used HAS-A. This can be dynamically changed to change behavior of the object.&lt;/li&gt;
&lt;li&gt;This is called Runtime Sub-classing or Runtime Polymorphism.&lt;/li&gt;
&lt;li&gt;This is alternative to sub-classing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Observer-pattern&quot; style=&quot;position:relative;&quot;&gt;Observer pattern&lt;a href=&quot;#Observer-pattern&quot; aria-label=&quot;Observer pattern permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Observer objects are registered in a HAS-A fashion.&lt;/li&gt;
&lt;li&gt;All observers implement same interface that contain the notify or callback method.&lt;/li&gt;
&lt;li&gt;This encourages loose coupling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Command-Pattern&quot; style=&quot;position:relative;&quot;&gt;Command Pattern&lt;a href=&quot;#Command-Pattern&quot; aria-label=&quot;Command Pattern permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Encapsulates request or command as an object.&lt;/li&gt;
&lt;li&gt;To decouple client from receiver Invocation, the request/command object is given to invoker, instead of directly invoking it on the receiver.&lt;/li&gt;
&lt;li&gt;It helps in Queueing, logging requests etc.&lt;/li&gt;
&lt;li&gt;Command object HAS-A receiver which calls methods on receiver. Client just has to call invoker.execute();&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Template-Method-Pattern&quot; style=&quot;position:relative;&quot;&gt;Template Method Pattern&lt;a href=&quot;#Template-Method-Pattern&quot; aria-label=&quot;Template Method Pattern permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It defines the skeleton of algorithm, deferring some steps to sub-classes to define or redefine, without changing algorithm structure.&lt;/li&gt;
&lt;li&gt;It can also contain methods called &apos;Hooks&apos;, to provide default implementation of a method common to all classes.&lt;/li&gt;
&lt;li&gt;In template, client can depend on higher abstract class. It has control over algorithm and calls to subclasses only when there is a need to implement a method.&lt;/li&gt;
&lt;li&gt;This is a great design tool for creating &lt;em&gt;Frameworks&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Iterator-Pattern&quot; style=&quot;position:relative;&quot;&gt;Iterator Pattern&lt;a href=&quot;#Iterator-Pattern&quot; aria-label=&quot;Iterator Pattern permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Provides a way to iterate through a aggregate collection of objects.&lt;/li&gt;
&lt;li&gt;The Iterator object consists of methods that takes care of looping through the collection.&lt;/li&gt;
&lt;li&gt;Underlying representation of collection (be it array or arrayList or HashMap) is hidden from client.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Composite-Pattern&quot; style=&quot;position:relative;&quot;&gt;Composite Pattern&lt;a href=&quot;#Composite-Pattern&quot; aria-label=&quot;Composite Pattern permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It deals with 2 responsibilities: &lt;em&gt;Iterating&lt;/em&gt; and &lt;em&gt;Uniformity&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Allows objects to compose objects into tree structure to represent &lt;em&gt;Part-Whole&lt;/em&gt; hierarchies.&lt;/li&gt;
&lt;li&gt;It lets client treat both individual objects and composite objects the same way.&lt;/li&gt;
&lt;li&gt;SRP (Single Responsibility Principle) is violated for Transparency.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;State-Pattern&quot; style=&quot;position:relative;&quot;&gt;State Pattern&lt;a href=&quot;#State-Pattern&quot; aria-label=&quot;State Pattern permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The behavior of an object depends on its state.&lt;/li&gt;
&lt;li&gt;State is controlled and switched using a HAS-A object.&lt;/li&gt;
&lt;li&gt;It smells like &lt;em&gt;Strategy Pattern&lt;/em&gt; but they differ in intent.&lt;/li&gt;
&lt;li&gt;Strategy pattern is an alternate for Sub-Classing while State pattern is an alternative to having if-else conditions everywhere and encapsulating behavior to state object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Structural-Patterns&quot; style=&quot;position:relative;&quot;&gt;Structural Patterns&lt;a href=&quot;#Structural-Patterns&quot; aria-label=&quot;Structural Patterns permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;Decorator-Pattern&quot; style=&quot;position:relative;&quot;&gt;Decorator Pattern&lt;a href=&quot;#Decorator-Pattern&quot; aria-label=&quot;Decorator Pattern permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&quot;Open-Closed&quot; Principle. Open for extension and closed for change.&lt;/li&gt;
&lt;li&gt;This is used to achieve &quot;Dynamic Inheritance&quot;.&lt;/li&gt;
&lt;li&gt;A component is given to Decorator object as HAS-A and Decorator class adds extra functionality or responsibility to it.&lt;/li&gt;
&lt;li&gt;Both component and Decorator implement the same interface. So one decorator can be component to another decorator, thus behavior can be added in layers or wrappers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Adapter-Pattern&quot; style=&quot;position:relative;&quot;&gt;Adapter Pattern&lt;a href=&quot;#Adapter-Pattern&quot; aria-label=&quot;Adapter Pattern permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Converts one interface to another (Target), adaptable to client.&lt;/li&gt;
&lt;li&gt;It is done by implementing &apos;Target&apos; interface and HAS-A Adoptee object. Now client calls methods on Adapter and it delegates appropriately to Adoptee.&lt;/li&gt;
&lt;li&gt;Decorator, Adapter and Facade patterns are close but differ in their intent.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Bridge-Pattern&quot; style=&quot;position:relative;&quot;&gt;Bridge Pattern&lt;a href=&quot;#Bridge-Pattern&quot; aria-label=&quot;Bridge Pattern permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This is similar to Adapter pattern, except that it bridges between two hierachies of abstractions.&lt;/li&gt;
&lt;li&gt;It has two layers abstractions, one that holds the interface methods for client and the other abstraction is what actual implementations extend.&lt;/li&gt;
&lt;li&gt;Abstraction for client HAS-A implementor abstraction for delegation.&lt;/li&gt;
&lt;li&gt;This provides flexibility for both these hierarchies to independently change.&lt;/li&gt;
&lt;li&gt;This has downside of increasing complexity.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Facade-Pattern&quot; style=&quot;position:relative;&quot;&gt;Facade Pattern&lt;a href=&quot;#Facade-Pattern&quot; aria-label=&quot;Facade Pattern permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It&apos;s an unified interface, that a client can use with ease to control many other sub-systems.&lt;/li&gt;
&lt;li&gt;A facade HAS-A all other components of sub-systems references and makes use of them appropriately.&lt;/li&gt;
&lt;li&gt;If there are too many sub-systems for one Facade to handle, we can multiple layers of Facade.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Proxy-Pattern&quot; style=&quot;position:relative;&quot;&gt;Proxy Pattern&lt;a href=&quot;#Proxy-Pattern&quot; aria-label=&quot;Proxy Pattern permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It provides a surrogate or placeholder for another object to control access to it.&lt;/li&gt;
&lt;li&gt;The local stub has the same API as original object. Once client invokes any method on stub, it requests the state of original object and provides it to the client.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Decorator-vs-Adapter-vs-Facade&quot; style=&quot;position:relative;&quot;&gt;Decorator vs Adapter vs Facade&lt;a href=&quot;#Decorator-vs-Adapter-vs-Facade&quot; aria-label=&quot;Decorator vs Adapter vs Facade permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Decorator: Adds responsibility without the change of interface.&lt;/li&gt;
&lt;li&gt;Adapter: Converts on interface to another.&lt;/li&gt;
&lt;li&gt;Facade: Simplify an interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Bonus&quot; style=&quot;position:relative;&quot;&gt;Bonus&lt;a href=&quot;#Bonus&quot; aria-label=&quot;Bonus permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;Principle-of-Least-knowledge-or-Law-of-Delimiter&quot; style=&quot;position:relative;&quot;&gt;Principle of Least knowledge (or) Law of Delimiter&lt;a href=&quot;#Principle-of-Least-knowledge-or-Law-of-Delimiter&quot; aria-label=&quot;Principle of Least knowledge or Law of Delimiter permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;One should make calls only to its immediate objects. Otherwise, it builds unnecessary dependencies between objects and makes the system fragile and complex to understand.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-java:title=LawOfDelimiter.java&quot;&gt;station.getThermometer().getTemp() // Wrong approach
station.getTemp() // Right approach
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;But we can call methods on objects we pass or create in any local methods.&lt;/li&gt;
&lt;li&gt;However, this results in more &apos;wrapper&apos; classes being written.&lt;/li&gt;
&lt;li&gt;The same is followed in Facade pattern, client only interacts with its immediate Facade object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Hollywood-Principle&quot; style=&quot;position:relative;&quot;&gt;Hollywood Principle&lt;a href=&quot;#Hollywood-Principle&quot; aria-label=&quot;Hollywood Principle permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Always higher level components should call lower-level ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;MVC-Pattern&quot; style=&quot;position:relative;&quot;&gt;MVC Pattern&lt;a href=&quot;#MVC-Pattern&quot; aria-label=&quot;MVC Pattern permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;View and Controller together implement &lt;em&gt;Strategy Pattern&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;View depends on controller for user actions, so view behavior depends on Controller. Now, this controller can be easily replaced with another to change behavior.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Kung fu Lambda ƛ]]></title><description><![CDATA[Fun in Functional Programming with Java 8 and how it is competing with younger functional languages.]]></description><link>https://overfullstack.github.io/posts/functional-programming-with-java-8/</link><guid isPermaLink="false">https://overfullstack.github.io/posts/functional-programming-with-java-8/</guid><pubDate>Wed, 26 Oct 2016 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;FP-vs-OOP-Simply&quot; style=&quot;position:relative;&quot;&gt;FP vs OOP Simply:&lt;a href=&quot;#FP-vs-OOP-Simply&quot; aria-label=&quot;FP vs OOP Simply permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Whenever I write some code to deal with data about an entity, then functional programming seems to work best.&lt;/li&gt;
&lt;li&gt;Whenever I write some code to simulate that entity, then object-oriented programming seems to work best.
For example, if we have to design a system that deals with &lt;strong&gt;People&lt;/strong&gt;, we use OOP to design a &lt;strong&gt;Person&lt;/strong&gt; class, which holds the state and behavior of a person. But let us say, we need to perform an operation to calculate age of every person based on their DOB, OOP tells us to keep that as a function inside &lt;strong&gt;Person&lt;/strong&gt; class. But if you as FP, it looks at it like a mathematical data-driven operation. It suggests you to prepare a function independent of a person class, which can be called with DOB as input, and we get age as output. We can &lt;strong&gt;Evaluate&lt;/strong&gt; ages of all people by passing them through this function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Only-Java-8&quot; style=&quot;position:relative;&quot;&gt;Only Java 8?&lt;a href=&quot;#Only-Java-8&quot; aria-label=&quot;Only Java 8 permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Functional Programming is just a different way of thinking about structuring your code. Java 8, just provides new toys to make it more handy. That said, functional programming can be implemented even in Java 6, using anonymous inner classes in-place of lambdas.&lt;/p&gt;
&lt;h3 id=&quot;Why-Functional-Programming&quot; style=&quot;position:relative;&quot;&gt;Why Functional Programming?&lt;a href=&quot;#Why-Functional-Programming&quot; aria-label=&quot;Why Functional Programming permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FP is handy over OOP when the core essence of objects are functions. In such scenario, design can be changed from OOP to FP, by passing the core function as an argument to constructor and use it for evaluation. This smells &lt;strong&gt;Strategy Pattern&lt;/strong&gt;. Before Java 8, we had to use anonymous inner classes to achieve the same.&lt;/li&gt;
&lt;li&gt;Functions can be treated as values, and they can be assigned to variables. These are called &lt;strong&gt;First Class Functions&lt;/strong&gt; and this type of programming is called &lt;strong&gt;Higher Order Programming&lt;/strong&gt;. Function&amp;#x3C;&gt;, Consumer&amp;#x3C;&gt; etc can be used as variable types to which either lambdas or anonymous inner classes be assigned as values.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-java:title=FirstClassFunction.java&quot;&gt;private static Function&amp;#x3C;String, String&gt; lastWord = (String phrase) -&gt;
     Arrays.asList(phrase.split(&quot; &quot;)).stream()
                    .reduce((other, last) -&gt; last)
                    .orElse(&quot;&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Functional Interfaces, with only one abstract function, can be represented with Lambdas, () -&gt; {}&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data-in Data-out (DIDO) Functions&lt;/strong&gt;, are those that return the same value for a given set of inputs. This is called &lt;strong&gt;Referential Transparency&lt;/strong&gt;. Also know as &lt;strong&gt;Pure Functions&lt;/strong&gt; or functions with &lt;strong&gt;No Side Effects&lt;/strong&gt;. These kind of functions form the core of a Functional program.&lt;/li&gt;
&lt;li&gt;FP also encourages &lt;strong&gt;Immutability&lt;/strong&gt; for the same reason, to avoid any side effects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Thinking-in-FP&quot; style=&quot;position:relative;&quot;&gt;Thinking in FP&lt;a href=&quot;#Thinking-in-FP&quot; aria-label=&quot;Thinking in FP permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In the code below, the function receives lambda as an argument. Since this is a type of Functional Interface, the lambda holds the implementation of single abstract method, in this case &lt;code&gt;apply()&lt;/code&gt; (&apos;apply&apos; is the notation used for single abstract method in functional interface when its purpose can be anything).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-java:title=FunctionalInterface.java&quot;&gt;@FunctionalInterface
public static interface FunctionOf3 {
  public double apply(double a, double b, double c);
}

static FunctionOverTime combinationOf3(FunctionOverTime a, FunctionOverTime b, FunctionOverTime c, FunctionOf3 combination) {
  return (time) -&gt; combination.apply(a.valueAt(time), b.valueAt(time), c.valueAt(time));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Think of lambdas as Maths formulas. So you can essentially pass the values along with their formula to the function, and function uses the formula passed to evaluate like above. This way we can abstract the formula and the values passed.&lt;/li&gt;
&lt;li&gt;Like Encapsulation in OOP, FP&apos;s mantra is &lt;strong&gt;Isolation&lt;/strong&gt;, that is running functions without any knowledge of the outside world.&lt;/li&gt;
&lt;li&gt;In FP thinking, &lt;strong&gt;Evaluation over Execution&lt;/strong&gt; is preferred. Evaluation is mostly constructed with DIDO (Data-in Data-out) functions, which take data in, process and return an output, without causing side effects. This should form the Core of the application. This is wrapped up with Execution elements like UI, DB, File IO etc. Functional part should only focus on evaluation and computing output from input.&lt;/li&gt;
&lt;li&gt;Make functions generic whenever possible.&lt;/li&gt;
&lt;li&gt;Java 8 recognizes and treats static functions, that don&apos;t need instance instantiation, as constants. This way it doesn&apos;t have to create instance every time the method is called.&lt;/li&gt;
&lt;li&gt;When looping through a list and implementing multiple operations on it, the code inside the loop clubs logic for all those operations. Instead it would be clean if we can separate those operations into different functions, which leads to &lt;strong&gt;Separation of Concerns&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In non-java8 environments, when using anonymous classes in-place of lambdas, try putting them outside as static constants of Function type or equivalent, and pass into Stream operations.&lt;/li&gt;
&lt;li&gt;To perform multiple operations on same list of elements, link them like &lt;strong&gt;Pipeline&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Streams&quot; style=&quot;position:relative;&quot;&gt;Streams&lt;a href=&quot;#Streams&quot; aria-label=&quot;Streams permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;List elements are passed one after the other and one at a time, through all the stream operations.&lt;/li&gt;
&lt;li&gt;None of the stream operations gets triggered, until a Terminal operation (Like reduce), is called. This is &lt;strong&gt;Lazy Processing&lt;/strong&gt;. It&apos;s like the terminal operation is a trigger and puller of data from the stream, processed through all operations. It pulls one-by-one till the list is all covered.&lt;/li&gt;
&lt;li&gt;Lazy processing is efficient and moreover it does things with Separation of Concerns.&lt;/li&gt;
&lt;li&gt;Also, all intermediate operations are &lt;strong&gt;Lazy Streams&lt;/strong&gt;, which means one unit of stream gets executed through all the steps in the pipe-line, before the next one is taken up. If a Truncate operation like &lt;code&gt;findFirst()&lt;/code&gt; is encountered, rest of the units are ignored.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-java:title=LazyStream.java&quot;&gt;List&amp;#x3C;Integer&gt; list = Arrays.asList(1, 10, 3, 7, 5);
int a = list.stream()
            .peek(num -&gt; System.out.println(&quot;will filter &quot; + num))
            .filter(x -&gt; x &gt; 5)
            .findFirst()
            .get();
System.out.println(a);

/* 
This outputs:
will filter 1
will filter 10
10
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Functions like &lt;code&gt;mapToDouble()&lt;/code&gt; can deal with primitives without wrapping, which is more efficient. Explore more of such...&lt;/li&gt;
&lt;li&gt;Short-Circuiting terminal operations like &lt;code&gt;anyMatch()&lt;/code&gt; process the stream only as much as required to return the desired result.&lt;/li&gt;
&lt;li&gt;Once the terminal operation is executed, the stream is dead, and throws an exception when reused (Unlike Iterator which would just return empty). To Reuse as Stream, declare it as type &lt;code&gt;Supplier&amp;#x3C;Stream&gt;&lt;/code&gt; and use its &lt;code&gt;get()&lt;/code&gt; method to get new instance of stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-java:title=Supplier.java&quot;&gt;Supplier&amp;#x3C;DoubleStream&gt; totalStream = () -&gt; saleStream().mapToDouble(Sale::total);
boolean bigSaleDay = totalStream.get().anyMatch(total -&gt; total &gt; 100.00);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Intermediate operations when called on a stream returns a stream.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;flatMap()&lt;/code&gt; to flatten a collection of stream before operating on it and outputs a concatenation of all those streams.&lt;/li&gt;
&lt;li&gt;In the code below, assume &lt;code&gt;saleStream()&lt;/code&gt; produces a stream of sales and every sale has a list of items. &lt;code&gt;map&lt;/code&gt; returns a Stream of Streams, while &lt;code&gt;flatMap&lt;/code&gt; flattens all those streams and concatinates them into a single stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-java:title=MapAndFlatMap.java&quot;&gt;Stream&amp;#x3C;Stream&amp;#x3C;Item&gt;&gt; itemStream1 = saleStream().map(sale -&gt; sale.items.stream());
Stream&amp;#x3C;Item&gt; itemStream2 = saleStream().flatMap(sale -&gt; sale.items.stream());
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collect()&lt;/code&gt; to collect the out-coming stream to a desired data structure like List. It also has interesting functions like &lt;code&gt;groupBy&lt;/code&gt; and &lt;code&gt;groupByConcurrent&lt;/code&gt;, &lt;code&gt;summarizingDoubles&lt;/code&gt; etc. This is called &lt;strong&gt;fold&lt;/strong&gt; in FP terms, which summarizes bunch of values into one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stream.generate(supplier)&lt;/code&gt; can generate an infinite stream of objects, but it needs to be used along with a Short-Circuiting operator like &lt;code&gt;limit()&lt;/code&gt;. The below code generates sale objects supplied by the &lt;code&gt;Supplier&lt;/code&gt;, limited by the quantity passed.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-java:title=InfiniteStream.java&quot;&gt;public static Supplier&amp;#x3C;Sale&gt; supplier = () -&gt; new Sale(...);
return Stream.generate(supplier).limit(quantity);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ParallelStreams&lt;/strong&gt; are a great way to span work onto multiple threads, when order of processing is not of a concern.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Optional&lt;/code&gt; is preferred over traditional null checking with &lt;code&gt;isPresent()&lt;/code&gt; which is more intuative. Since passing optionals around methods avoids presence of NULLs, there won&apos;t be any restlessness about NPE. Note, you still need to check &lt;code&gt;isPresent()&lt;/code&gt;, so it&apos;s not a total replacement to avoid checking, it just makes it error free. According to the documentation, Optional should be used as a return type. And that’s all. It&apos;s a neat solution for handling data that might be not present.&lt;/li&gt;
&lt;li&gt;Also, It can be flawlessly used in the stream chains, without worrying about Null. It can also be used to return alternate results with &lt;code&gt;orElse&lt;/code&gt; when the result set is empty.&lt;/li&gt;
&lt;li&gt;Stream, Optional and Functions are &lt;strong&gt;Contexts&lt;/strong&gt;. Contexts are like containers with a framework around (Execution around Pattern) and accepts a variable which it uses and executes logic around it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sorted()&lt;/code&gt; is a State-full operation, because unlike processing one-by-one, it needs to process all.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Conclusion&quot; style=&quot;position:relative;&quot;&gt;Conclusion&lt;a href=&quot;#Conclusion&quot; aria-label=&quot;Conclusion permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Computer time is lot less cheaper than programmer time. So code that looks clear is more effective than code that runs fast.&lt;/li&gt;
&lt;li&gt;FP may not be familiar among developers, who are used to code in a traditional OOPs way. But more readable may not always be more familiar. FP leads to more &lt;strong&gt;Declarative Programming&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Tit-Bits&quot; style=&quot;position:relative;&quot;&gt;Tit-Bits&lt;a href=&quot;#Tit-Bits&quot; aria-label=&quot;Tit Bits permalink&quot; class=&quot;anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;External Iteration&lt;/strong&gt;, is when you are in control of the iteration, like iterating using &lt;code&gt;for/while&lt;/code&gt; loop&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internal Iteration&lt;/strong&gt;, is when the Iterable is in control of the iteration. We just pass it the function saying what to do with those elements.&lt;/li&gt;
&lt;li&gt;Functions like &lt;code&gt;mapToDouble()&lt;/code&gt; can deal with primitives without wrapping, which is more efficient. (Explore more of such...)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Supplier&lt;/code&gt; can act as function object that can hold a function that can return a result.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>