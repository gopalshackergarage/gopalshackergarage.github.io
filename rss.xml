<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[The Hacker Garage]]></title><description><![CDATA[My Blog Book]]></description><link>https://github.com/gopalshackergarage/gopalshackergarage.github.io</link><generator>RSS for Node</generator><lastBuildDate>Mon, 29 Oct 2018 07:21:01 GMT</lastBuildDate><item><title><![CDATA[Pocket Design Patterns]]></title><description><![CDATA[<!-- TODO: Refine the blog posts, so they actually look like blog posts and not your scribbled notes -->

All the popular Design Patterns abridged for quick revision, along with some titbits :)
]]></description><link>https://github.com/gopalshackergarage/gopalshackergarage.github.io/2018-04-14-pocket-design-patterns/</link><guid isPermaLink="false">https://github.com/gopalshackergarage/gopalshackergarage.github.io/2018-04-14-pocket-design-patterns/</guid><pubDate>Sat, 14 Apr 2018 00:00:00 GMT</pubDate><content:encoded>&lt;!-- TODO: Refine the blog posts, so they actually look like blog posts and not your scribbled notes --&gt;
&lt;p&gt;All the popular Design Patterns abridged for quick revision, along with some titbits :)&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Creational Patterns&lt;/h2&gt;
&lt;h3&gt;Factory method Vs Abstract Factory&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Abstract factory has a level more depth of abstraction.&lt;/li&gt;
&lt;li&gt;Factory method abstracts creation of a family of objects.&lt;/li&gt;
&lt;li&gt;Abstract factory does the same, but inside, the product depends on an abstract factory which can be assigned any of the family of factories. &lt;/li&gt;
&lt;li&gt;This abstract factory is ‘composed’ (HAS-A) inside factory.&lt;/li&gt;
&lt;li&gt;Abstract Factory is one level higher in abstraction than Factory Method. Factory Method abstracts the way objects are created, while Abstract Factory abstracts the way factories are created which in turn abstracts the way objects are created.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Builder Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When the parameters involved in construction of an object are dynamic and inconsistent in terms of optional/required, passing null for optionals or having multiple constructors can get dirty.&lt;/li&gt;
&lt;li&gt;Instead, a ‘builder’ class, which HAS-A the object to build, can be made responsible of creation.&lt;/li&gt;
&lt;li&gt;This can be achieved by fluent methods inside builder class, which act like setter methods on the object to be created.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Behavioral Patterns&lt;/h2&gt;
&lt;h3&gt;Strategy Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;“Encapsulate what varies”, use HAS-A over IS-A.&lt;/li&gt;
&lt;li&gt;Behavior encapsulated into an object which is used HAS-A. This can be dynamically changed to change behavior of the object.&lt;/li&gt;
&lt;li&gt;This is called Runtime Sub-classing or Runtime Polymorphism.&lt;/li&gt;
&lt;li&gt;This is alternative to sub-classing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Observer pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Observer objects are registered in a HAS-A fashion.&lt;/li&gt;
&lt;li&gt;All observers implement same interface that contain the notify or callback method.&lt;/li&gt;
&lt;li&gt;This encourages loose coupling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Command Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Encapsulates request or command as an object.&lt;/li&gt;
&lt;li&gt;To decouple client from receiver Invocation, the request/command object is given to invoker, instead of directly invoking it on the receiver.&lt;/li&gt;
&lt;li&gt;It helps in Queueing, logging requests etc.&lt;/li&gt;
&lt;li&gt;Command object HAS-A receiver which calls methods on receiver. Client just has to call invoker.execute();&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Template Method Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It defines the skeleton of algorithm, deferring some steps to sub-classes to define or redefine, without changing algorithm structure.&lt;/li&gt;
&lt;li&gt;It can also contain methods called ‘Hooks’, to provide default implementation of a method common to all classes.&lt;/li&gt;
&lt;li&gt;In template, client can depend on higher abstract class. It has control over algorithm and calls to subclasses only when there is a need to implement a method.&lt;/li&gt;
&lt;li&gt;This is a great design tool for creating &lt;em&gt;Frameworks&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Iterator Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Provides a way to iterate through a aggregate collection of objects.&lt;/li&gt;
&lt;li&gt;The Iterator object consists of methods that takes care of looping through the collection.&lt;/li&gt;
&lt;li&gt;Underlying representation of collection (be it array or arrayList or HashMap) is hidden from client.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Composite Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It deals with 2 responsibilities: &lt;em&gt;Iterating&lt;/em&gt; and &lt;em&gt;Uniformity&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Allows objects to compose objects into tree structure to represent &lt;em&gt;Part-Whole&lt;/em&gt; hierarchies.&lt;/li&gt;
&lt;li&gt;It lets client treat both individual objects and composite objects the same way.&lt;/li&gt;
&lt;li&gt;SRP (Single Responsibility Principle) is violated for Transparency.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;State Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The behavior of an object depends on its state.&lt;/li&gt;
&lt;li&gt;State is controlled and switched using a HAS-A object.&lt;/li&gt;
&lt;li&gt;It smells like &lt;em&gt;Strategy Pattern&lt;/em&gt; but they differ in intent.&lt;/li&gt;
&lt;li&gt;Strategy pattern is an alternate for Sub-Classing while State pattern is an alternative to having if-else conditions everywhere and encapsulating behavior to state object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Structural Patterns&lt;/h2&gt;
&lt;h3&gt;Decorator Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;“Open-Closed” Principle. Open for extension and closed for change.&lt;/li&gt;
&lt;li&gt;This is used to achieve “Dynamic Inheritance”.&lt;/li&gt;
&lt;li&gt;A component is given to Decorator object as HAS-A and Decorator class adds extra functionality or responsibility to it.&lt;/li&gt;
&lt;li&gt;Both component and Decorator implement the same interface. So one decorator can be component to another decorator, thus behavior can be added in layers or wrappers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Adapter Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Converts one interface to another (Target), adaptable to client.&lt;/li&gt;
&lt;li&gt;It is done by implementing ‘Target’ interface and HAS-A Adoptee object. Now client calls methods on Adapter and it delegates appropriately to Adoptee.&lt;/li&gt;
&lt;li&gt;Decorator, Adapter and Facade patterns are close but differ in their intent.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bridge Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This is similar to Adapter pattern, except that it bridges between two hierachies of abstractions.&lt;/li&gt;
&lt;li&gt;It has two layers abstractions, one that holds the interface methods for client and the other abstraction is what actual implementations extend.&lt;/li&gt;
&lt;li&gt;Abstraction for client HAS-A implementor abstraction for delegation.&lt;/li&gt;
&lt;li&gt;This provides flexibility for both these hierarchies to independently change.&lt;/li&gt;
&lt;li&gt;This has downside of increasing complexity.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Facade Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It’s an unified interface, that a client can use with ease to control many other sub-systems.&lt;/li&gt;
&lt;li&gt;A facade HAS-A all other components of sub-systems references and makes use of them appropriately.&lt;/li&gt;
&lt;li&gt;If there are too many sub-systems for one Facade to handle, we can multiple layers of Facade.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Proxy Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It provides a surrogate or placeholder for another object to control access to it.&lt;/li&gt;
&lt;li&gt;The local stub has the same API as original object. Once client invokes any method on stub, it requests the state of original object and provides it to the client.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Decorator vs Adapter vs Facade&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Decorator: Adds responsibility without the change of interface.&lt;/li&gt;
&lt;li&gt;Adapter: Converts on interface to another.&lt;/li&gt;
&lt;li&gt;Facade: Simplify an interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;h3&gt;Principle of Least knowledge (or) Law of Delimiter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;One should make calls only to its immediate objects. Otherwise, it builds unnecessary dependencies between objects and makes the system fragile and complex to understand.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;station&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getThermometer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTemp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Wrong approach&lt;/span&gt;
station&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTemp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Right approach&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;But we can call methods on objects we pass or create in any local methods.&lt;/li&gt;
&lt;li&gt;However, this results in more ‘wrapper’ classes being written.&lt;/li&gt;
&lt;li&gt;The same is followed in Facade pattern, client only interacts with its immediate Facade object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Hollywood Principle&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Always higher level components should call lower-level ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;MVC Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;View and Controller together implement &lt;em&gt;Strategy Pattern&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;View depends on controller for user actions, so view behavior depends on Controller. Now, this controller can be easily replaced with another to change behavior.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Kung fu Lambda - Fun in Functional Programming with Java 8]]></title><description><![CDATA[<!-- TODO: Refine the blog posts, so they actually look like blog posts and not your scribbled notes -->
### FP vs OOP Simply:
- Whenever I write some code to deal with data about an entity then functional programming seems to work best.
- Whenever I write some code to simulate that entity then object-oriented programming seems to work best.
]]></description><link>https://github.com/gopalshackergarage/gopalshackergarage.github.io/2016-10-26-functional-programming-with-java-8/</link><guid isPermaLink="false">https://github.com/gopalshackergarage/gopalshackergarage.github.io/2016-10-26-functional-programming-with-java-8/</guid><pubDate>Wed, 26 Oct 2016 00:00:00 GMT</pubDate><content:encoded>&lt;!-- TODO: Refine the blog posts, so they actually look like blog posts and not your scribbled notes --&gt;
&lt;h3&gt;FP vs OOP Simply:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Whenever I write some code to deal with data about an entity then functional programming seems to work best.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Whenever I write some code to simulate that entity then object-oriented programming seems to work best.&lt;/p&gt;
&lt;!--more--&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, if we have to design a system that deals with &lt;strong&gt;People&lt;/strong&gt;, we use OOP to design a &lt;strong&gt;Person&lt;/strong&gt; class, which holds the state and behavior of a person. But let us say, we need to perform an operation to calculate age of every person based on their DOB, OOP tells us to keep that as a function inside &lt;strong&gt;Person&lt;/strong&gt; class. But if you as FP, it looks at it like a mathematical data-driven operation. It suggests you to prepare a function independent of a person class, which can be called with DOB as input, and we get age as output. We can &lt;strong&gt;Evaluate&lt;/strong&gt; ages of all people by passing them through this function.&lt;/p&gt;
&lt;h3&gt;Only Java 8?&lt;/h3&gt;
&lt;p&gt;Functional Programming is just a different way of thinking about structuring your code. Java 8, just provides new toys to make it more handy. That said, functional programming can be implemented even in Java 6, using anonymous inner classes in-place of lambdas.&lt;/p&gt;
&lt;h3&gt;Why Functional Programming?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FP is handy over OOP when the core essence of objects are functions. In such scenario, design can be changed from OOP to FP, by passing the core function as an argument to constructor and use it for evaluation. This smells &lt;strong&gt;Strategy Pattern&lt;/strong&gt;. Before Java 8, we had to use anonymous inner classes to achieve the same.&lt;/li&gt;
&lt;li&gt;Functions can be treated as values, and they can be assigned to variables. These are called &lt;strong&gt;First Class Functions&lt;/strong&gt; and this type of programming is called &lt;strong&gt;Higher Order Programming&lt;/strong&gt;. Function&amp;#x3C;&gt;, Consumer&amp;#x3C;&gt; etc can be used as variable types to which either lambdas or anonymous inner classes be assigned as values.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; Function&lt;span class=&quot;token generics function&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;String&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; lastWord &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String phrase&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
     Arrays&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;phrase&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;other&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; last&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; last&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;orElse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Functional Interfaces, with only one abstract function, can be represented with Lambdas, () -&gt; {}&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data-in Data-out (DIDO) Functions&lt;/strong&gt;, are those that return the same value for a given set of inputs. This is called &lt;strong&gt;Referential Transparency&lt;/strong&gt;. Also know as &lt;strong&gt;Pure Functions&lt;/strong&gt; or functions with &lt;strong&gt;No Side Effects&lt;/strong&gt;. These kind of functions form the core of a Functional program.&lt;/li&gt;
&lt;li&gt;FP also encourages &lt;strong&gt;Immutability&lt;/strong&gt; for the same reason, to avoid any side effects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Thinking in FP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In the code below, the function receives lambda as an argument. Since this is a type of Functional Interface, the lambda holds the implementation of single abstract method, in this case &lt;code class=&quot;language-text&quot;&gt;apply()&lt;/code&gt; (‘apply’ is the notation used for single abstract method in functional interface when its purpose can be anything).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FunctionOf3&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; FunctionOverTime &lt;span class=&quot;token function&quot;&gt;combinationOf3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;FunctionOverTime a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; FunctionOverTime b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; FunctionOverTime c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; FunctionOf3 combination&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; combination&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;valueAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;valueAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;valueAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Think of lambdas as Maths formulas. So you can essentially pass the values along with their formula to the function, and function uses the formula passed to evaluate like above. This way we can abstract the formula and the values passed.&lt;/li&gt;
&lt;li&gt;Like Encapsulation in OOP, FP’s mantra is &lt;strong&gt;Isolation&lt;/strong&gt;, that is running functions without any knowledge of the outside world.&lt;/li&gt;
&lt;li&gt;In FP thinking, &lt;strong&gt;Evaluation over Execution&lt;/strong&gt; is preferred. Evaluation is mostly constructed with DIDO (Data-in Data-out) functions, which take data in, process and return an output, without causing side effects. This should form the Core of the application. This is wrapped up with Execution elements like UI, DB, File IO etc. Functional part should only focus on evaluation and computing output from input.&lt;/li&gt;
&lt;li&gt;Make functions generic whenever possible.&lt;/li&gt;
&lt;li&gt;Java 8 recognizes and treats static functions, that don’t need instance instantiation, as constants. This way it doesn’t have to create instance every time the method is called.&lt;/li&gt;
&lt;li&gt;When looping through a list and implementing multiple operations on it, the code inside the loop clubs logic for all those operations. Instead it would be clean if we can separate those operations into different functions, which leads to &lt;strong&gt;Separation of Concerns&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In non-java8 environments, when using anonymous classes in-place of lambdas, try putting them outside as static constants of Function type or equivalent, and pass into Stream operations.&lt;/li&gt;
&lt;li&gt;To perform multiple operations on same list of elements, link them like &lt;strong&gt;Pipeline&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Streams&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;List elements are passed one after the other and one at a time, through all the stream operations.&lt;/li&gt;
&lt;li&gt;None of the stream operations gets triggered, until a Terminal operation (Like reduce), is called. This is &lt;strong&gt;Lazy Processing&lt;/strong&gt;. It’s like the terminal operation is a trigger and puller of data from the stream, processed through all operations. It pulls one-by-one till the list is all covered.&lt;/li&gt;
&lt;li&gt;Lazy processing is efficient and moreover it does things with Separation of Concerns.&lt;/li&gt;
&lt;li&gt;Short-Circuiting terminal operations like &lt;code class=&quot;language-text&quot;&gt;anyMatch()&lt;/code&gt; process the stream only as much as required to return the desired result.&lt;/li&gt;
&lt;li&gt;Once the terminal operation is executed, the stream is dead, and throws an exception when reused (Unlike Iterator which would just return empty). To Reuse as Stream, declare it as type &lt;code class=&quot;language-text&quot;&gt;Supplier&amp;lt;Stream&amp;gt;&lt;/code&gt; and use its &lt;code class=&quot;language-text&quot;&gt;get()&lt;/code&gt; method to get new instance of stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;Supplier&lt;span class=&quot;token generics function&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;DoubleStream&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; totalStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saleStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mapToDouble&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Sale&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;total&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; bigSaleDay &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; totalStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;anyMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;total &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; total &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100.00&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Intermediate operations when called on a stream returns a stream.&lt;/li&gt;
&lt;li&gt;Use &lt;code class=&quot;language-text&quot;&gt;flatMap()&lt;/code&gt; to flatten a collection of stream before operating on it and outputs a concatination of all those streams.&lt;/li&gt;
&lt;li&gt;In the code below, assume &lt;code class=&quot;language-text&quot;&gt;saleStream()&lt;/code&gt; produces a stream of sales and every sale has a list of items. &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt; returns a Stream of Streams, while &lt;code class=&quot;language-text&quot;&gt;flatMap&lt;/code&gt; flattens all those streams and concatinates them into a single stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;Stream&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Stream&lt;span class=&quot;token generics function&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Item&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; itemStream1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saleStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sale &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; sale&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Stream&lt;span class=&quot;token generics function&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Item&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; itemStream2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saleStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sale &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; sale&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;collect()&lt;/code&gt; to collect the out-coming stream to a desired data structure like List. It also has interesting functions like &lt;code class=&quot;language-text&quot;&gt;groupBy&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;groupByConcurrent&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;summarizingDoubles&lt;/code&gt; etc. This is called &lt;strong&gt;fold&lt;/strong&gt; in FP terms, which summarizes bunch of values into one.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Stream.generate(supplier)&lt;/code&gt; can generate an infinite stream of objects, but it needs to be used along with a Short-Circuiting operator like &lt;code class=&quot;language-text&quot;&gt;limit()&lt;/code&gt;. The below code generates sale objects supplied by the &lt;code class=&quot;language-text&quot;&gt;Supplier&lt;/code&gt;, limited by the quantity passed.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; Supplier&lt;span class=&quot;token generics function&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Sale&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; supplier &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Sale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;supplier&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quantity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ParallelStreams&lt;/strong&gt; are a great way to span work onto multiple threads, when order of processing is not of a concern.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Optional&lt;/code&gt; is preferred over traditional null checking with &lt;code class=&quot;language-text&quot;&gt;isPresent()&lt;/code&gt; which is more intuative. Since passing optionals around methods avoids presence of NULLs, there won’t be any restlessness about NPE. Note, you still need to check &lt;code class=&quot;language-text&quot;&gt;isPresent()&lt;/code&gt;, so it’s not a total replacement to avoid checking, it just makes it error free. According to the documentation, Optional should be used as a return type. And that’s all. It’s a neat solution for handling data that might be not present.&lt;/li&gt;
&lt;li&gt;Also, It can be flawlessly used in the stream chains, without worrying about Null. It can also be used to return alternate results with &lt;code class=&quot;language-text&quot;&gt;orElse&lt;/code&gt; when the result set is empty.&lt;/li&gt;
&lt;li&gt;Stream, Optional and Functions are &lt;strong&gt;Contexts&lt;/strong&gt;. Contexts are like containers with a framework around (Execution around Pattern) and accepts a variable which it uses and executes logic around it.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;sorted()&lt;/code&gt; is a State-full operation, because unlike processing one-by-one, it needs to process all.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Computer time is lot less cheaper than programmer time. So code that looks clear is more effective than code that runs fast.&lt;/li&gt;
&lt;li&gt;FP may not be familiar among developers, who are used to code in a traditional OOPs way. But more readable may not always be more familiar. FP leads to more &lt;strong&gt;Declarative Programming&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tit-Bits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Monad&lt;/strong&gt;, is so popular in FP world. Think of monads as a context object that wraps a value and allows us to apply a set of transformations on that value. Stream and Optional are Monads, when they are used as &lt;code class=&quot;language-text&quot;&gt;Stream.of()&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Optional.of()&lt;/code&gt; as constructors and &lt;code class=&quot;language-text&quot;&gt;map()&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;flatMap()&lt;/code&gt; as binding functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;Optional&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addOne&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addTwo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Optional&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addThree&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;External Iteration&lt;/strong&gt;, is when you are in control of the iteration, like iterating using &lt;code class=&quot;language-text&quot;&gt;for/while&lt;/code&gt; loop&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internal Iteration&lt;/strong&gt;, is when the Iterable is in control of the iteration. We just pass it the function saying what to do with those elements.&lt;/li&gt;
&lt;li&gt;Functions like &lt;code class=&quot;language-text&quot;&gt;mapToDouble()&lt;/code&gt; can deal with primitives without wrapping, which is more efficient. (Explore more of such…)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Supplier&lt;/code&gt; can act as function object that can hold a function that can return a result.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>