<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[The Hacker Garage]]></title><description><![CDATA[So excited about this Craft that, I can't keep myself from blogging about it.]]></description><link>https://github.com/gopalshackergarage/gopalshackergarage.github.io</link><generator>RSS for Node</generator><lastBuildDate>Sun, 09 Dec 2018 09:15:06 GMT</lastBuildDate><item><title><![CDATA[Monads for Drunken Coders, Pint-1üç∫]]></title><description><![CDATA[A chilled explanation of the Dreaded Monad]]></description><link>https://github.com/gopalshackergarage/gopalshackergarage.github.io/posts/monads-for-drunken-coders-pint-1/</link><guid isPermaLink="false">https://github.com/gopalshackergarage/gopalshackergarage.github.io/posts/monads-for-drunken-coders-pint-1/</guid><pubDate>Sun, 09 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Story of an Egg validator&lt;/h2&gt;
&lt;img class=&quot;post-gif&quot; src=&quot;https://media.giphy.com/media/4QXVm8706KgkU/giphy.gif&quot;&gt;
&lt;h3&gt;Sol 1: One egg - One validation&lt;/h3&gt;
&lt;p&gt;Life is so simple. Pass that one egg through that one validator. Results in good or bad.&lt;/p&gt;
&lt;h3&gt;Sol 23: Many eggs - One validation&lt;/h3&gt;
&lt;p&gt;Not difficult at all, simply pass them through validator, one after the other and collect the results for each one, in order. With simple if-else condition, this code looks like a Cute Sprout! üå±&lt;/p&gt;
&lt;h3&gt;Sol 97: Many eggs - Many validations&lt;/h3&gt;
&lt;p&gt;Why do I sense climate‚Äôs getting a bit hotter. Ok, still no problem, I know Java 8. Let me write a pipe of filter functions. Each of them just pass the good ones ahead and discard bad ones.&lt;/p&gt;
&lt;p&gt;&lt;div id=&quot;gist93453042&quot; class=&quot;gist&quot;&gt;
    &lt;div class=&quot;gist-file&quot;&gt;
      &lt;div class=&quot;gist-data&quot;&gt;
        &lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
  &lt;div id=&quot;file-firstfunctionalcode-java&quot; class=&quot;file&quot;&gt;
    

  &lt;div itemprop=&quot;text&quot; class=&quot;blob-wrapper data type-java &quot;&gt;
      


&lt;table class=&quot;highlight tab-size js-file-line-container&quot; data-tab-size=&quot;8&quot;&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-firstfunctionalcode-java-L1&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;1&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-firstfunctionalcode-java-LC1&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;eggs&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;stream()&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-firstfunctionalcode-java-L2&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-firstfunctionalcode-java-LC2&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    .filter(&lt;span class=&quot;pl-smi&quot;&gt;EggValidator&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;validator1)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-firstfunctionalcode-java-L3&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;3&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-firstfunctionalcode-java-LC3&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    .filter(&lt;span class=&quot;pl-smi&quot;&gt;EggValidator&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;validator2)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-firstfunctionalcode-java-L4&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;4&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-firstfunctionalcode-java-LC4&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    .filter(&lt;span class=&quot;pl-smi&quot;&gt;EggValidator&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;validator3)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-firstfunctionalcode-java-L5&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;5&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-firstfunctionalcode-java-LC5&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    &lt;span class=&quot;pl-c1&quot;&gt;....&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-firstfunctionalcode-java-L6&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;6&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-firstfunctionalcode-java-LC6&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    &lt;span class=&quot;pl-c1&quot;&gt;...&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-firstfunctionalcode-java-L7&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;7&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-firstfunctionalcode-java-LC7&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    &lt;span class=&quot;pl-c1&quot;&gt;..&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
&lt;/table&gt;


  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;
      &lt;div class=&quot;gist-meta&quot;&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/7777085ba07fb61268bc507dfa9e5df8/raw/6df3509a44fd789a4a7dd4c5c98cd0d3f5c79c51/FirstFunctionalCode.java&quot; style=&quot;float:right&quot;&gt;view raw&lt;/a&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/7777085ba07fb61268bc507dfa9e5df8#file-firstfunctionalcode-java&quot;&gt;FirstFunctionalCode.java&lt;/a&gt;
        hosted with &amp;#10084; by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Yay! I‚Äôm a Functional programmer! Let me have a üç∫&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;But what if at the end of validation pipeline, I need both good and bad eggs? Hmm, placing the üç∫ mug back on table. &lt;/li&gt;
&lt;li&gt;How can I make all of them pass through every validator and accumulate the results? &lt;/li&gt;
&lt;li&gt;Probably, ditch that FP, let me just use the all-friendly for-each loop to iterate through all the eggs, call validator on each egg, store bad eggs separately in a bucket as and when I find one. &lt;/li&gt;
&lt;li&gt;Bad! I couldn‚Äôt use those Streams and Lambdas. Anyways, they are just fancy syntactic-sugar. May be next time! Let me go ahead with this if-else ladder for now. Let me take a sip! üç∫&lt;/li&gt;
&lt;li&gt;Wait, what if I also need to know the reason why an egg is bad? &lt;/li&gt;
&lt;li&gt;Let me use a global badEggFailureBucketMap and put eggIndex to validation failure.&lt;/li&gt;
&lt;li&gt;But! how can I tightly map validation-failure-TO-failed-validation-method? Hmm‚Ä¶ it‚Äôs ok to not tightly map them, I just know which failure is-to what.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suddenly, the cute sprout turned into a treeüéã, with multiple if-else-break-continue branches of execution.&lt;/p&gt;
&lt;h3&gt;Sol 179: Many Types of eggs - Many validations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Seriously, how many validators should I write? One per every egg type? Repeat this entire algo for each and every type, just changing the parameter types!?&lt;/li&gt;
&lt;li&gt;Also, there can be some &lt;strong&gt;exceptional&lt;/strong&gt; eggs, that blow-off while going through the validator, how am I supposed to deal with all those exceptions?&lt;/li&gt;
&lt;li&gt;How am I gonna jenga new validations in the middle of this chaos!?&lt;/li&gt;
&lt;li&gt;By the way, notice, I kept mutating egg list while iterating, removing bad ones. It‚Äôs totally confusing to reason-out, how is the state changing. &lt;/li&gt;
&lt;li&gt;Now, don‚Äôt ask me to add inter-dependent validations. If they throw exceptions as well, the if-else-try-catch nest crosses all margins and overflows out of my screen.&lt;/li&gt;
&lt;li&gt;Again, don‚Äôt ask me to unit-test this shit!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sol 237: Many Types of eggs - Many more validations in parallel&lt;/h3&gt;
&lt;p&gt;I think, I‚Äôm too drunk. My head is spinning! ü§Ø&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This design pattern has a name and it‚Äôs called the ‚ÄúEvolution-of-a-Problem-Over-Time‚Äù.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The code ended-up like an Alien plant:&lt;/p&gt;
&lt;p&gt;&lt;div id=&quot;gist93453042&quot; class=&quot;gist&quot;&gt;
    &lt;div class=&quot;gist-file&quot;&gt;
      &lt;div class=&quot;gist-data&quot;&gt;
        &lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
  &lt;div id=&quot;file-eggvalidatorbad-java&quot; class=&quot;file&quot;&gt;
    

  &lt;div itemprop=&quot;text&quot; class=&quot;blob-wrapper data type-java &quot;&gt;
      


&lt;table class=&quot;highlight tab-size js-file-line-container&quot; data-tab-size=&quot;8&quot;&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L1&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;1&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC1&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;OmegaEggValidator&lt;/span&gt; {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L2&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC2&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ValidationResults&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;create&lt;/span&gt;() {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L3&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;3&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC3&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    &lt;span class=&quot;pl-k&quot;&gt;Map&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;ValidationFailure&lt;/span&gt;&amp;gt;&lt;/span&gt; badEggFailureBucketMap &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;HashMap&amp;lt;&amp;gt;&lt;/span&gt;();&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L4&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;4&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC4&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; eggIndex &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L5&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;5&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC5&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;Iterator&lt;/span&gt; iterator &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; eggList&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;iterator(); iterator&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;hasNext(); eggIndex&lt;span class=&quot;pl-k&quot;&gt;++&lt;/span&gt;) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L6&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;6&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC6&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      &lt;span class=&quot;pl-smi&quot;&gt;OmegaEgg&lt;/span&gt; eggTobeValidated &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; iterator&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;next();&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L7&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;7&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC7&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;isValid1(eggTobeValidated)) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L8&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;8&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC8&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        iterator&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;remove(); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Mutation&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L9&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;9&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC9&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; How do you cleanly map validation-failure to which validation-method failed?&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L10&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;10&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC10&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        badEggFailureBucketMap&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;put(eggIndex, &lt;span class=&quot;pl-c1&quot;&gt;VALIDATION_FAILURE_1&lt;/span&gt;);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L11&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;11&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC11&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        &lt;span class=&quot;pl-k&quot;&gt;continue&lt;/span&gt;;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L12&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;12&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC12&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L13&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;13&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC13&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L14&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;14&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC14&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;isValid2(eggTobeValidated)) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L15&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;15&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC15&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;          iterator&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;remove();&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L16&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;16&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC16&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;          badEggFailureBucketMap&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;put(eggIndex, &lt;span class=&quot;pl-c1&quot;&gt;VALIDATION_FAILURE_2&lt;/span&gt;);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L17&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;17&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC17&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L18&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;18&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC18&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      } &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;Exception&lt;/span&gt; e) { &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Repetition of same logic for exception handling&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L19&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;19&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC19&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        iterator&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;remove();&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L20&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;20&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC20&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        badEggFailureBucketMap&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;put(eggIndex, &lt;span class=&quot;pl-c1&quot;&gt;VALIDATION_FAILURE_WITH_EXCEPTION_2&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; e&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getMessage());&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L21&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;21&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC21&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L22&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;22&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC22&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; { &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Inter-dependent validations&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L23&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;23&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC23&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (isValid31(eggTobeValidated)) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L24&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;24&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC24&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;          &lt;span class=&quot;pl-smi&quot;&gt;Yellow&lt;/span&gt; yellowTobeValidated &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; extractYellow(eggTobeValidated);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L25&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;25&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC25&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;          &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (yellowTobeValidated &lt;span class=&quot;pl-k&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;) { &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Nested-if for null checking nested objects&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L26&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;26&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC26&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;            &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L27&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;27&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC27&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;              &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;isValid32(yellowTobeValidated)) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L28&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;28&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC28&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;                iterator&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;remove();&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L29&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;29&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC29&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;                badEggFailureBucketMap&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;put(eggIndex, &lt;span class=&quot;pl-c1&quot;&gt;VALIDATION_FAILURE_32&lt;/span&gt;);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L30&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;30&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC30&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;              }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L31&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;31&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC31&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;            } &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;Exception&lt;/span&gt; exceptionalOmegaEgg) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L32&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;32&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC32&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;              iterator&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;remove();&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L33&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;33&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC33&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;              badEggFailureBucketMap&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;put(eggIndex, &lt;span class=&quot;pl-c1&quot;&gt;VALIDATION_FAILURE_WITH_EXCEPTION_32&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; e&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getMessage());&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L34&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;34&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC34&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;            }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L35&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;35&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC35&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;          }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L36&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;36&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC36&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L37&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;37&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC37&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;          iterator&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;remove();&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L38&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;38&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC38&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;          badEggFailureBucketMap&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;put(eggIndex, &lt;span class=&quot;pl-c1&quot;&gt;VALIDATION_FAILURE_2&lt;/span&gt;);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L39&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;39&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC39&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L40&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;40&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC40&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      } &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;Exception&lt;/span&gt; e) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L41&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;41&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC41&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        iterator&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;remove();&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L42&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;42&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC42&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        badEggFailureBucketMap&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;put(eggIndex, &lt;span class=&quot;pl-c1&quot;&gt;VALIDATION_FAILURE_WITH_EXCEPTION&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; e&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getMessage());&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L43&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;43&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC43&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L44&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;44&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC44&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    } &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L45&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;45&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC45&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; This algorithm is tightly coupled with One-type &amp;#39;Omega&amp;#39;, &lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L46&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;46&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC46&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; We need to repeat the entire algo for another type.&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L47&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;47&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC47&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-L48&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;48&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-eggvalidatorbad-java-LC48&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;}&lt;/td&gt;
      &lt;/tr&gt;
&lt;/table&gt;


  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;
      &lt;div class=&quot;gist-meta&quot;&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/7777085ba07fb61268bc507dfa9e5df8/raw/6df3509a44fd789a4a7dd4c5c98cd0d3f5c79c51/EggValidatorBad.java&quot; style=&quot;float:right&quot;&gt;view raw&lt;/a&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/7777085ba07fb61268bc507dfa9e5df8#file-eggvalidatorbad-java&quot;&gt;EggValidatorBad.java&lt;/a&gt;
        hosted with &amp;#10084; by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;Imperative vs Functional Chatter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If a right Paradigm isn‚Äôt chosen, you literally have to stab and cut-open the Open-Closed principle every time you get a new requirement. &lt;/li&gt;
&lt;li&gt;Every Software architectural problem can be seen like a block of objects doing functions or functions doing (I mean, processing) objects. There you go! I just metaphored OOPs vs FP.&lt;/li&gt;
&lt;li&gt;Eggs aren‚Äôt doing anything here, they are being done. This clearly is a Functional programming problem. Eggs should not be juggled around validation functions, but validations should be &lt;em&gt;applied&lt;/em&gt; on eggs.&lt;/li&gt;
&lt;li&gt;In OOPs, we build classes with state and have functions exposed to operate on that state. How can you build a class which lets you provide functions dynamically at run time, to operate on its state. This is fundamental premises on which Functional style is built.&lt;/li&gt;
&lt;li&gt;Of-course, Functional thinking doesn‚Äôt solve all the problems, neither is Object oriented thinking. However, in this problem FP is not fighting with OOPs, but with &lt;strong&gt;Imperative Programming&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Our friend here is clearly suffering from trying to do too much of administration, dealing with the eggs.&lt;/li&gt;
&lt;li&gt;Like any other problem, this too has multiple sub-problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Problem.split()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;One master function which loops and calls all validation functions and passes around the results to other functions. That‚Äôs like doing all the &lt;strong&gt;Administrative-Orchestration-Imperatively&lt;/strong&gt; (That‚Äôs how you use 3 adjectives üòé). &lt;/li&gt;
&lt;li&gt;Validations should be &lt;strong&gt;Streamlined&lt;/strong&gt;, in a way that they can be plugged in and out of anywhere in between (like the bars in Jenga).&lt;/li&gt;
&lt;li&gt;The Streamline should let different types of data (The Good, the Bad and the Ugly), to co-exist as they flow. One bucket per type won‚Äôt scale, need an alternative to hold &lt;strong&gt;Heterogenous-Data&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It‚Äôs 2k18, please don‚Äôt use &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; to null check while Streaming&lt;/strong&gt;. Especially when you have nested objects, you end-up in an if-else hell. The code-flow should not be like a Trigonometric curve, but should be like a Linear equation.&lt;/li&gt;
&lt;li&gt;Mutation is sin, especially when you are mutating a global state. &lt;strong&gt;Immutability&lt;/strong&gt; should be enforced, while the data is streamed across multiple functions, or predicting who-changed-what can kill a lot of your time while debugging.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exceptions are Evil&lt;/strong&gt;, they are camouflaged gotos. Never throw them with your own hands and interrupt your stream and code flow.&lt;/li&gt;
&lt;li&gt;Finally, we need to find a way to compose our algorithm without worrying about the parameter type, basically abstract away the parameter type on which this algo is being run. &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;But rather than solving them one-by-one, it‚Äôs important to find a paradigm, which can solve these problems as a group. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Octopus Functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It‚Äôs been told since my Grandfather, that functions need to be small and do only one thing and do it well, nothing new.&lt;/li&gt;
&lt;li&gt;But there is one Octopus function administrating all these function calls, which in itself is a monster. State being pin-balled among imperative control statements, function calls and try-catches, is a horror show, when trying to reason-out the code flow or debug it.
&lt;img class=&quot;post-gif&quot; src=&quot;https://media.giphy.com/media/l0HlHJGHe3yAMhdQY/giphy.gif&quot;&gt;&lt;/li&gt;
&lt;li&gt;In our problem, it is even trying to handle the coupling between Validation method and Validation failure. That surely is not its responsibility. Validation method should be responsible to communicate that to the orchestrator.&lt;/li&gt;
&lt;li&gt;This simple function is just trying to append all last-words in List of Strings with &lt;code class=&quot;language-text&quot;&gt;&amp;amp;&lt;/code&gt;, with a lot of do-this-do-that imperative administration. It might be clear to the computer, but not very intuitive to another developer (or the same dev after sometime). &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div id=&quot;gist93453042&quot; class=&quot;gist&quot;&gt;
    &lt;div class=&quot;gist-file&quot;&gt;
      &lt;div class=&quot;gist-data&quot;&gt;
        &lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
  &lt;div id=&quot;file-imperativelastword-java&quot; class=&quot;file&quot;&gt;
    

  &lt;div itemprop=&quot;text&quot; class=&quot;blob-wrapper data type-java &quot;&gt;
      


&lt;table class=&quot;highlight tab-size js-file-line-container&quot; data-tab-size=&quot;8&quot;&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L1&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;1&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC1&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt; summarizeLastWords(&lt;span class=&quot;pl-k&quot;&gt;List&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;&amp;gt;&lt;/span&gt; descriptions) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L2&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC2&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-smi&quot;&gt;StringBuffer&lt;/span&gt; output &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;StringBuffer&lt;/span&gt;();&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L3&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;3&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC3&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;boolean&lt;/span&gt; isFirst &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L4&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;4&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC4&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt; d&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; descriptions) { &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; External Iteration&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L5&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;5&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC5&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;d&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;isEmpty()) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L6&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;6&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC6&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;isFirst) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L7&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;7&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC7&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        output&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;append(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt; &amp;amp; &lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L8&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;8&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC8&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L9&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;9&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC9&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      &lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt; lastWord &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; lastWord(d);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L10&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;10&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC10&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      output&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;append(lastWord);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L11&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;11&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC11&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      isFirst &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L12&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;12&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC12&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L13&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;13&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC13&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L14&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;14&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC14&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; output&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;toString();&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L15&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;15&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC15&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;}&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L16&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;16&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC16&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L17&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;17&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC17&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt; lastWord(&lt;span class=&quot;pl-k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt; d) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L18&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;18&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC18&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; lastSpaceIndex &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;lastIndexOf(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L19&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;19&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC19&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt; lastWord;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L20&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;20&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC20&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (lastSpaceIndex &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L21&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;21&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC21&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    lastWord &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; d;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L22&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;22&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC22&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L23&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;23&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC23&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    lastWord &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;substring(lastSpaceIndex &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, d&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;length());&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L24&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;24&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC24&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L25&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;25&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC25&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; lastWord;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-imperativelastword-java-L26&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;26&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-imperativelastword-java-LC26&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;}&lt;/td&gt;
      &lt;/tr&gt;
&lt;/table&gt;


  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;
      &lt;div class=&quot;gist-meta&quot;&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/7777085ba07fb61268bc507dfa9e5df8/raw/6df3509a44fd789a4a7dd4c5c98cd0d3f5c79c51/ImperativeLastWord.java&quot; style=&quot;float:right&quot;&gt;view raw&lt;/a&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/7777085ba07fb61268bc507dfa9e5df8#file-imperativelastword-java&quot;&gt;ImperativeLastWord.java&lt;/a&gt;
        hosted with &amp;#10084; by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Imagine how complicated it becomes, if we require more conditions and exception handling.&lt;/li&gt;
&lt;li&gt;In the age of Java 8, I can say this developer is trying too hard, using low-level stuff like dry if-else and for-each.&lt;/li&gt;
&lt;li&gt;He is taking too much of control over iterating and filtering stuff, and as Uncle Ben says, &lt;strong&gt;With great Power comes great Responsibility&lt;/strong&gt;.
&lt;img class=&quot;post-gif&quot; src=&quot;https://media.giphy.com/media/10KIsXhwdoerHW/giphy.gif&quot;&gt;&lt;/li&gt;
&lt;li&gt;You sure don‚Äôt have to take this responsibility. Pass that to the Collections library itself, they know how to iterate and filter and much more. Just pass them the &lt;strong&gt;Criteria&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If you get too serious into functional programming, you shall think twice every-time before writing any for-loop or if-else condition. (But don‚Äôt take it too serious üòâ, for-loops are good for small iterations).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Behead the Octopus, Lego the Focussed Functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;State should always march &lt;strong&gt;Unidirectional&lt;/strong&gt;, like an unstoppable army of zombies.
&lt;img class=&quot;post-gif&quot; src=&quot;https://media.giphy.com/media/V3zHRAZGp7Qo8/giphy.gif&quot;&gt;&lt;/li&gt;
&lt;li&gt;I ain‚Äôt copying this from the Flux guys at Facebook. This is seen ever since there are pipes in Unix, since 1978.&lt;/li&gt;
&lt;li&gt;Simply, make the shit of a function be the food for another.&lt;/li&gt;
&lt;li&gt;To do that, above Imperative Program can be transformed into &lt;strong&gt;Declarative Style&lt;/strong&gt; like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div id=&quot;gist93453042&quot; class=&quot;gist&quot;&gt;
    &lt;div class=&quot;gist-file&quot;&gt;
      &lt;div class=&quot;gist-data&quot;&gt;
        &lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
  &lt;div id=&quot;file-functionallastword-java&quot; class=&quot;file&quot;&gt;
    

  &lt;div itemprop=&quot;text&quot; class=&quot;blob-wrapper data type-java &quot;&gt;
      


&lt;table class=&quot;highlight tab-size js-file-line-container&quot; data-tab-size=&quot;8&quot;&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionallastword-java-L1&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;1&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionallastword-java-LC1&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt; summarize(&lt;span class=&quot;pl-k&quot;&gt;List&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;&amp;gt;&lt;/span&gt; descriptions) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionallastword-java-L2&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionallastword-java-LC2&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; descriptions&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;stream() &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Internal Iteration&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionallastword-java-L3&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;3&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionallastword-java-LC3&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    .filter(s &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;s&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;isEmpty())&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionallastword-java-L4&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;4&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionallastword-java-LC4&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    .map(lastWord) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; More on this later&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionallastword-java-L5&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;5&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionallastword-java-LC5&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    .collect(&lt;span class=&quot;pl-smi&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;joining(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt; &amp;amp; &lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;));&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionallastword-java-L6&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;6&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionallastword-java-LC6&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;}&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionallastword-java-L7&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;7&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionallastword-java-LC7&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionallastword-java-L8&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;8&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionallastword-java-LC8&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; First-Class Function&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionallastword-java-L9&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;9&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionallastword-java-LC9&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Function&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;&amp;gt;&lt;/span&gt; lastWord &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionallastword-java-L10&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;10&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionallastword-java-LC10&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  phrase &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;stream(phrase&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;split(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;))&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionallastword-java-L11&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;11&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionallastword-java-LC11&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    .reduce((other, last) &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; last)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionallastword-java-L12&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;12&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionallastword-java-LC12&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    .orElse(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);&lt;/td&gt;
      &lt;/tr&gt;
&lt;/table&gt;


  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;
      &lt;div class=&quot;gist-meta&quot;&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/7777085ba07fb61268bc507dfa9e5df8/raw/6df3509a44fd789a4a7dd4c5c98cd0d3f5c79c51/FunctionalLastWord.java&quot; style=&quot;float:right&quot;&gt;view raw&lt;/a&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/7777085ba07fb61268bc507dfa9e5df8#file-functionallastword-java&quot;&gt;FunctionalLastWord.java&lt;/a&gt;
        hosted with &amp;#10084; by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This might not be familiar for many Java devs, but sure is more readable, even for someone unfamiliar with code, if feels like reading an English sentence. &lt;strong&gt;Familiarity is different from Readability&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Separation of Concerns&lt;/strong&gt; made it clear and concise, like an SQL Query.&lt;/li&gt;
&lt;li&gt;This way functions can be fitted into each other to create a smooth pipeline, aiding unidirectional flow of data. &lt;/li&gt;
&lt;li&gt;This is flexible to restructure, and it‚Äôs easy to hire and fire these criterion functions, without thinking too much.
&lt;img class=&quot;post-gif&quot; src=&quot;https://media.giphy.com/media/xUA7b0Klw8Wfor7FWo/giphy.gif&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Flow Heterogeneous data Fluently&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Streamlining of functions is easier said than done when dealing with Heterogeneous data.&lt;/li&gt;
&lt;li&gt;Unidirectional flow demands uniform data structure for the entire stream-per-step. A pipeline can have different types of stream, but how can a stream/collection have different data types?
&lt;img class=&quot;post-gif&quot; src=&quot;https://media.giphy.com/media/OeX0obPwKJ0OI/giphy.gif&quot;&gt;&lt;/li&gt;
&lt;li&gt;Flowing through a function, Data inside a stream/collection of one type can metamorphose into various life forms of all shapes and sizes as it comes out, may be due to invalidations or exceptions or some eggs hatch into chickens or dinosaurs or your database just gets struck by a lightning.&lt;/li&gt;
&lt;li&gt;The dichotomy of Data metamorphism with Stream Uniformity can be seen in our current problem. &lt;/li&gt;
&lt;li&gt;We have two categories of data, Good eggs and Bad eggs. But who needs bad eggs, what you really interested are, the Validation failures for bad eggs. &lt;/li&gt;
&lt;li&gt;So two categories here, demand two totally disparate data types (Good-eggs), (Validation-failures due to (invalidations) and (exceptions)) to co-exist, inside a stream, as they flow through the pipeline. Check-out cases in this pseudo code:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div id=&quot;gist93453042&quot; class=&quot;gist&quot;&gt;
    &lt;div class=&quot;gist-file&quot;&gt;
      &lt;div class=&quot;gist-data&quot;&gt;
        &lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
  &lt;div id=&quot;file-pseudovalidator-java&quot; class=&quot;file&quot;&gt;
    

  &lt;div itemprop=&quot;text&quot; class=&quot;blob-wrapper data type-java &quot;&gt;
      


&lt;table class=&quot;highlight tab-size js-file-line-container&quot; data-tab-size=&quot;8&quot;&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L1&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;1&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC1&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;Stream&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;Egg&lt;/span&gt;&amp;gt;&lt;/span&gt; validatedEggStream &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; eggs&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;stream()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;map(egg &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; validate(egg));&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L2&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC2&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L3&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;3&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC3&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;what&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;should&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; validate(&lt;span class=&quot;pl-smi&quot;&gt;Egg&lt;/span&gt; egg) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L4&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;4&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC4&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;boolean&lt;/span&gt; isValid &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L5&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;5&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC5&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;egg&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;isRotten()) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L6&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;6&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC6&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (egg&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getYellow() &lt;span class=&quot;pl-k&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L7&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;7&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC7&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L8&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;8&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC8&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        makeHalfBoiledOmelette(egg); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; My Fav&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L9&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;9&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC9&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        isValid &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L10&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;10&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC10&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      } &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;EggException&lt;/span&gt; e) { &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L11&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;11&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC11&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;How&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;to&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;exception&lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; case 1&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L12&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;12&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC12&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L13&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;13&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC13&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (egg&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getEggWhite() &lt;span class=&quot;pl-k&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L14&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;14&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC14&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      eggWhiteDefect &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; examineEggWhite(egg); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; case 2&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L15&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;15&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC15&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      isValid &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (eggWhiteDefect &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L16&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;16&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC16&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L17&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;17&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC17&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;      &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;not&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;an&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;egg&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; case 3&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L18&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;18&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC18&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L19&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;19&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC19&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L20&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;20&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC20&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; isValid &lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt; egg &lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;How&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;to&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;defect&lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-pseudovalidator-java-L21&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;21&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-pseudovalidator-java-LC21&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;}&lt;/td&gt;
      &lt;/tr&gt;
&lt;/table&gt;


  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;
      &lt;div class=&quot;gist-meta&quot;&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/7777085ba07fb61268bc507dfa9e5df8/raw/6df3509a44fd789a4a7dd4c5c98cd0d3f5c79c51/PseudoValidator.java&quot; style=&quot;float:right&quot;&gt;view raw&lt;/a&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/7777085ba07fb61268bc507dfa9e5df8#file-pseudovalidator-java&quot;&gt;PseudoValidator.java&lt;/a&gt;
        hosted with &amp;#10084; by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This poor function is trying to validate, but is not sure how to communicate back to its caller with multiple possibilities. Unfortunately, Strongly-typed languages are strict about return type.&lt;/li&gt;
&lt;li&gt;Had it been a Dynamically-typed-language like Javascript, this is not a problem at all. This is one of the reasons why Dynamically typed languages got popular for. Of-course, that makes them very difficult to debug. It‚Äôs difficult to build even a proper IDE around them.&lt;/li&gt;
&lt;li&gt;The solution for this in a Strongly-typed-language like Java is &lt;strong&gt;Data Containerization&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Not those plain-old-java-wrappers, but &lt;strong&gt;Containers&lt;/strong&gt;. Ship your heterogeneous data inside these containers. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let‚Äôs take a fork here and visit the Monad-Land to understand Containerization.&lt;/p&gt;
&lt;h4&gt;Functors&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Ya, data container is too simple to be intimidating, and so they named them &lt;strong&gt;Functors&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;They are just simple objects that implement &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Functor contains a value &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt; of some type, and let you operate on that value by passing a first-class function &lt;code class=&quot;language-text&quot;&gt;f&lt;/code&gt; through &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt;, that returns you a new functor containing result value &lt;code class=&quot;language-text&quot;&gt;f(x)&lt;/code&gt;. (This is Functional English üòã).&lt;/li&gt;
&lt;li&gt;If that‚Äôs not clear, this code snippet should clarify it:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div id=&quot;gist93453042&quot; class=&quot;gist&quot;&gt;
    &lt;div class=&quot;gist-file&quot;&gt;
      &lt;div class=&quot;gist-data&quot;&gt;
        &lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
  &lt;div id=&quot;file-functor-java&quot; class=&quot;file&quot;&gt;
    

  &lt;div itemprop=&quot;text&quot; class=&quot;blob-wrapper data type-java &quot;&gt;
      


&lt;table class=&quot;highlight tab-size js-file-line-container&quot; data-tab-size=&quot;8&quot;&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functor-java-L1&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;1&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functor-java-LC1&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Functor&lt;/span&gt;&amp;lt;T&amp;gt; {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functor-java-L2&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functor-java-LC2&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;T&lt;/span&gt; value;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functor-java-L3&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;3&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functor-java-LC3&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Functor&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;value&lt;/span&gt;) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functor-java-L4&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;4&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functor-java-LC4&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; value;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functor-java-L5&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;5&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functor-java-LC5&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functor-java-L6&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;6&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functor-java-LC6&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;U&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Functor&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;U&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;Function&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;U&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;mapperFunction&lt;/span&gt;) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functor-java-L7&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;7&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functor-java-LC7&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Functor&amp;lt;&amp;gt;&lt;/span&gt;(mapperFunction&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;apply(value)); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Functor wrapping f(x)&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functor-java-L8&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;8&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functor-java-LC8&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functor-java-L9&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;9&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functor-java-LC9&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;}&lt;/td&gt;
      &lt;/tr&gt;
&lt;/table&gt;


  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;
      &lt;div class=&quot;gist-meta&quot;&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/7777085ba07fb61268bc507dfa9e5df8/raw/6df3509a44fd789a4a7dd4c5c98cd0d3f5c79c51/Functor.java&quot; style=&quot;float:right&quot;&gt;view raw&lt;/a&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/7777085ba07fb61268bc507dfa9e5df8#file-functor-java&quot;&gt;Functor.java&lt;/a&gt;
        hosted with &amp;#10084; by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;The Siblings - map(), flatMap()&lt;/h3&gt;
&lt;img class=&quot;post-gif&quot; src=&quot;https://media.giphy.com/media/MVgEZjevKLTzy/giphy.gif&quot;&gt;
&lt;ul&gt;
&lt;li&gt;Both &lt;code class=&quot;language-text&quot;&gt;map()&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;flatMap()&lt;/code&gt; are Higher-Order functions, which take first-class functions as parameters.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt; applies the mapper-function on wrapped value and returns a new Functor instance wrapping the result value. &lt;/li&gt;
&lt;li&gt;Say, if the return value of the mapper-function is a &lt;code class=&quot;language-text&quot;&gt;Functor&amp;lt;Type&amp;gt;&lt;/code&gt;, then the return value of &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt; ends up being &lt;code class=&quot;language-text&quot;&gt;Functor&amp;lt;Functor&amp;lt;Type&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;flatMap&lt;/code&gt; applies the mapper-function and simply returns its result without wrapping in another Functor.&lt;/li&gt;
&lt;li&gt;So, the difference is, if the return value of the mapper-function is a &lt;code class=&quot;language-text&quot;&gt;Functor&amp;lt;Type&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;flatMap&lt;/code&gt; returns a &lt;code class=&quot;language-text&quot;&gt;Functor&amp;lt;Type&amp;gt;&lt;/code&gt; itself.&lt;/li&gt;
&lt;li&gt;But why am I speaking about flatMap() ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;The Monad&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Finally! the Dawn of Monad (Introducing the title lead with a BGM)
&lt;img class=&quot;post-gif&quot; src=&quot;https://media.giphy.com/media/xU67CtAMi8f5K/giphy.gif&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The curse of the monad is that once you get the epiphany, once you understand - ‚Äúoh that‚Äôs what it is‚Äù - you lose the ability to explain it to anybody.
- Douglas Crockford&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Douglas is right in a way, but here is what my understanding (although not an epiphany), in its most simplistic form: &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Monads are Functors, which also implement &lt;code class=&quot;language-text&quot;&gt;flatmap&lt;/code&gt; and abide by some Monad laws.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Monad laws are simple math-rules, like the associativity, Left identity and Right identity. More on these later.&lt;/li&gt;
&lt;li&gt;Of-course, there is no such constraint that Monads should ONLY implement &lt;code class=&quot;language-text&quot;&gt;flatMap&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div id=&quot;gist93453042&quot; class=&quot;gist&quot;&gt;
    &lt;div class=&quot;gist-file&quot;&gt;
      &lt;div class=&quot;gist-data&quot;&gt;
        &lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
  &lt;div id=&quot;file-monad-java&quot; class=&quot;file&quot;&gt;
    

  &lt;div itemprop=&quot;text&quot; class=&quot;blob-wrapper data type-java &quot;&gt;
      


&lt;table class=&quot;highlight tab-size js-file-line-container&quot; data-tab-size=&quot;8&quot;&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-monad-java-L1&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;1&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-monad-java-LC1&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Monad&lt;/span&gt;&amp;lt;T&amp;gt; {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-monad-java-L2&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-monad-java-LC2&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;T&lt;/span&gt; value;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-monad-java-L3&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;3&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-monad-java-LC3&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Monad&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;value&lt;/span&gt;) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-monad-java-L4&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;4&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-monad-java-LC4&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; value;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-monad-java-L5&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;5&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-monad-java-LC5&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-monad-java-L6&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;6&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-monad-java-LC6&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;U&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Monad&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;U&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;Function&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;U&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;mapperFunction&lt;/span&gt;) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-monad-java-L7&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;7&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-monad-java-LC7&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Monad&amp;lt;&amp;gt;&lt;/span&gt;(mapping&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;apply(value));&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-monad-java-L8&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;8&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-monad-java-LC8&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-monad-java-L9&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;9&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-monad-java-LC9&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;U&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Monad&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;U&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;flatMap&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;Function&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;Monad&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;U&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;mapperFunction&lt;/span&gt;) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-monad-java-L10&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;10&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-monad-java-LC10&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; mapperFunction&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;apply(value);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-monad-java-L11&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;11&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-monad-java-LC11&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  }&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-monad-java-L12&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;12&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-monad-java-LC12&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;}&lt;/td&gt;
      &lt;/tr&gt;
&lt;/table&gt;


  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;
      &lt;div class=&quot;gist-meta&quot;&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/7777085ba07fb61268bc507dfa9e5df8/raw/6df3509a44fd789a4a7dd4c5c98cd0d3f5c79c51/Monad.java&quot; style=&quot;float:right&quot;&gt;view raw&lt;/a&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/7777085ba07fb61268bc507dfa9e5df8#file-monad-java&quot;&gt;Monad.java&lt;/a&gt;
        hosted with &amp;#10084; by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Monad‚Äôs anatomy needs 3 basic organs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Parameterized type: &lt;code class=&quot;language-text&quot;&gt;Monad&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A Unit function: &lt;code class=&quot;language-text&quot;&gt;new Monad()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A Binding function: &lt;code class=&quot;language-text&quot;&gt;Monad.flatMap()&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enough of Theory! how can this help the problem at hand?&lt;/p&gt;
&lt;h3&gt;Problems.split().stream()&lt;br/&gt;.map(problem -&gt; solve(problem))&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You would have got a hint by now. Monads are the data containers you need. The problem is solved by one container-type (which can be the unit for uniformity through-out the pipeline) and a variable-value-type contained inside (which can be morphed from type to type).&lt;/li&gt;
&lt;li&gt;Now every function can speak the same language, by passing around these Monad boxes and operate on them with functions, without worrying much about what it contains. Uniform boxes with Heterogenous data.&lt;/li&gt;
&lt;li&gt;Like, validation functions can ship either a goodEgg or a validation failure to the orchestration function, and it doesn‚Äôt even care what‚Äôs in the box. Now, Orchestrator only has one job to do, just pump the data inside the pipeline ahead.&lt;/li&gt;
&lt;li&gt;Plus, you just got something for free, &lt;strong&gt;Context Abstraction&lt;/strong&gt;. Notice, the algo depends on the Monad type and not the parameter type contained in it. Wow! an epiphany!!
&lt;img class=&quot;post-gif&quot; src=&quot;https://media.giphy.com/media/7nfYQYbqxOao8/giphy.gif&quot;&gt;&lt;/li&gt;
&lt;li&gt;Now, both the Parameter type and Algorithm are cleanly separate, and algo can be reused on multiple parameter types, which solves our last problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Post credits scene: Making of Monad&lt;/h3&gt;
&lt;p&gt;Now you see it? Now you don‚Äôt?
&lt;img class=&quot;post-gif&quot; src=&quot;https://media.giphy.com/media/6fadYfd0J6WrK/giphy.gif&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chances are you already worked with lot of Monads, if you started adapting Java 8.&lt;/li&gt;
&lt;li&gt;Java guys took 3 years between Java 7 and 8 and packed Java 8 with bunch of functional toys, and alongside came some Monads like Optional, Stream etc.,.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wanna see how the entire pipeline works seamlessly with the Monad, even with some exceptional eggs blown in-between?
The sequel brings-in some new names like Immutability, Parallelism, Memoization and X-Men evolution (Just kidding!)&lt;/p&gt;
&lt;p&gt;Let‚Äôs cook a Monad.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Functional Terminology]]></title><description><![CDATA[Speak Functional language fluently]]></description><link>https://github.com/gopalshackergarage/gopalshackergarage.github.io/posts/functional-terminology/</link><guid isPermaLink="false">https://github.com/gopalshackergarage/gopalshackergarage.github.io/posts/functional-terminology/</guid><pubDate>Fri, 07 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Pure Functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;These return a value based on what is passed in to the function.&lt;/li&gt;
&lt;li&gt;For instance, if we pass x into a function as input we will get F of x out as output. &lt;/li&gt;
&lt;li&gt;Another property of a pure function is that it will always return the same result for the same passed in value. &lt;/li&gt;
&lt;li&gt;If we pass input x into the function again, we should get back the exact same value, F of x. You should be able to do this an infinite amount of times and always get back the same output for a specific input. In addition, pure functions do not modify values outside of its scope. They are independent from any state in the system.&lt;/li&gt;
&lt;li&gt;They never mutate data and they do not produce side effects. Generally, they can also easily be reused.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;First-Class Functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;First of all, a programming language must support first-class functions to support the functional programming paradigm.&lt;/li&gt;
&lt;li&gt;First-class functions can be stored as a variable, they can be passed as an argument, and also they can be returned as the result of a function call.&lt;/li&gt;
&lt;li&gt;In addition, a first-class function can also be bound to a variable name, as well as stored in a data structure. Basically, you can generally do anything with a first-class function that you would be able to do with a variable or object. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Higher-order Functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;These are functions that can operate on other functions. They can take in a function as input, or even return one as output.&lt;/li&gt;
&lt;li&gt;First-class functions are useless without higher-order functions to pass them into or return them from.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Anonymous Functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The roots of anonymous functions lie heavily in lambda calculus.&lt;/li&gt;
&lt;li&gt;An anonymous function allows us to define ad hoc logic as we need, without needing to declare a formal named function. &lt;/li&gt;
&lt;li&gt;They are nameless and they can also serve as an argument to another function. &lt;/li&gt;
&lt;li&gt;Also, they can be assigned to a variable. They are basically a nameless first-class function.&lt;/li&gt;
&lt;li&gt;Anonymous functions can be passed into or returned from a higher-order function. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Clousures&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Closures are lexically scoped name binding in languages with first-class functions. Closures give us function portability. Closures are what allow us to pass around and store functions. &lt;/li&gt;
&lt;li&gt;A closure is defined as a &lt;strong&gt;persistent local variable scope&lt;/strong&gt; which holds on to local variables after the code execution has moved out of that block.&lt;/li&gt;
&lt;li&gt;Captured variables can be accessed through the closure‚Äôs copies of variable values or references when the function is invoked outside of their scope. A closure, which is the scope of a function, is kept alive by a reference to that function. Variables which were in scope when that function was defined will still be in scope when we call it later in a different context.&lt;/li&gt;
&lt;li&gt;A closure can also be thought of as a record storing a function together with a environment. One final way of defining a closure is as a mapping associating each variable of the function with the value or reference to which the name was bound when the closure was created. Next up, let‚Äôs go over functional composition.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Some-more&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Monad&lt;/strong&gt;, Think of monads as a context object that wraps a value and allows us to apply a set of transformations on that value and get it back out with all the transformations applied. &lt;/li&gt;
&lt;li&gt;Stream and Optional are Monads, when they are used as &lt;code class=&quot;language-text&quot;&gt;Stream.of()&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Optional.of()&lt;/code&gt; as constructors and &lt;code class=&quot;language-text&quot;&gt;map()&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;flatMap()&lt;/code&gt; as binding functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;Optional&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addOne&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addTwo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Optional&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addThree&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;collect()&lt;/code&gt; method is called &lt;strong&gt;fold&lt;/strong&gt; in FP terms, which summarizes bunch of values into one.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Pocket Design Patterns]]></title><description><![CDATA[All the popular Design Patterns abridged for quick revision, along with some tidbits.]]></description><link>https://github.com/gopalshackergarage/gopalshackergarage.github.io/posts/pocket-design-patterns/</link><guid isPermaLink="false">https://github.com/gopalshackergarage/gopalshackergarage.github.io/posts/pocket-design-patterns/</guid><pubDate>Sat, 14 Apr 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;All the popular Design Patterns abridged for quick revision, along with some tidbits.&lt;/p&gt;
&lt;h2&gt;Creational Patterns&lt;/h2&gt;
&lt;h3&gt;Factory method Vs Abstract Factory&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Abstract factory has a level more depth of abstraction.&lt;/li&gt;
&lt;li&gt;Factory method abstracts creation of a family of objects.&lt;/li&gt;
&lt;li&gt;Abstract factory does the same, but inside, the product depends on an abstract factory which can be assigned any of the family of factories. &lt;/li&gt;
&lt;li&gt;This abstract factory is ‚Äòcomposed‚Äô (HAS-A) inside factory.&lt;/li&gt;
&lt;li&gt;Abstract Factory is one level higher in abstraction than Factory Method. Factory Method abstracts the way objects are created, while Abstract Factory abstracts the way factories are created which in turn abstracts the way objects are created.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Builder Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When the parameters involved in construction of an object are dynamic and inconsistent in terms of optional/required, passing null for optionals or having multiple constructors can get dirty.&lt;/li&gt;
&lt;li&gt;Instead, a ‚Äòbuilder‚Äô class, which HAS-A the object to build, can be made responsible of creation.&lt;/li&gt;
&lt;li&gt;This can be achieved by fluent methods inside builder class, which act like setter methods on the object to be created.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Behavioral Patterns&lt;/h2&gt;
&lt;h3&gt;Strategy Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;‚ÄúEncapsulate what varies‚Äù, use HAS-A over IS-A.&lt;/li&gt;
&lt;li&gt;Behavior encapsulated into an object which is used HAS-A. This can be dynamically changed to change behavior of the object.&lt;/li&gt;
&lt;li&gt;This is called Runtime Sub-classing or Runtime Polymorphism.&lt;/li&gt;
&lt;li&gt;This is alternative to sub-classing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Observer pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Observer objects are registered in a HAS-A fashion.&lt;/li&gt;
&lt;li&gt;All observers implement same interface that contain the notify or callback method.&lt;/li&gt;
&lt;li&gt;This encourages loose coupling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Command Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Encapsulates request or command as an object.&lt;/li&gt;
&lt;li&gt;To decouple client from receiver Invocation, the request/command object is given to invoker, instead of directly invoking it on the receiver.&lt;/li&gt;
&lt;li&gt;It helps in Queueing, logging requests etc.&lt;/li&gt;
&lt;li&gt;Command object HAS-A receiver which calls methods on receiver. Client just has to call invoker.execute();&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Template Method Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It defines the skeleton of algorithm, deferring some steps to sub-classes to define or redefine, without changing algorithm structure.&lt;/li&gt;
&lt;li&gt;It can also contain methods called ‚ÄòHooks‚Äô, to provide default implementation of a method common to all classes.&lt;/li&gt;
&lt;li&gt;In template, client can depend on higher abstract class. It has control over algorithm and calls to subclasses only when there is a need to implement a method.&lt;/li&gt;
&lt;li&gt;This is a great design tool for creating &lt;em&gt;Frameworks&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Iterator Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Provides a way to iterate through a aggregate collection of objects.&lt;/li&gt;
&lt;li&gt;The Iterator object consists of methods that takes care of looping through the collection.&lt;/li&gt;
&lt;li&gt;Underlying representation of collection (be it array or arrayList or HashMap) is hidden from client.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Composite Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It deals with 2 responsibilities: &lt;em&gt;Iterating&lt;/em&gt; and &lt;em&gt;Uniformity&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Allows objects to compose objects into tree structure to represent &lt;em&gt;Part-Whole&lt;/em&gt; hierarchies.&lt;/li&gt;
&lt;li&gt;It lets client treat both individual objects and composite objects the same way.&lt;/li&gt;
&lt;li&gt;SRP (Single Responsibility Principle) is violated for Transparency.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;State Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The behavior of an object depends on its state.&lt;/li&gt;
&lt;li&gt;State is controlled and switched using a HAS-A object.&lt;/li&gt;
&lt;li&gt;It smells like &lt;em&gt;Strategy Pattern&lt;/em&gt; but they differ in intent.&lt;/li&gt;
&lt;li&gt;Strategy pattern is an alternate for Sub-Classing while State pattern is an alternative to having if-else conditions everywhere and encapsulating behavior to state object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Structural Patterns&lt;/h2&gt;
&lt;h3&gt;Decorator Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;‚ÄúOpen-Closed‚Äù Principle. Open for extension and closed for change.&lt;/li&gt;
&lt;li&gt;This is used to achieve ‚ÄúDynamic Inheritance‚Äù.&lt;/li&gt;
&lt;li&gt;A component is given to Decorator object as HAS-A and Decorator class adds extra functionality or responsibility to it.&lt;/li&gt;
&lt;li&gt;Both component and Decorator implement the same interface. So one decorator can be component to another decorator, thus behavior can be added in layers or wrappers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Adapter Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Converts one interface to another (Target), adaptable to client.&lt;/li&gt;
&lt;li&gt;It is done by implementing ‚ÄòTarget‚Äô interface and HAS-A Adoptee object. Now client calls methods on Adapter and it delegates appropriately to Adoptee.&lt;/li&gt;
&lt;li&gt;Decorator, Adapter and Facade patterns are close but differ in their intent.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bridge Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This is similar to Adapter pattern, except that it bridges between two hierachies of abstractions.&lt;/li&gt;
&lt;li&gt;It has two layers abstractions, one that holds the interface methods for client and the other abstraction is what actual implementations extend.&lt;/li&gt;
&lt;li&gt;Abstraction for client HAS-A implementor abstraction for delegation.&lt;/li&gt;
&lt;li&gt;This provides flexibility for both these hierarchies to independently change.&lt;/li&gt;
&lt;li&gt;This has downside of increasing complexity.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Facade Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It‚Äôs an unified interface, that a client can use with ease to control many other sub-systems.&lt;/li&gt;
&lt;li&gt;A facade HAS-A all other components of sub-systems references and makes use of them appropriately.&lt;/li&gt;
&lt;li&gt;If there are too many sub-systems for one Facade to handle, we can multiple layers of Facade.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Proxy Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It provides a surrogate or placeholder for another object to control access to it.&lt;/li&gt;
&lt;li&gt;The local stub has the same API as original object. Once client invokes any method on stub, it requests the state of original object and provides it to the client.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Decorator vs Adapter vs Facade&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Decorator: Adds responsibility without the change of interface.&lt;/li&gt;
&lt;li&gt;Adapter: Converts on interface to another.&lt;/li&gt;
&lt;li&gt;Facade: Simplify an interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;h3&gt;Principle of Least knowledge (or) Law of Delimiter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;One should make calls only to its immediate objects. Otherwise, it builds unnecessary dependencies between objects and makes the system fragile and complex to understand.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;station&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getThermometer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTemp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Wrong approach&lt;/span&gt;
station&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTemp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Right approach&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;But we can call methods on objects we pass or create in any local methods.&lt;/li&gt;
&lt;li&gt;However, this results in more ‚Äòwrapper‚Äô classes being written.&lt;/li&gt;
&lt;li&gt;The same is followed in Facade pattern, client only interacts with its immediate Facade object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Hollywood Principle&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Always higher level components should call lower-level ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;MVC Pattern&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;View and Controller together implement &lt;em&gt;Strategy Pattern&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;View depends on controller for user actions, so view behavior depends on Controller. Now, this controller can be easily replaced with another to change behavior.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Kung fu Lambda ∆õ]]></title><description><![CDATA[Fun in Functional Programming with Java 8 and how it is competing with younger functional languages.]]></description><link>https://github.com/gopalshackergarage/gopalshackergarage.github.io/posts/functional-programming-with-java-8/</link><guid isPermaLink="false">https://github.com/gopalshackergarage/gopalshackergarage.github.io/posts/functional-programming-with-java-8/</guid><pubDate>Wed, 26 Oct 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Fun in Functional Programming with Java 8 and how it is competing with younger functional languages.&lt;/p&gt;
&lt;h3&gt;FP vs OOP Simply:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Whenever I write some code to deal with data about an entity, then functional programming seems to work best.&lt;/li&gt;
&lt;li&gt;Whenever I write some code to simulate that entity, then object-oriented programming seems to work best.
For example, if we have to design a system that deals with &lt;strong&gt;People&lt;/strong&gt;, we use OOP to design a &lt;strong&gt;Person&lt;/strong&gt; class, which holds the state and behavior of a person. But let us say, we need to perform an operation to calculate age of every person based on their DOB, OOP tells us to keep that as a function inside &lt;strong&gt;Person&lt;/strong&gt; class. But if you as FP, it looks at it like a mathematical data-driven operation. It suggests you to prepare a function independent of a person class, which can be called with DOB as input, and we get age as output. We can &lt;strong&gt;Evaluate&lt;/strong&gt; ages of all people by passing them through this function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Only Java 8?&lt;/h3&gt;
&lt;p&gt;Functional Programming is just a different way of thinking about structuring your code. Java 8, just provides new toys to make it more handy. That said, functional programming can be implemented even in Java 6, using anonymous inner classes in-place of lambdas.&lt;/p&gt;
&lt;h3&gt;Why Functional Programming?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FP is handy over OOP when the core essence of objects are functions. In such scenario, design can be changed from OOP to FP, by passing the core function as an argument to constructor and use it for evaluation. This smells &lt;strong&gt;Strategy Pattern&lt;/strong&gt;. Before Java 8, we had to use anonymous inner classes to achieve the same.&lt;/li&gt;
&lt;li&gt;Functions can be treated as values, and they can be assigned to variables. These are called &lt;strong&gt;First Class Functions&lt;/strong&gt; and this type of programming is called &lt;strong&gt;Higher Order Programming&lt;/strong&gt;. Function&amp;#x3C;&gt;, Consumer&amp;#x3C;&gt; etc can be used as variable types to which either lambdas or anonymous inner classes be assigned as values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div id=&quot;gist93453226&quot; class=&quot;gist&quot;&gt;
    &lt;div class=&quot;gist-file&quot;&gt;
      &lt;div class=&quot;gist-data&quot;&gt;
        &lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
  &lt;div id=&quot;file-firstclassfunction-java&quot; class=&quot;file&quot;&gt;
    

  &lt;div itemprop=&quot;text&quot; class=&quot;blob-wrapper data type-java &quot;&gt;
      


&lt;table class=&quot;highlight tab-size js-file-line-container&quot; data-tab-size=&quot;8&quot;&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-firstclassfunction-java-L1&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;1&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-firstclassfunction-java-LC1&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Function&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;&amp;gt;&lt;/span&gt; lastWord &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt; phrase) &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-firstclassfunction-java-L2&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-firstclassfunction-java-LC2&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;     &lt;span class=&quot;pl-smi&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;asList(phrase&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;split(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;))&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;stream()&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-firstclassfunction-java-L3&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;3&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-firstclassfunction-java-LC3&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;                    .reduce((other, last) &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; last)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-firstclassfunction-java-L4&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;4&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-firstclassfunction-java-LC4&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;                    .orElse(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);&lt;/td&gt;
      &lt;/tr&gt;
&lt;/table&gt;


  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;
      &lt;div class=&quot;gist-meta&quot;&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/d5809d7bf15d7e1a34c289f9b2ff6522/raw/425c47d097b9f7f516febb72df60d8dcce8546c4/FirstClassFunction.java&quot; style=&quot;float:right&quot;&gt;view raw&lt;/a&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/d5809d7bf15d7e1a34c289f9b2ff6522#file-firstclassfunction-java&quot;&gt;FirstClassFunction.java&lt;/a&gt;
        hosted with &amp;#10084; by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functional Interfaces, with only one abstract function, can be represented with Lambdas, &lt;code class=&quot;language-text&quot;&gt;() -&amp;gt; {}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data-in Data-out (DIDO) Functions&lt;/strong&gt;, are those that return the same value for a given set of inputs. This is called &lt;strong&gt;Referential Transparency&lt;/strong&gt;. Also know as &lt;strong&gt;Pure Functions&lt;/strong&gt; or functions with &lt;strong&gt;No Side Effects&lt;/strong&gt;. These kind of functions form the core of a Functional program.&lt;/li&gt;
&lt;li&gt;FP also encourages &lt;strong&gt;Immutability&lt;/strong&gt; for the same reason, to avoid any side effects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Thinking in FP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In the code below, the function receives lambda as an argument. Since this is a type of Functional Interface, the lambda holds the implementation of single abstract method, in this case &lt;code class=&quot;language-text&quot;&gt;apply()&lt;/code&gt; (‚Äòapply‚Äô is the notation used for single abstract method in functional interface when its purpose can be anything).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div id=&quot;gist93453226&quot; class=&quot;gist&quot;&gt;
    &lt;div class=&quot;gist-file&quot;&gt;
      &lt;div class=&quot;gist-data&quot;&gt;
        &lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
  &lt;div id=&quot;file-functionalinterface-java&quot; class=&quot;file&quot;&gt;
    

  &lt;div itemprop=&quot;text&quot; class=&quot;blob-wrapper data type-java &quot;&gt;
      


&lt;table class=&quot;highlight tab-size js-file-line-container&quot; data-tab-size=&quot;8&quot;&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionalinterface-java-L1&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;1&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionalinterface-java-LC1&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;@FunctionalInterface&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionalinterface-java-L2&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionalinterface-java-LC2&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;FunctionOf3&lt;/span&gt; {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionalinterface-java-L3&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;3&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionalinterface-java-LC3&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;b&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;c&lt;/span&gt;);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionalinterface-java-L4&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;4&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionalinterface-java-LC4&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;}&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionalinterface-java-L5&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;5&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionalinterface-java-LC5&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionalinterface-java-L6&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;6&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionalinterface-java-LC6&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;FunctionOverTime&lt;/span&gt; combinationOf3(&lt;span class=&quot;pl-smi&quot;&gt;FunctionOverTime&lt;/span&gt; a, &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionalinterface-java-L7&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;7&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionalinterface-java-LC7&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;                                       &lt;span class=&quot;pl-smi&quot;&gt;FunctionOverTime&lt;/span&gt; b, &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionalinterface-java-L8&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;8&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionalinterface-java-LC8&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;                                       &lt;span class=&quot;pl-smi&quot;&gt;FunctionOverTime&lt;/span&gt; c, &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionalinterface-java-L9&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;9&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionalinterface-java-LC9&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;                                       &lt;span class=&quot;pl-smi&quot;&gt;FunctionOf3&lt;/span&gt; combination) {&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionalinterface-java-L10&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;10&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionalinterface-java-LC10&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; (time) &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; combination&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;apply(&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionalinterface-java-L11&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;11&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionalinterface-java-LC11&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    a&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;valueAt(time), &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionalinterface-java-L12&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;12&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionalinterface-java-LC12&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    b&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;valueAt(time), &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionalinterface-java-L13&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;13&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionalinterface-java-LC13&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;    c&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;valueAt(time));&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-functionalinterface-java-L14&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;14&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-functionalinterface-java-LC14&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;}&lt;/td&gt;
      &lt;/tr&gt;
&lt;/table&gt;


  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;
      &lt;div class=&quot;gist-meta&quot;&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/d5809d7bf15d7e1a34c289f9b2ff6522/raw/425c47d097b9f7f516febb72df60d8dcce8546c4/FunctionalInterface.java&quot; style=&quot;float:right&quot;&gt;view raw&lt;/a&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/d5809d7bf15d7e1a34c289f9b2ff6522#file-functionalinterface-java&quot;&gt;FunctionalInterface.java&lt;/a&gt;
        hosted with &amp;#10084; by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Think of lambdas as Maths formulas. So you can essentially pass the values along with their formula to the function, and function uses the formula passed to evaluate like above. This way we can abstract the formula and the values passed.&lt;/li&gt;
&lt;li&gt;Like Encapsulation in OOP, FP‚Äôs mantra is &lt;strong&gt;Isolation&lt;/strong&gt;, that is running functions without any knowledge of the outside world.&lt;/li&gt;
&lt;li&gt;In FP thinking, &lt;strong&gt;Evaluation over Execution&lt;/strong&gt; is preferred. Evaluation is mostly constructed with DIDO (Data-in Data-out) functions, which take data in, process and return an output, without causing side effects. This should form the Core of the application. This is wrapped up with Execution elements like UI, DB, File IO etc. Functional part should only focus on evaluation and computing output from input.&lt;/li&gt;
&lt;li&gt;Make functions generic whenever possible.&lt;/li&gt;
&lt;li&gt;Java 8 recognizes and treats static functions, that don‚Äôt need instance instantiation, as constants. This way it doesn‚Äôt have to create instance every time the method is called.&lt;/li&gt;
&lt;li&gt;When looping through a list and implementing multiple operations on it, the code inside the loop clubs logic for all those operations. Instead it would be clean if we can separate those operations into different functions, which leads to &lt;strong&gt;Separation of Concerns&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In non-java8 environments, when using anonymous classes in-place of lambdas, try putting them outside as static constants of Function type or equivalent, and pass into Stream operations.&lt;/li&gt;
&lt;li&gt;To perform multiple operations on same list of elements, link them like &lt;strong&gt;Pipeline&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Streams&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;List elements are passed one after the other and one at a time, through all the stream operations.&lt;/li&gt;
&lt;li&gt;None of the stream operations gets triggered, until a Terminal operation (Like reduce), is called. This is &lt;strong&gt;Lazy Processing&lt;/strong&gt;. It‚Äôs like the terminal operation is a trigger and puller of data from the stream, processed through all operations. It pulls one-by-one till the list is all covered.&lt;/li&gt;
&lt;li&gt;Lazy processing is efficient and moreover it does things with Separation of Concerns.&lt;/li&gt;
&lt;li&gt;Also, all intermediate operations are &lt;strong&gt;Lazy Streams&lt;/strong&gt;, which means one unit of stream gets executed through all the steps in the pipe-line, before the next one is taken up. If a Truncate operation like &lt;code class=&quot;language-text&quot;&gt;findFirst()&lt;/code&gt; is encountered, rest of the units are ignored.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div id=&quot;gist93453226&quot; class=&quot;gist&quot;&gt;
    &lt;div class=&quot;gist-file&quot;&gt;
      &lt;div class=&quot;gist-data&quot;&gt;
        &lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
  &lt;div id=&quot;file-lazystream-java&quot; class=&quot;file&quot;&gt;
    

  &lt;div itemprop=&quot;text&quot; class=&quot;blob-wrapper data type-java &quot;&gt;
      


&lt;table class=&quot;highlight tab-size js-file-line-container&quot; data-tab-size=&quot;8&quot;&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-lazystream-java-L1&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;1&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-lazystream-java-LC1&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;List&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;Integer&lt;/span&gt;&amp;gt;&lt;/span&gt; list &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;asList(&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-lazystream-java-L2&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-lazystream-java-LC2&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; list&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;stream()&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-lazystream-java-L3&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;3&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-lazystream-java-LC3&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;            .peek(num &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;println(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt;will filter &lt;span class=&quot;pl-pds&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; num))&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-lazystream-java-L4&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;4&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-lazystream-java-LC4&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;            .filter(x &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-lazystream-java-L5&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;5&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-lazystream-java-LC5&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;            .findFirst()&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-lazystream-java-L6&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;6&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-lazystream-java-LC6&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;            .get();&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-lazystream-java-L7&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;7&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-lazystream-java-LC7&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;println(a);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-lazystream-java-L8&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;8&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-lazystream-java-LC8&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-lazystream-java-L9&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;9&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-lazystream-java-LC9&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt; &lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-lazystream-java-L10&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;10&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-lazystream-java-LC10&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;This outputs:&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-lazystream-java-L11&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;11&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-lazystream-java-LC11&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;will filter 1&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-lazystream-java-L12&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;12&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-lazystream-java-LC12&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;will filter 10&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-lazystream-java-L13&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;13&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-lazystream-java-LC13&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;10&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-lazystream-java-L14&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;14&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-lazystream-java-LC14&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;/tr&gt;
&lt;/table&gt;


  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;
      &lt;div class=&quot;gist-meta&quot;&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/d5809d7bf15d7e1a34c289f9b2ff6522/raw/425c47d097b9f7f516febb72df60d8dcce8546c4/LazyStream.java&quot; style=&quot;float:right&quot;&gt;view raw&lt;/a&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/d5809d7bf15d7e1a34c289f9b2ff6522#file-lazystream-java&quot;&gt;LazyStream.java&lt;/a&gt;
        hosted with &amp;#10084; by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functions like &lt;code class=&quot;language-text&quot;&gt;mapToDouble()&lt;/code&gt; can deal with primitives without wrapping, which is more efficient. Explore more of such‚Ä¶&lt;/li&gt;
&lt;li&gt;Short-Circuiting terminal operations like &lt;code class=&quot;language-text&quot;&gt;anyMatch()&lt;/code&gt; process the stream only as much as required to return the desired result.&lt;/li&gt;
&lt;li&gt;Once the terminal operation is executed, the stream is dead, and throws an exception when reused (Unlike Iterator which would just return empty). To Reuse as Stream, declare it as type &lt;code class=&quot;language-text&quot;&gt;Supplier&amp;lt;Stream&amp;gt;&lt;/code&gt; and use its &lt;code class=&quot;language-text&quot;&gt;get()&lt;/code&gt; method to get new instance of stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div id=&quot;gist93453226&quot; class=&quot;gist&quot;&gt;
    &lt;div class=&quot;gist-file&quot;&gt;
      &lt;div class=&quot;gist-data&quot;&gt;
        &lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
  &lt;div id=&quot;file-supplier-java&quot; class=&quot;file&quot;&gt;
    

  &lt;div itemprop=&quot;text&quot; class=&quot;blob-wrapper data type-java &quot;&gt;
      


&lt;table class=&quot;highlight tab-size js-file-line-container&quot; data-tab-size=&quot;8&quot;&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-supplier-java-L1&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;1&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-supplier-java-LC1&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;Supplier&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;DoubleStream&lt;/span&gt;&amp;gt;&lt;/span&gt; totalStream &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; saleStream()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;mapToDouble(&lt;span class=&quot;pl-smi&quot;&gt;Sale&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;total);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-supplier-java-L2&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-supplier-java-LC2&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;boolean&lt;/span&gt; bigSaleDay &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; totalStream&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;get()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;anyMatch(total &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; total &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;100.00&lt;/span&gt;);&lt;/td&gt;
      &lt;/tr&gt;
&lt;/table&gt;


  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;
      &lt;div class=&quot;gist-meta&quot;&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/d5809d7bf15d7e1a34c289f9b2ff6522/raw/425c47d097b9f7f516febb72df60d8dcce8546c4/Supplier.java&quot; style=&quot;float:right&quot;&gt;view raw&lt;/a&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/d5809d7bf15d7e1a34c289f9b2ff6522#file-supplier-java&quot;&gt;Supplier.java&lt;/a&gt;
        hosted with &amp;#10084; by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intermediate operations when called on a stream returns a stream.&lt;/li&gt;
&lt;li&gt;Use &lt;code class=&quot;language-text&quot;&gt;flatMap()&lt;/code&gt; to flatten a collection of stream before operating on it and outputs a concatenation of all those streams.&lt;/li&gt;
&lt;li&gt;In the code below, assume &lt;code class=&quot;language-text&quot;&gt;saleStream()&lt;/code&gt; produces a stream of sales and every sale has a list of items. &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt; returns a Stream of Streams, while &lt;code class=&quot;language-text&quot;&gt;flatMap&lt;/code&gt; flattens all those streams and concatinates them into a single stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div id=&quot;gist93453226&quot; class=&quot;gist&quot;&gt;
    &lt;div class=&quot;gist-file&quot;&gt;
      &lt;div class=&quot;gist-data&quot;&gt;
        &lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
  &lt;div id=&quot;file-supplier-java&quot; class=&quot;file&quot;&gt;
    

  &lt;div itemprop=&quot;text&quot; class=&quot;blob-wrapper data type-java &quot;&gt;
      


&lt;table class=&quot;highlight tab-size js-file-line-container&quot; data-tab-size=&quot;8&quot;&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-supplier-java-L1&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;1&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-supplier-java-LC1&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;Supplier&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;DoubleStream&lt;/span&gt;&amp;gt;&lt;/span&gt; totalStream &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; saleStream()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;mapToDouble(&lt;span class=&quot;pl-smi&quot;&gt;Sale&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;total);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-supplier-java-L2&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-supplier-java-LC2&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;boolean&lt;/span&gt; bigSaleDay &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; totalStream&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;get()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;anyMatch(total &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; total &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;100.00&lt;/span&gt;);&lt;/td&gt;
      &lt;/tr&gt;
&lt;/table&gt;


  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;
      &lt;div class=&quot;gist-meta&quot;&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/d5809d7bf15d7e1a34c289f9b2ff6522/raw/425c47d097b9f7f516febb72df60d8dcce8546c4/Supplier.java&quot; style=&quot;float:right&quot;&gt;view raw&lt;/a&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/d5809d7bf15d7e1a34c289f9b2ff6522#file-supplier-java&quot;&gt;Supplier.java&lt;/a&gt;
        hosted with &amp;#10084; by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;collect()&lt;/code&gt; to collect the out-coming stream to a desired data structure like List. It also has interesting functions like &lt;code class=&quot;language-text&quot;&gt;groupBy&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;groupByConcurrent&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;summarizingDoubles&lt;/code&gt; etc. This is called &lt;strong&gt;fold&lt;/strong&gt; in FP terms, which summarizes bunch of values into one.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Stream.generate(supplier)&lt;/code&gt; can generate an infinite stream of objects, but it needs to be used along with a Short-Circuiting operator like &lt;code class=&quot;language-text&quot;&gt;limit()&lt;/code&gt;. The below code generates sale objects supplied by the &lt;code class=&quot;language-text&quot;&gt;Supplier&lt;/code&gt;, limited by the quantity passed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div id=&quot;gist93453226&quot; class=&quot;gist&quot;&gt;
    &lt;div class=&quot;gist-file&quot;&gt;
      &lt;div class=&quot;gist-data&quot;&gt;
        &lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
  &lt;div id=&quot;file-infinitestream-java&quot; class=&quot;file&quot;&gt;
    

  &lt;div itemprop=&quot;text&quot; class=&quot;blob-wrapper data type-java &quot;&gt;
      


&lt;table class=&quot;highlight tab-size js-file-line-container&quot; data-tab-size=&quot;8&quot;&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-infinitestream-java-L1&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;1&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-infinitestream-java-LC1&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Supplier&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;Sale&lt;/span&gt;&amp;gt;&lt;/span&gt; supplier &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Sale&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;...&lt;/span&gt;);&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td id=&quot;file-infinitestream-java-L2&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td id=&quot;file-infinitestream-java-LC2&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;generate(supplier)&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;limit(quantity);&lt;/td&gt;
      &lt;/tr&gt;
&lt;/table&gt;


  &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;
      &lt;div class=&quot;gist-meta&quot;&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/d5809d7bf15d7e1a34c289f9b2ff6522/raw/425c47d097b9f7f516febb72df60d8dcce8546c4/InfiniteStream.java&quot; style=&quot;float:right&quot;&gt;view raw&lt;/a&gt;
        &lt;a href=&quot;https://gist.github.com/gopalshackergarage/d5809d7bf15d7e1a34c289f9b2ff6522#file-infinitestream-java&quot;&gt;InfiniteStream.java&lt;/a&gt;
        hosted with &amp;#10084; by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ParallelStreams&lt;/strong&gt; are a great way to span work onto multiple threads, when order of processing is not of a concern.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Optional&lt;/code&gt; is preferred over traditional null checking with &lt;code class=&quot;language-text&quot;&gt;isPresent()&lt;/code&gt; which is more intuative. Since passing optionals around methods avoids presence of NULLs, there won‚Äôt be any restlessness about NPE. Note, you still need to check &lt;code class=&quot;language-text&quot;&gt;isPresent()&lt;/code&gt;, so it‚Äôs not a total replacement to avoid checking, it just makes it error free. According to the documentation, Optional should be used as a return type. And that‚Äôs all. It‚Äôs a neat solution for handling data that might be not present.&lt;/li&gt;
&lt;li&gt;Also, It can be flawlessly used in the stream chains, without worrying about Null. It can also be used to return alternate results with &lt;code class=&quot;language-text&quot;&gt;orElse&lt;/code&gt; when the result set is empty.&lt;/li&gt;
&lt;li&gt;Stream, Optional and Functions are &lt;strong&gt;Contexts&lt;/strong&gt;. Contexts are like containers with a framework around (Execution around Pattern) and accepts a variable which it uses and executes logic around it.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;sorted()&lt;/code&gt; is a State-full operation, because unlike processing one-by-one, it needs to process all.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Computer time is lot less cheaper than programmer time. So code that looks clear is more effective than code that runs fast.&lt;/li&gt;
&lt;li&gt;FP may not be familiar among developers, who are used to code in a traditional OOPs way. But more readable may not always be more familiar. FP leads to more &lt;strong&gt;Declarative Programming&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tit-Bits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;External Iteration&lt;/strong&gt;, is when you are in control of the iteration, like iterating using &lt;code class=&quot;language-text&quot;&gt;for/while&lt;/code&gt; loop&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internal Iteration&lt;/strong&gt;, is when the Iterable is in control of the iteration. We just pass it the function saying what to do with those elements.&lt;/li&gt;
&lt;li&gt;Functions like &lt;code class=&quot;language-text&quot;&gt;mapToDouble()&lt;/code&gt; can deal with primitives without wrapping, which is more efficient. (Explore more of such‚Ä¶)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Supplier&lt;/code&gt; can act as function object that can hold a function that can return a result.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>