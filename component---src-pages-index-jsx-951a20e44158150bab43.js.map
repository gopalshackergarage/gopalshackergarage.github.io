{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./src/components/SEO.js"],"names":["IndexRoute","render","items","_this$props$data$site","this","props","data","site","siteMetadata","title","subtitle","logo","allMarkdownRemark","edges","forEach","post","push","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_components_Post__WEBPACK_IMPORTED_MODULE_5__","key","node","fields","slug","_components_Layout__WEBPACK_IMPORTED_MODULE_4__","_components_SEO__WEBPACK_IMPORTED_MODULE_7__","image","description","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","name","content","_components_Sidebar__WEBPACK_IMPORTED_MODULE_6__","className","React","Component","pageQuery","SEO","_ref","meta","gatsby__WEBPACK_IMPORTED_MODULE_5__","query","metaDescription","metaImage","siteurl","url","Object","assign","htmlAttributes","lang","titleTemplate","property","author","aboutme","concat","_public_static_d_1577310642_json__WEBPACK_IMPORTED_MODULE_1__","defaultProps","propTypes","PropTypes","string","isRequired","array"],"mappings":"yOAQMA,4FACJC,OAAA,WACE,IAAMC,EAAQ,GADPC,EAE2BC,KAAKC,MAAMC,KAAKC,KAAKC,aAA/CC,EAFDN,EAECM,MAAOC,EAFRP,EAEQO,SAAUC,EAFlBR,EAEkBQ,KAMzB,OALcP,KAAKC,MAAMC,KAAKM,kBAAkBC,MAC1CC,QAAQ,SAAAC,GACZb,EAAMc,KAAKC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMd,KAAMS,EAAMM,IAAKN,EAAKO,KAAKC,OAAOC,UAInDP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAKC,MAAOhB,EAAMiB,YAAalB,EAAUD,MAAOA,IAChDQ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACU,EAAAX,EAAD,KACED,EAAAC,EAAAC,cAAA,aAAQV,GACRQ,EAAAC,EAAAC,cAAA,QAAMW,KAAK,cAAcC,QAASrB,KAEpCO,EAAAC,EAAAC,cAACa,EAAA,EAAY5B,KAAKC,OAClBY,EAAAC,EAAAC,cAAA,OAAKc,UAAU,WACbhB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,kBAAkB/B,UAnBpBgC,IAAMC,WA2BhBnC,YAER,IAAMoC,EAAS,4HCjBhBC,EAAM,SAAAC,GAAA,IACVC,EADUD,EACVC,KAAMZ,EADIW,EACJX,MAAOlB,EADH6B,EACG7B,MAAOmB,EADVU,EACUV,YAAaJ,EADvBc,EACuBd,KADvB,OAGVP,EAAAC,EAAAC,cAACqB,EAAA,YAAD,CACEC,MAnBO,aAoBPxC,OAAQ,SAAAK,GAAQ,IACNE,EAAiBF,EAAKC,KAAtBC,aACFkC,EAAkBd,GAAepB,EAAaE,SAC9CiC,EAAYhB,EAAWnB,EAAaoC,QAAnB,IAA8BjB,EAAU,KACzDkB,EAAG,GAAMrC,EAAaoC,QAAUpB,EACtC,OACEP,EAAAC,EAAAC,cAACU,EAAAX,EAAD4B,OAAAC,OAAA,CACEC,eAAgB,CAAEC,KAAM,OACnBxC,EACD,CACAyC,cAAa,QAAU1C,EAAaC,MACpCA,SAEA,CACAA,MAAOD,EAAaC,OAR1B,CAUE8B,KAAM,CACJ,CACET,KAAM,cACNC,QAASW,GAEX,CACES,SAAU,SACVpB,QAASc,GAEX,CACEM,SAAU,WACVpB,QAAStB,GAASD,EAAaC,OAEjC,CACEqB,KAAM,iBACNC,QAASW,GAEX,CACEZ,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASvB,EAAa4C,OAAOC,SAE/B,CACEvB,KAAM,gBACNC,QAAStB,GAASD,EAAaC,OAEjC,CACEqB,KAAM,sBACNC,QAASW,IAGVY,OACCX,EACI,CACA,CACEQ,SAAU,WACVpB,QAASY,GAEX,CACEb,KAAM,gBACNC,QAASY,IAGX,IAELW,OAAOf,OAlElBjC,KAAAiD,KAyEFlB,EAAImB,aAAe,CACjBjB,KAAM,GACNf,KAAM,IAGRa,EAAIoB,UAAY,CACd7B,YAAa8B,IAAUC,OAAOC,WAC9BjC,MAAO+B,IAAUC,OAAOC,WACxBrB,KAAMmB,IAAUG,MAChBrC,KAAMkC,IAAUC,OAChBlD,MAAOiD,IAAUC,OAAOC,YAGXvB","file":"component---src-pages-index-jsx-951a20e44158150bab43.js","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport Post from '../components/Post';\nimport Sidebar from '../components/Sidebar';\nimport SEO from '../components/SEO';\n\nclass IndexRoute extends React.Component {\n  render() {\n    const items = [];\n    const { title, subtitle, logo } = this.props.data.site.siteMetadata;\n    const posts = this.props.data.allMarkdownRemark.edges;\n    posts.forEach(post => {\n      items.push(<Post data={post} key={post.node.fields.slug} />);\n    });\n\n    return (\n      <Layout>\n        <SEO image={logo} description={subtitle} title={title} />\n        <div>\n          <Helmet>\n            <title>{title}</title>\n            <meta name=\"description\" content={subtitle} />\n          </Helmet>\n          <Sidebar {...this.props} />\n          <div className=\"content\">\n            <div className=\"content__inner\">{items}</div>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default IndexRoute;\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    site {\n      siteMetadata {\n        title\n        subtitle\n        copyright\n        declaration\n        logo\n        menu {\n          label\n          path\n        }\n        author {\n          name\n          email\n          telegram\n          twitter\n          github\n          linkedin\n          stackoverflow\n          aboutme\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      filter: { frontmatter: { layout: { eq: \"post\" }, draft: { ne: true } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            categorySlug\n          }\n          timeToRead\n          frontmatter {\n            title\n            date\n            category\n            description\n            cover {\n              childImageSharp {\n                original {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        subtitle\n        siteurl\n        author {\n          aboutme\n        }\n      }\n    }\n  }\n`;\n\nconst SEO = ({\n  meta, image, title, description, slug,\n}) => (\n  <StaticQuery\n    query={query}\n    render={data => {\n      const { siteMetadata } = data.site;\n      const metaDescription = description || siteMetadata.subtitle;\n      const metaImage = image ? `${siteMetadata.siteurl}/${image}` : null;\n      const url = `${siteMetadata.siteurl}${slug}`;\n      return (\n        <Helmet\n          htmlAttributes={{ lang: 'en' }}\n          {...(title\n            ? {\n              titleTemplate: `%s - ${siteMetadata.title}`,\n              title,\n            }\n            : {\n              title: siteMetadata.title,\n            })}\n          meta={[\n            {\n              name: 'description',\n              content: metaDescription,\n            },\n            {\n              property: 'og:url',\n              content: url,\n            },\n            {\n              property: 'og:title',\n              content: title || siteMetadata.title,\n            },\n            {\n              name: 'og:description',\n              content: metaDescription,\n            },\n            {\n              name: 'twitter:card',\n              content: 'summary',\n            },\n            {\n              name: 'twitter:creator',\n              content: siteMetadata.author.aboutme,\n            },\n            {\n              name: 'twitter:title',\n              content: title || siteMetadata.title,\n            },\n            {\n              name: 'twitter:description',\n              content: metaDescription,\n            },\n          ]\n            .concat(\n              metaImage\n                ? [\n                  {\n                    property: 'og:image',\n                    content: metaImage,\n                  },\n                  {\n                    name: 'twitter:image',\n                    content: metaImage,\n                  },\n                ]\n                : []\n            )\n            .concat(meta)}\n        />\n      );\n    }}\n  />\n);\n\nSEO.defaultProps = {\n  meta: [],\n  slug: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}