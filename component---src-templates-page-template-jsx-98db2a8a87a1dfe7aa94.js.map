{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/components/Menu/index.jsx","webpack:///./src/components/Emoji/Emoji.jsx","webpack:///./src/components/Sidebar/index.jsx","webpack:///./src/components/PageTemplateDetails/index.jsx","webpack:///./src/templates/page-template.jsx"],"names":["SEO","meta","cover","title","description","caption","slug","query","render","data","siteMetadata","site","metaDescription","metaImage","siteUrl","url","htmlAttributes","lang","titleTemplate","author","name","blogTitle","content","property","social","twitter","concat","defaultProps","Menu","menu","this","props","menuBlock","className","map","item","key","path","to","activeClassName","style","boxShadow","textDecoration","color","label","React","Component","Emoji","symbol","role","aria-label","aria-hidden","Sidebar","location","subtitle","copyright","declaration","Bio","getCurrentPath","Links","ThemeToggle","marginTop","PageTemplateDetails","page","markdownRemark","frontmatter","dangerouslySetInnerHTML","__html","html","PageTemplate","pageTitle","pageDescription","actualPageTitle","background","transition","minHeight","Layout","childImageSharp","original","src","fields","Helmet"],"mappings":"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","file":"component---src-templates-page-template-jsx-98db2a8a87a1dfe7aa94.js","sourcesContent":["import React from \"react\"\nimport { Helmet } from \"react-helmet\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        blogTitle\n        subtitle\n        caption\n        siteUrl\n        author {\n          name\n        }\n        social {\n          twitter\n        }\n      }\n    }\n  }\n`\n\nconst SEO = ({ meta, cover, title, caption, description, slug }) => (\n  <StaticQuery\n    query={query}\n    render={(data) => {\n      const { siteMetadata } = data.site\n      const metaDescription = description || siteMetadata.description\n      const metaImage = cover ? `${siteMetadata.siteUrl}/${cover}` : null\n      const url = `${siteMetadata.siteUrl}${slug}`\n      return (\n        <Helmet\n          htmlAttributes={{ lang: `en` }}\n          {...(title\n            ? {\n                titleTemplate: `%s | ${siteMetadata.author.name} | ${siteMetadata.blogTitle}`,\n                title,\n              }\n            : {\n                title: `${siteMetadata.author.name} | ${siteMetadata.blogTitle}`,\n              })}\n          meta={[\n            {\n              name: `description`,\n              content: metaDescription,\n            },\n            {\n              property: `og:url`,\n              content: url,\n            },\n            {\n              property: `og:title`,\n              content: title || siteMetadata.title,\n            },\n            {\n              property: `og:description`,\n              content: metaDescription,\n            },\n            {\n              name: `twitter:card`,\n              content: `summary`,\n            },\n            {\n              name: `twitter:creator`,\n              content: siteMetadata.social.twitter,\n            },\n            {\n              name: `twitter:title`,\n              content: title || siteMetadata.title,\n            },\n            {\n              name: `twitter:description`,\n              content: metaDescription,\n            },\n          ]\n            .concat(\n              metaImage\n                ? [\n                    {\n                      property: `og:image`,\n                      content: metaImage,\n                    },\n                    {\n                      name: `twitter:image`,\n                      content: metaImage,\n                    },\n                  ]\n                : []\n            )\n            .concat(meta)}\n        />\n      )\n    }}\n  />\n)\n\nSEO.defaultProps = {\n  meta: [],\n  slug: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string.isRequired,\n  cover: PropTypes.string.isRequired,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string,\n}\n\nexport default SEO\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport \"./style.scss\"\n\nclass Menu extends React.Component {\n  render() {\n    const menu = this.props.data\n\n    const menuBlock = (\n      <ul className=\"menu__list\">\n        {menu.map((item) => (\n          <li className=\"menu__list-item\" key={item.path}>\n            <Link\n              to={item.path}\n              className=\"menu__list-item-link\"\n              activeClassName=\"menu__list-item-link menu__list-item-link--active\"\n              style={{\n                boxShadow: `none`,\n                textDecoration: `none`,\n                color: `var(--textLink)`,\n              }}\n            >\n              {item.label}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    )\n\n    return <nav className=\"menu\">{menuBlock}</nav>\n  }\n}\n\nexport default Menu\n","import React from \"react\"\n\nconst Emoji = ({ label, symbol }) => (\n  <span\n    className=\"emoji\"\n    role=\"img\"\n    aria-label={label || ``}\n    aria-hidden={label ? `false` : `true`}\n  >\n    {symbol}\n  </span>\n)\nexport default Emoji\n","import React from \"react\"\nimport Menu from \"../Menu\"\nimport Links from \"../Links\"\nimport \"./style.scss\"\nimport Emoji from \"../Emoji/Emoji\"\nimport Bio from \"../Bio\"\nimport { getCurrentPath } from \"../utils\"\nimport ThemeToggle from \"../Toggle/ThemeToggle\"\n\nclass Sidebar extends React.Component {\n  render() {\n    const { location } = this.props\n    const {\n      author,\n      subtitle,\n      copyright,\n      declaration,\n      menu,\n    } = this.props.data.site.siteMetadata\n\n    return (\n      <div className=\"sidebar\">\n        <div className=\"sidebar__inner\">\n          <Bio\n            className=\"sidebar__author\"\n            author={author}\n            subtitle={subtitle}\n            path={getCurrentPath(location)}\n          />\n\n          <div className=\"sidebar__inner-middle\">\n            <Menu data={menu} />\n            <Links data={author} />\n            <ThemeToggle />\n          </div>\n\n          <div>\n            <p className=\"sidebar__copyright\" style={{ marginTop: `0` }}>\n              {declaration}\n              &nbsp;\n              <Emoji symbol=\"⚛️\" />\n            </p>\n            <p className=\"sidebar__copyright\">{copyright}</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Sidebar\n","import React from \"react\"\nimport Sidebar from \"../Sidebar\"\nimport \"./style.scss\"\n\nclass PageTemplateDetails extends React.Component {\n  render() {\n    const page = this.props.data.markdownRemark\n\n    return (\n      <div>\n        <Sidebar {...this.props} />\n        <div className=\"content\">\n          <div className=\"content__inner\">\n            <div className=\"page\">\n              <h1 className=\"page__title\">{page.frontmatter.title}</h1>\n              <div\n                className=\"page__body\"\n                /* eslint-disable-next-line react/no-danger */\n                dangerouslySetInnerHTML={{ __html: page.html }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PageTemplateDetails\n","import React from \"react\"\nimport { Helmet } from \"react-helmet\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/Layout\"\nimport PageTemplateDetails from \"../components/PageTemplateDetails\"\nimport SEO from \"../components/SEO\"\n\nclass PageTemplate extends React.Component {\n  render() {\n    const { subtitle, author } = this.props.data.site.siteMetadata\n    const page = this.props.data.markdownRemark\n    const {\n      title: pageTitle,\n      description: pageDescription,\n      cover,\n    } = page.frontmatter\n    const description = pageDescription !== null ? pageDescription : subtitle\n\n    const actualPageTitle = `${pageTitle}`\n    return (\n      <div\n        style={{\n          color: `var(--textNormal)`,\n          background: `var(--bg)`,\n          transition: `color 0.2s ease-out, background 0.2s ease-out`,\n          minHeight: `100vh`,\n        }}\n      >\n        <Layout>\n          <SEO\n            title={actualPageTitle}\n            description={description}\n            cover={cover ? cover.childImageSharp.original.src : ``}\n            slug={page.fields.slug}\n          />\n          <div>\n            <Helmet>\n              <title>{`${pageTitle} | ${author.name}`}</title>\n              <meta name=\"description\" content={description} />\n            </Helmet>\n            <PageTemplateDetails {...this.props} />\n          </div>\n        </Layout>\n      </div>\n    )\n  }\n}\n\nexport default PageTemplate\n\nexport const pageQuery = graphql`\n  query PageBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        subtitle\n        copyright\n        declaration\n        menu {\n          label\n          path\n        }\n        author {\n          name\n          email\n          telegram\n          twitter\n          github\n          linkedin\n          stackoverflow\n          aboutme\n        }\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date\n        description\n        cover {\n          childImageSharp {\n            original {\n              src\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}