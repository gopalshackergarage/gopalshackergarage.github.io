{"componentChunkName":"component---src-templates-post-template-jsx","path":"/posts/monads-for-drunken-coders-pint-1/","result":{"data":{"site":{"siteMetadata":{"title":"It's All Over full-stack","subtitle":"So excited about this Craft that, I can't keep myself from blogging about it.","copyright":"¬© All rights reserved.","declaration":"I built this blog with React.js","author":{"name":"Gopal S Akshintala","twitter":"http://bit.ly/agstwtr","github":"http://bit.ly/agsgithub","linkedin":"http://bit.ly/agslnkd","telegram":"https://t.me/gopalakshintala","email":"gopal.akshintala@gmail.com","stackoverflow":"http://bit.ly/agsso","aboutme":"/about-me"},"disqusShortname":"gopal","url":"https://github.com/overfullstack/overfullstack.github.io"}},"markdownRemark":{"id":"c139e727-320e-5d01-9418-e06b14857868","html":"<h2 id=\"Story-of-an-Egg-validator\" style=\"position:relative;\">Story of an Egg validator<a href=\"#Story-of-an-Egg-validator\" aria-label=\"Story of an Egg validator permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><img src=\"/b2c89a7565e61c3741033785cc85bf29/introduction.gif\" alt=\"Intro\"></p>\n<h3 id=\"Sol-1-One-egg---One-validation\" style=\"position:relative;\">Sol 1: One egg - One validation<a href=\"#Sol-1-One-egg---One-validation\" aria-label=\"Sol 1 One egg   One validation permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Life is so simple. Pass that one egg through that one validator. Results in good or bad.</p>\n<h3 id=\"Sol-23-Many-eggs---One-validation\" style=\"position:relative;\">Sol 23: Many eggs - One validation<a href=\"#Sol-23-Many-eggs---One-validation\" aria-label=\"Sol 23 Many eggs   One validation permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Not difficult at all, simply pass them through validator, one after the other and collect the results for each one, in order. With simple if-else condition, this code looks like a Cute Sprout! üå±</p>\n<h3 id=\"Sol-97-Many-eggs---Many-validations\" style=\"position:relative;\">Sol 97: Many eggs - Many validations<a href=\"#Sol-97-Many-eggs---Many-validations\" aria-label=\"Sol 97 Many eggs   Many validations permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Why do I sense climate‚Äôs getting a bit hotter. Ok, still no problem, I know Java 8. Let me write a pipe of filter functions. Each of them just pass the good ones ahead and discard bad ones.</p>\n<div class=\"gatsby-code-title\">FirstFunctionalCode.java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\">eggs<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EggValidator</span><span class=\"token operator\">::</span><span class=\"token function\">validator1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EggValidator</span><span class=\"token operator\">::</span><span class=\"token function\">validator2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EggValidator</span><span class=\"token operator\">::</span><span class=\"token function\">validator3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Yay! I‚Äôm a Functional programmer! Let me have a üç∫</p>\n<ul>\n<li>But what if at the end of validation pipeline, I need both good and bad eggs? Hmm, placing the üç∫ mug back on table.</li>\n<li>How can I make all of them pass through every validator and accumulate the results?</li>\n<li>Probably, ditch that FP, let me just use the all-friendly for-each loop to iterate through all the eggs, call validator on each egg, store bad eggs separately in a bucket as and when I find one.</li>\n<li>Bad! I couldn‚Äôt use those Streams and Lambdas. Anyways, they are just fancy syntactic-sugar. May be next time! Let me go ahead with this if-else ladder for now. Let me take a sip! üç∫</li>\n<li>Wait, what if I also need to know the reason why an egg is bad?</li>\n<li>Let me use a global badEggFailureBucketMap and put eggIndex to validation failure.</li>\n<li>But! how can I tightly map validation-failure-TO-failed-validation-method? Hmm‚Ä¶ it‚Äôs ok to not tightly map them, I just know which failure is-to what.</li>\n</ul>\n<p>Suddenly, the cute sprout turned into a treeüéã, with multiple if-else-break-continue branches of execution.</p>\n<h3 id=\"Sol-179-Many-Types-of-eggs---Many-validations\" style=\"position:relative;\">Sol 179: Many Types of eggs - Many validations<a href=\"#Sol-179-Many-Types-of-eggs---Many-validations\" aria-label=\"Sol 179 Many Types of eggs   Many validations permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>Seriously, how many validators should I write? One per every egg type? Repeat this entire algo for each and every type, just changing the parameter types!?</li>\n<li>Also, there can be some <strong>exceptional</strong> eggs, that blow-off while going through the validator, how am I supposed to deal with all those exceptions?</li>\n<li>How am I gonna jenga new validations in the middle of this chaos!?</li>\n<li>By the way, notice, I kept mutating egg list while iterating, removing bad ones. It‚Äôs totally confusing to reason-out, how is the state changing.</li>\n<li>Now, don‚Äôt ask me to add inter-dependent validations. If they throw exceptions as well, the if-else-try-catch nest crosses all margins and overflows out of my screen.</li>\n<li>Again, don‚Äôt ask me to unit-test this shit!</li>\n</ul>\n<h3 id=\"Sol-237-Many-Types-of-eggs---Many-more-validations---in-parallel\" style=\"position:relative;\">Sol 237: Many Types of eggs - Many more validations - <em>in parallel</em><a href=\"#Sol-237-Many-Types-of-eggs---Many-more-validations---in-parallel\" aria-label=\"Sol 237 Many Types of eggs   Many more validations   in parallel permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>I think, I‚Äôm too drunk. My head is spinning! ü§Ø</p>\n<blockquote>\n<p>This design pattern has a name and it‚Äôs called the ‚ÄúEvolution-of-a-Problem-Over-Time‚Äù.</p>\n</blockquote>\n<p>The code ended-up like an Alien plant üëΩ</p>\n<div class=\"gatsby-code-title\">CyclomaticEggValidator.java</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">cyclomaticCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> eggList <span class=\"token operator\">=</span> <span class=\"token class-name\">Egg</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEggCarton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ValidationFailure</span><span class=\"token punctuation\">></span></span> badEggFailureBucketMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> eggIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> eggList<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> eggIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> eggTobeValidated <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Operations</span><span class=\"token punctuation\">.</span><span class=\"token function\">simpleOperation1</span><span class=\"token punctuation\">(</span>eggTobeValidated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      iterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Mutation</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// How can you cleanly map validation-failure to which validation-method failed?</span></span><span class=\"gatsby-highlight-code-line\">      badEggFailureBucketMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>eggIndex<span class=\"token punctuation\">,</span> VALIDATION_FAILURE_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Operations</span><span class=\"token punctuation\">.</span><span class=\"token function\">throwableOperation2</span><span class=\"token punctuation\">(</span>eggTobeValidated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        iterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        badEggFailureBucketMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>eggIndex<span class=\"token punctuation\">,</span> VALIDATION_FAILURE_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Repetition of same logic for exception handling</span></span>      iterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      badEggFailureBucketMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>eggIndex<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ValidationFailure</span><span class=\"token punctuation\">.</span><span class=\"token function\">withErrorMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Inter-dependent validations</span></span>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Operations</span><span class=\"token punctuation\">.</span><span class=\"token function\">throwableOperation31</span><span class=\"token punctuation\">(</span>eggTobeValidated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> yellowTobeValidated <span class=\"token operator\">=</span> eggTobeValidated<span class=\"token punctuation\">.</span><span class=\"token function\">getYolk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yellowTobeValidated <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Nested-if for null checking nested objects</span></span>          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Operations</span><span class=\"token punctuation\">.</span><span class=\"token function\">throwableAndNestedOperation32</span><span class=\"token punctuation\">(</span>yellowTobeValidated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              iterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              badEggFailureBucketMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>eggIndex<span class=\"token punctuation\">,</span> VALIDATION_FAILURE_32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            iterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            badEggFailureBucketMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>eggIndex<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ValidationFailure</span><span class=\"token punctuation\">.</span><span class=\"token function\">withErrorMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        iterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        badEggFailureBucketMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>eggIndex<span class=\"token punctuation\">,</span> VALIDATION_FAILURE_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      iterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      badEggFailureBucketMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>eggIndex<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ValidationFailure</span><span class=\"token punctuation\">.</span><span class=\"token function\">withErrorMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> entry <span class=\"token operator\">:</span> badEggFailureBucketMap<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"Imperative-vs-Functional-Chatter\" style=\"position:relative;\">Imperative vs Functional Chatter<a href=\"#Imperative-vs-Functional-Chatter\" aria-label=\"Imperative vs Functional Chatter permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>If a right Paradigm isn‚Äôt chosen, you literally have to stab and cut-open the Open-Closed principle every time you get a new requirement.</li>\n<li>Every Software design problem can be seen like a block of objects doing functions or functions doing (I mean, processing) objects. There you go! I just metaphored OOPs vs FP.</li>\n<li>Eggs aren‚Äôt doing anything here, they are being done. This clearly is a Functional programming problem. Eggs should NOT be juggled around validation functions, but validations should be <em>applied</em> on eggs.</li>\n<li>In OOPs, we build classes with state and have functions exposed to operate on that state. But, how can you build a class which lets you provide functions dynamically at run time, to operate on its state. This is fundamental premises on which Functional style is built.</li>\n<li>Of-course, Functional thinking doesn‚Äôt solve all the problems, neither is Object oriented thinking. However, in this problem FP is not fighting with OOPs, but with <strong>Imperative Programming</strong>.</li>\n<li>Our friend here is clearly suffering from trying to do too much of administration, dealing with the eggs.</li>\n<li>Like any other problem, this too has multiple sub-problems.</li>\n</ul>\n<h3 id=\"Problemcode-classlanguage-textsplitcode\" style=\"position:relative;\">Problem<code class=\"language-text\">.split()</code><a href=\"#Problemcode-classlanguage-textsplitcode\" aria-label=\"Problemcode classlanguage textsplitcode permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>One master function which loops and calls all validation functions and passes around the results to other functions. That‚Äôs like doing all the <strong>Administrative-Orchestration-Imperatively</strong> (That‚Äôs how you use 3 adjectives üòé). Such functions are so difficult to Unit test, which indicates, they are difficult to reason-out as well.</li>\n<li>Validations should be <strong>Streamlined</strong>, in a way that they can be plugged in and out of anywhere in between (like the bars in Jenga).</li>\n<li>The Streamline should let different types of data (The Good, the Bad and the Ugly), to co-exist as they flow. One bucket per type won‚Äôt scale, need an alternative to hold <strong>Heterogeneous-Data</strong>.</li>\n<li>It‚Äôs 2k18, please don‚Äôt use <strong><code class=\"language-text\">if</code> to null check while Streaming</strong>. Especially when you have nested objects, you end-up in an if-else hell. The code-flow should not be like a Trigonometric curve, but should be like a Linear equation.</li>\n<li>Mutation is sin, especially when you are mutating a global state. <strong>Immutability</strong> should be enforced, while the data is streamed across multiple functions, or predicting who-changed-what can kill a lot of your time while debugging.</li>\n<li><strong>Exceptions are Evil</strong>, they are camouflaged gotos. Never throw them with your own hands and interrupt your stream and code flow.</li>\n<li>The <code class=\"language-text\">ValidationFailure</code> and validation method are loosely coupled, this makes it way harder to reason-out.</li>\n<li>It is so difficult to unit-test a function like this.</li>\n<li>Finally, we need to find a way to compose our algorithm without worrying about the parameter type, basically abstract away the parameter type on which this algo is being run.</li>\n</ul>\n<blockquote>\n<p>But rather than solving them one-by-one, it‚Äôs important to find a paradigm, which can solve these problems as a group.</p>\n</blockquote>\n<h3 id=\"Octopus-Functions\" style=\"position:relative;\">Octopus Functions<a href=\"#Octopus-Functions\" aria-label=\"Octopus Functions permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>It‚Äôs been told since my Grandfather, that functions need to be small and do only one thing and do it well, nothing new. We don‚Äôt achieve much by splitting the above alien plan into separate functions.</li>\n<li>Coz, there should be an <strong>Octopus function</strong> administrating all these function calls, which in itself is a monster.</li>\n<li>State being pin-balled among imperative control statements, function calls and try-catches, is a horror show, when trying to reason-out the code flow or debug it.\n<img src=\"/4be98392f72a3f763656f5163b72102e/octopus.gif\" alt=\"octopus\"></li>\n<li>In our problem, it is even trying to handle the coupling between Validation method and Validation failure, through a <code class=\"language-text\">badEggFailureBucketMap</code>. That surely is not its responsibility. The Validation method should be responsible to communicate its corresponding validation failure to the orchestrator.</li>\n</ul>\n<h3 id=\"Imperative-Responsibility\" style=\"position:relative;\">Imperative Responsibility<a href=\"#Imperative-Responsibility\" aria-label=\"Imperative Responsibility permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>Let‚Äôs take a break from our Monster-Validation-Octopus and look at this simple function, which is just trying to append all last-names from a List of Names with <code class=\"language-text\">&amp;</code>, with a lot of do-this-do-that imperative administration. It might be clear to the computer, but not very intuitive to another developer (or the same dev after sometime).</li>\n</ul>\n<div class=\"gatsby-code-title\">ImperativeLastName.java</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">concatLastNames</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> team<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> output <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">var</span> isFirst <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> teamMemberName <span class=\"token operator\">:</span> team<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Concern-1: Looping through the list</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>teamMemberName <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Catch-1: Deal with nulls</span></span><span class=\"gatsby-highlight-code-line\">      teamMemberName <span class=\"token operator\">=</span> teamMemberName<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Catch-2: Deal with only white space names</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>teamMemberName<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Catch-3: Deal with empty names</span></span>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isFirst<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Catch-4: Should not prepend delimiter for first entry.</span>\n          output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>DELIMITER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">var</span> lastName <span class=\"token operator\">=</span> <span class=\"token function\">extractLastName</span><span class=\"token punctuation\">(</span>teamMemberName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Concern-2: Extracting last name</span></span>        output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Concern-3: Aggregating the results with the delimiter.</span>\n        isFirst <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">extractLastName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fullName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> fullName<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>fullName<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>Imagine how complicated it becomes, if we require more conditions and exception handling.</li>\n<li>In the age of Java 8, I can say this developer is trying too hard, using low-level stuff like dry if-else and for-each.</li>\n<li>He is taking too much of control over iterating and filtering stuff, and as Uncle Ben says, <strong>With great Power comes great Responsibility</strong>.\n<img src=\"/0330150f223c727a4dd239be30d2b628/uncle-ben.gif\" alt=\"uncle-ben\"></li>\n<li>You sure don‚Äôt have to take this responsibility. Pass that to the Collections library itself, they know how to iterate and filter and much more. Just pass them the <strong>Criteria</strong>.</li>\n<li>If you get too serious into functional programming, you shall think twice every-time before writing any for-loop or if-else condition. (But don‚Äôt take it too serious üòâ, for-loops are good for small iterations).</li>\n</ul>\n<h3 id=\"Behead-the-Octopus-Lego-the-Focussed-Functions\" style=\"position:relative;\">Behead the Octopus, Lego the Focussed Functions<a href=\"#Behead-the-Octopus-Lego-the-Focussed-Functions\" aria-label=\"Behead the Octopus Lego the Focussed Functions permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>State should always march <strong>Unidirectional</strong>, like an unstoppable army of zombies.\n<img src=\"/afe28baa4dbaeed6da2a8d14a54fe3d2/zombies.gif\" alt=\"zombies\"></li>\n<li>I ain‚Äôt copying this from the <a href=\"https://facebook.github.io/flux/\" target=\"_blank\" rel=\"noopener noreferrer\">Flux</a> guys at Facebook. This is seen ever since there are pipes in Unix, since 1978.</li>\n<li>Simply, make the shit of a function be the food for another.</li>\n<li>To do that, above Imperative Program can be transformed into <strong>Declarative Style</strong> like this:</li>\n</ul>\n<div class=\"gatsby-code-title\">FunctionalLastName.java</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> GET_LAST_NAME <span class=\"token operator\">=</span>\n  fullName <span class=\"token operator\">-></span> fullName<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>fullName<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">lastNameCollectorWithStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">var</span> expected <span class=\"token operator\">=</span> TEAM<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token operator\">::</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Catch-11: Deal with nulls.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">trim</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Catch-12: Deal with only white space strings.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function\">not</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Catch-13: Deal with empty strings.</span></span>    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>GET_LAST_NAME<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span>DELIMITER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>This might not be familiar to many Java devs, but sure is more readable, even for someone unfamiliar with code, if feels like reading an English sentence. <strong>Familiarity is different from Readability</strong>.</li>\n<li><strong>Separation of Concerns</strong> made it clear and concise, like an SQL Query.</li>\n<li>This way functions can be fitted into each other to create a smooth pipeline, aiding unidirectional flow of data.</li>\n<li>This is flexible to restructure, and it‚Äôs easy to hire and fire these criterion functions, without thinking too much.\n<img src=\"/480810a8295bb5869bccc7879df6902f/lego.gif\" alt=\"lego\"></li>\n</ul>\n<h3 id=\"Flow-Heterogeneous-data-Fluently\" style=\"position:relative;\">Flow Heterogeneous data Fluently<a href=\"#Flow-Heterogeneous-data-Fluently\" aria-label=\"Flow Heterogeneous data Fluently permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>Now that we saw Functional Lego, can we do the same with our validations functions? Can we nicely pipe them and flow our eggs stream through it and expect to see both good eggs and bad eggs at the end of our pipeline?</li>\n<li>Streamlining of functions is easier said than done when dealing with Heterogeneous data.</li>\n<li>Unidirectional flow demands uniform data structure for the entire stream-per-step. A pipeline can have different types of streams, but how can a stream/collection have different data types?\n<img src=\"/f4dbd1fb2acea6a45a1d4064b6b7e7ea/color-eggs.gif\" alt=\"color-eggs\"></li>\n<li>Flowing through a function, Data inside a stream/collection of one type can metamorphose into various life forms of all shapes and sizes as it comes out, may be due to invalidations or exceptions or some eggs hatch into chickens or dinosaurs or your database just gets struck by a lightning.</li>\n<li>The dichotomy of Data metamorphism with Stream Uniformity can be seen in our current problem.</li>\n<li>We have two categories of data, Good eggs and Bad eggs. But who needs bad eggs, what you really interested are, the Validation failures for bad eggs.</li>\n<li>So two categories here, demand two totally disparate data types (Good-eggs), (Validation-failures due to (invalidations) and (exceptions)) to co-exist, inside a stream, as they flow through the pipeline. Check-out these cases in this pseudo code:</li>\n</ul>\n<div class=\"gatsby-code-title\">PseudoValidator.java</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Egg</span><span class=\"token punctuation\">></span></span> validatedEggStream <span class=\"token operator\">=</span> eggs<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>egg <span class=\"token operator\">-></span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>egg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token operator\">&lt;</span>what<span class=\"token operator\">-</span>should<span class=\"token operator\">-</span><span class=\"token class-name\">I</span><span class=\"token operator\">-</span><span class=\"token keyword\">return</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Egg</span> egg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">boolean</span> isValid <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>egg<span class=\"token punctuation\">.</span><span class=\"token function\">isRotten</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>egg<span class=\"token punctuation\">.</span><span class=\"token function\">getYellow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">makeHalfBoiledOmelette</span><span class=\"token punctuation\">(</span>egg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// My Fav Omlet</span>\n        isValid <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">EggException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token class-name\">How</span><span class=\"token operator\">-</span><span class=\"token keyword\">to</span><span class=\"token operator\">-</span><span class=\"token keyword\">return</span><span class=\"token operator\">-</span>exception<span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// case 1 exception</span></span>      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>egg<span class=\"token punctuation\">.</span><span class=\"token function\">getEggWhite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      eggWhiteDefect <span class=\"token operator\">=</span> <span class=\"token function\">examineEggWhite</span><span class=\"token punctuation\">(</span>egg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// case 2 inter-dependent validation fails</span></span>      isValid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>eggWhiteDefect <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>not<span class=\"token operator\">-</span>an<span class=\"token operator\">-</span>egg<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// case 3</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> isValid <span class=\"token operator\">?</span> egg <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token class-name\">How</span><span class=\"token operator\">-</span><span class=\"token keyword\">to</span><span class=\"token operator\">-</span><span class=\"token keyword\">return</span><span class=\"token operator\">-</span>defect<span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//case 4</span></span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>This poor function is not sure how to communicate back to its caller with multiple possibilities. Unfortunately, Strongly-typed languages are strict about return type.</li>\n<li>Had it been a Dynamically-typed-language like Javascript, this is not a problem at all. This is one of the reasons why Dynamically typed languages got popular for. Of-course, that makes them very difficult to debug. It‚Äôs difficult to build even a proper IDE around them.</li>\n<li>A dirty solution in a Strongly-typed-language like Java can be, have some Enum <code class=\"language-text\">ValidationFailureType</code> as the return type which has all failure types listed, and in all these cases just return that specific failure accordingly.</li>\n<li>In valid case, you need to return something like <code class=\"language-text\">ValidationFailureType.NONE</code>. But, that means you can‚Äôt pipe this function, with other validation functions (without the octopus orchestrator), as the valid egg is now lost in the oblivion of if-else labyrinth.</li>\n<li>If you return a <code class=\"language-text\">null</code> in valid case, you know what happens if caller doesn‚Äôt know about that. A blast of NPE!</li>\n<li><strong>Data Containerization</strong> solves this.</li>\n<li>Ship your heterogeneous data inside these containers. Not those plain-old-java-wrappers, but <strong>Containers</strong>.</li>\n</ul>\n<p>Let‚Äôs take a fork here and visit the Monad-Land to understand Containerization.</p>\n<h4 id=\"Functors\" style=\"position:relative;\">Functors<a href=\"#Functors\" aria-label=\"Functors permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li>Ya, data container is too simple to be intimidating, and so they named them <strong>Functors</strong>.</li>\n<li>They are just simple objects that implement <code class=\"language-text\">map</code>.</li>\n<li>Functor contains a value <code class=\"language-text\">x</code> of some type, and let you operate on that value by passing a first-class function <code class=\"language-text\">f</code> through <code class=\"language-text\">map</code>, that returns you a new functor containing result value <code class=\"language-text\">f(x)</code>. (This is Functional English üòã).</li>\n<li>If that‚Äôs not clear, this code snippet should clarify it:</li>\n</ul>\n<div class=\"gatsby-code-title\">Functor.java</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Functor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Functor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Functor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> mapperFunction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Functor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>mapperFunction<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Functor wrapping f(x)</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"The-Siblings---code-classlanguage-textmapcode-code-classlanguage-textflatMapcode\" style=\"position:relative;\">The Siblings - <code class=\"language-text\">map()</code>, <code class=\"language-text\">flatMap()</code><a href=\"#The-Siblings---code-classlanguage-textmapcode-code-classlanguage-textflatMapcode\" aria-label=\"The Siblings   code classlanguage textmapcode code classlanguage textflatMapcode permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><img src=\"/1f8324cbd216b939e354e63cec1ac228/minions.gif\" alt=\"minions\"></p>\n<ul>\n<li>Both <code class=\"language-text\">map()</code> and <code class=\"language-text\">flatMap()</code> are Higher-Order functions, which take first-class functions as parameters.</li>\n<li><code class=\"language-text\">map</code> applies the mapper-function on wrapped value and returns a new Functor instance, wrapping the result value. Say, if the return value of the mapper-function is a <code class=\"language-text\">Functor&lt;T&gt;</code>, then the return value of <code class=\"language-text\">map</code> ends up being <code class=\"language-text\">Functor&lt;Functor&lt;T&gt;&gt;</code></li>\n<li><code class=\"language-text\">flatMap</code> applies the mapper-function and simply returns its result without wrapping in another Functor.</li>\n<li>So, the difference is, the return value of the mapper-function should be a <code class=\"language-text\">Functor&lt;T&gt;</code> and <code class=\"language-text\">flatMap</code> returns it as is.</li>\n<li>But why am I speaking about <code class=\"language-text\">flatMap()</code> ?</li>\n</ul>\n<h4 id=\"The-Monad\" style=\"position:relative;\">The Monad<a href=\"#The-Monad\" aria-label=\"The Monad permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li>Finally! the Dawn of Monad (Introducing the title lead with a BGM)\n<img src=\"/5ce79cacab36ae052a3cd9d98c8f78e5/dawn-of-justice.gif\" alt=\"dawn-of-justice\"></li>\n</ul>\n<blockquote>\n<p>The curse of the monad is that once you get the epiphany, once you understand - ‚Äúoh that‚Äôs what it is‚Äù - you lose the ability to explain it to anybody.\n- Douglas Crockford</p>\n</blockquote>\n<ul>\n<li>Douglas is right in a way, but here is what my understanding (although not an epiphany), in its most simplistic form:</li>\n</ul>\n<blockquote>\n<p>Monads are Functors, which also implement <code class=\"language-text\">flatmap</code> and abide by some Monad laws.</p>\n</blockquote>\n<ul>\n<li>Monad laws are simple math-rules, like the associativity, Left identity and Right identity. More on these later.</li>\n<li>Of-course, there is no such constraint that Monads should ONLY implement <code class=\"language-text\">flatMap</code>.</li>\n<li>This is how the simplest Monad looks. (Observe the difference in mapper functions passed to <code class=\"language-text\">map</code> and <code class=\"language-text\">flatMap</code>)</li>\n</ul>\n<div class=\"gatsby-code-title\">Monad.java</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Monad</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Monad</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Monad</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> mapperFunction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Monad</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>mapping<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Monad</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Monad</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> mapperFunction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> mapperFunction<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>\n<p>Monad‚Äôs anatomy needs 3 basic organs:</p>\n<ul>\n<li>A Parameterized type: <code class=\"language-text\">Monad&lt;T&gt;</code></li>\n<li>A Unit function: <code class=\"language-text\">new Monad()</code></li>\n<li>A Bind function: <code class=\"language-text\">flatMap()</code></li>\n</ul>\n</li>\n</ul>\n<p>Enough of Theory! how can this help the problem at hand?</p>\n<h3 id=\"Problemscode-classlanguage-textsplitstreamcodebrcode-classlanguage-textmapthissolveproblemcode\" style=\"position:relative;\">Problems<code class=\"language-text\">.split().stream()</code><br/><code class=\"language-text\">.map(this::solve(problem))</code><a href=\"#Problemscode-classlanguage-textsplitstreamcodebrcode-classlanguage-textmapthissolveproblemcode\" aria-label=\"Problemscode classlanguage textsplitstreamcodebrcode classlanguage textmapthissolveproblemcode permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>You would have got a hint by now. Monads are the data containers you need. The problem is solved by one container-type (which can be the unit for uniformity through-out the pipeline) and a variable-value-type contained inside (which can be morphed from type to type).</li>\n<li>Now every function can speak the same language, by passing around these Monad boxes and operate on them with functions, without worrying much about what it contains. Uniform boxes with Heterogenous data.</li>\n<li>Like, validation functions can ship either a goodEgg or a validation failure to the orchestration function by wrapping them in a Monad box, and it doesn‚Äôt even care what‚Äôs in the box.</li>\n<li>Now, Orchestrator only has one job to do, just pump the data inside the pipeline ahead to the next validation function.\n<img src=\"/31d054147c2d434c1168d75e79fae00b/wow.gif\" alt=\"wow\"></li>\n<li>Now, both the Parameter type and Algorithm are cleanly separate, and algo can be reused on multiple parameter types, which solves our last problem.</li>\n</ul>\n<h3 id=\"Post-credits-scene-Making-of-a-Monad\" style=\"position:relative;\">Post credits scene: Making of a Monad<a href=\"#Post-credits-scene-Making-of-a-Monad\" aria-label=\"Post credits scene Making of a Monad permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Now you see it? Now you don‚Äôt?\n<img src=\"/2b2e69d9edc48c7d5da92f5031eb048a/now-you-see-me.gif\" alt=\"now-you-see-me\"></p>\n<ul>\n<li>This blog post is already too long and so I left the part on how these problems are solved with Monads for the sequel.</li>\n<li>Chances are you already worked with lot of Monads, if you started adapting Java 8 or above.</li>\n<li>Java guys took 3 years between Java 7 and 8 and packed Java 8 with bunch of functional toys, and alongside came some Monads like Optional, Stream etc.,.</li>\n</ul>\n<p>Wanna see how the entire pipeline works seamlessly with the Monad, even with some exceptional eggs blown in-between?\nThe sequel brings-in some new names like Immutability, Parallelism, Memoization and X-Men evolution (Just kidding!)</p>\n<p>Let‚Äôs cook a Monad.</p>\n<p>Well, I couldn‚Äôt find time to prepare a pint-2, but this talk I gave covers everything about what is discussed till now and further:</p>\n<p><div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 71.42857142857143%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <div class=\"embedVideo-container\"> <iframe src=\"https://www.youtube.com/embed/l9jJ7m7_VpM?rel=0\" class=\"embedVideo-iframe\" style=\"border:0; position: absolute; top: 0; left: 0; width: 100%; height: 100%; \" allowfullscreen></iframe> </div> </div></p>","timeToRead":15,"fields":{"tagSlugs":["/tags/java-8/","/tags/monads/"],"slug":"/posts/monads-for-drunken-coders-pint-1/"},"frontmatter":{"title":"Monads for Drunken Coders, Pint-1üç∫","tags":["Java 8","Monads"],"date":"2018-12-09T00:00:00.000Z","description":"A chilled introduction to the Dreaded Monad, using Java 8","cover":{"childImageSharp":{"original":{"src":"/static/cover-d16bf5a097260417b7aecf88c4d36d14.jpg"}}}}}},"pageContext":{"slug":"/posts/monads-for-drunken-coders-pint-1/","previous":{"fields":{"slug":"/posts/functional-terminology/"},"frontmatter":{"title":"Functional Terminology ‚®ê","tags":["Functional Programming"],"layout":"post","category":"Functional Programming"}},"next":{"fields":{"slug":"/posts/top-with-ad-hoc-polymorphism/"},"frontmatter":{"title":"Template-Oriented-Programming (TOP) with Ad-Hoc Polymorphism","tags":["Kotlin","Arrow"],"layout":"post","category":"Design"}}}}}