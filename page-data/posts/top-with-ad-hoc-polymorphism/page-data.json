{"componentChunkName":"component---src-templates-post-template-jsx","path":"/posts/top-with-ad-hoc-polymorphism/","result":{"data":{"site":{"siteMetadata":{"title":"It's All Over full-stack","subtitle":"So excited about this Craft that, I can't keep myself from blogging about it.","copyright":"© All rights reserved.","declaration":"I built this blog with React.js","author":{"name":"Gopal S Akshintala","twitter":"http://bit.ly/agstwtr","github":"http://bit.ly/agsgithub","linkedin":"http://bit.ly/agslnkd","telegram":"https://t.me/gopalakshintala","email":"gopal.akshintala@gmail.com","stackoverflow":"http://bit.ly/agsso","aboutme":"/about-me"},"disqusShortname":"gopal","url":"https://github.com/overfullstack/overfullstack.github.io"}},"markdownRemark":{"id":"337b887a-006f-52e4-8601-78245f20d778","html":"<h2 id=\"Abstract\" style=\"position:relative;\">Abstract<a href=\"#Abstract\" aria-label=\"Abstract permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>With the advent of <strong>B2C products</strong>, the same product can have use-cases (or Services) with varied traffic and scaling needs. The trend is to split them into Microservices built on different paradigms/tech-stacks (blocking or non-blocking [1]). In domains like Payments, many such heterogeneous services are parallel as well (having most of the domain business logic in common e.g., Purchases and Refunds). Although the business logic is common, it cannot be reused among these parallel services, as the code is written specifically to that paradigm.</p>\n<p>This paper attempts to overcome this challenge and make such common logic <strong>reusable</strong>, turning the <code class=\"language-text\">Monomorphic</code> common code to <code class=\"language-text\">Polymorphic</code> templates, using an innovative design technique called <code class=\"language-text\">Ad-hoc Polymorphism</code>.</p>\n<h2 id=\"Things-to-know-before-reading\" style=\"position:relative;\">Things to know before reading<a href=\"#Things-to-know-before-reading\" aria-label=\"Things to know before reading permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>A good understanding of generics and exposure to blocking/non-blocking paradigms. This is language-agnostic, but I will use <strong>Kotlin</strong> (a modern JVM language) for demonstration along with <strong><a href=\"http://arrow-kt.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Arrow</a></strong> (An upcoming Functional Programming library for Kotlin).</p>\n<h2 id=\"The-Case-for-Heterogeneous-services\" style=\"position:relative;\">The Case for Heterogeneous services<a href=\"#The-Case-for-Heterogeneous-services\" aria-label=\"The Case for Heterogeneous services permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Taking the example from the Payments domain, Purchases tend to have high traffic (especially during Black Fridays, Flash sales, etc), and it’s common to model them with an Asynchronous non-blocking paradigm like Reactive Stack [2]. Whereas, Refunds tend to have relatively low traffic and its scaling needs can easily be catered with a simple blocking stack.</p>\n<h2 id=\"Problem-of-Re-usability-among-Heterogeneous-services\" style=\"position:relative;\">Problem of Re-usability among Heterogeneous services<a href=\"#Problem-of-Re-usability-among-Heterogeneous-services\" aria-label=\"Problem of Re usability among Heterogeneous services permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Despite being heterogenous, these services have a lot of commonality in their Domain logic - like Authentication, Request-Validation, Idempotency, external integrations (like gateway interaction), logging, etc. In the case of homogeneous services, this reusable code can be placed in a common module and be added as a dependency in all services. But in heterogeneous case, blocking code can’t be reused for non-blocking service or vice-versa, because:</p>\n<ul>\n<li>Their styles of programming are different (Functional in non-blocking vs Imperative in blocking).</li>\n<li>Non-Blocking code is filled with callbacks while the blocking code is sequential.</li>\n<li>The DB APIs are different, as non-blocking services use non-blocking DBs.</li>\n<li>Each paradigm has specific <code class=\"language-text\">Effect (or Container)</code> it operates on, e.g - Non-blocking paradigms operate on reactive containers like <code class=\"language-text\">Mono&lt;A&gt;/Flux&lt;A&gt; or Observable&lt;A&gt;</code>, contrary to blocking paradigms which may (or need not) use simple containers like <code class=\"language-text\">Option/Either</code>.</li>\n</ul>\n<p>Due to this problem, the code is rewritten or duplicated for common use-cases, which eventually leads to maintenance overhead. This also applies to services that have plans to migrate to async non-blocking as their business increases, in which case, the entire service needs to be rewritten although the domain business logic remains the same.</p>\n<h2 id=\"Monomorphic-to-Polymorphic\" style=\"position:relative;\">Monomorphic to Polymorphic<a href=\"#Monomorphic-to-Polymorphic\" aria-label=\"Monomorphic to Polymorphic permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Monomorphic code is written specifically to the <code class=\"language-text\">Effect (or Container)</code>. If the Effect is abstracted out as a <em>Generic</em>, the domain logic turns reusable for any type of service, and it can be called <strong>Polymorphic</strong>. But to achieve that, we need to understand concepts like <strong>Typeclasses</strong> and <strong>Higher-Kinds</strong>.</p>\n<p>But let’s briefly touch upon types of Polymorphism:</p>\n<h3 id=\"Subtype-Polymorphism-Inheritance-3\" style=\"position:relative;\">Subtype Polymorphism (Inheritance) [3]<a href=\"#Subtype-Polymorphism-Inheritance-3\" aria-label=\"Subtype Polymorphism Inheritance 3 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>This is the most common OOP pattern, where we achieve polymorphism through inheritance. An interface is implemented by multiple classes (called subtypes).</p>\n<h3 id=\"Parametric-Polymorphism-Generics-4\" style=\"position:relative;\">Parametric Polymorphism (Generics) [4]<a href=\"#Parametric-Polymorphism-Generics-4\" aria-label=\"Parametric Polymorphism Generics 4 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Simply put, this style uses generics (like <code class=\"language-text\">&lt;T&gt;</code>), to generate templates of reusable code. This works when the logic doesn’t depend on any type-specific behavior. e.g., <code class=\"language-text\">Array&lt;T&gt;</code>.</p>\n<h3 id=\"Ad-hoc-Polymorphism-Type-Classes-5\" style=\"position:relative;\">Ad-hoc Polymorphism (Type Classes) [5]<a href=\"#Ad-hoc-Polymorphism-Type-Classes-5\" aria-label=\"Ad hoc Polymorphism Type Classes 5 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>The term <strong>Ad-hoc polymorphism</strong> refers to polymorphic functions that can be applied to arguments of different types, but that behave differently depending on the type of the argument to which they are applied. To achieve this, we use <strong>Typeclasses</strong>. <code class=\"language-text\">Comparator&lt;T&gt;</code> in JDK is a simple typeclass. Typeclasses are just generic interfaces that are parametric on a Type <code class=\"language-text\">T</code>.</p>\n<h2 id=\"Typeclass\" style=\"position:relative;\">Typeclass<a href=\"#Typeclass\" aria-label=\"Typeclass permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>It’s a generic interface that is parametric on a Type <code class=\"language-text\">T</code>. <code class=\"language-text\">Comparator&lt;T&gt;</code> in JDK is a simple typeclass. <code class=\"language-text\">Comparator&lt;T&gt;</code> has one operation <code class=\"language-text\">fun compare(a: T?, b: T?): Int</code>. Now for a type <code class=\"language-text\">Apple</code> to be a member of this typeclass, prepare a concrete <code class=\"language-text\">Comparator&lt;Apple&gt;</code> implementing its <code class=\"language-text\">fun compare(a: Apple?, b: Apple?): Int</code>. That’s it! Now the JDK’s <code class=\"language-text\">Collections.sort()</code> can make use of this concrete implementation to compare apples.</p>\n<p>A type class <code class=\"language-text\">C</code> defines some behavior in the form of operations that must be supported by a type <code class=\"language-text\">T</code> for it to be a member of type class <code class=\"language-text\">C</code>. A type can be a member of a type class simply by providing implementations of the operations the type must support. Once <code class=\"language-text\">T</code> is made a member of the type class <code class=\"language-text\">C</code>, functions that have constrained one or more of their parameters to be members of <code class=\"language-text\">C</code> can be called with arguments of type <code class=\"language-text\">T</code>.\nThe code that relies on type classes is open for extension. Just like how <code class=\"language-text\">Comparator&lt;T&gt;</code> can be extended to compare any type.</p>\n<h3 id=\"Need-for-Higher-Kinded-Types-6\" style=\"position:relative;\">Need for Higher-Kinded Types [6]<a href=\"#Need-for-Higher-Kinded-Types-6\" aria-label=\"Need for Higher Kinded Types 6 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Effects are of the form <code class=\"language-text\">F&lt;A&gt;</code> (e.g. <code class=\"language-text\">Mono&lt;A&gt;</code>), where <code class=\"language-text\">F</code> is the <em>Effect (or Container)</em> type and <code class=\"language-text\">A</code> is the value type. The problem is, most JVM languages only support parametricity on the value type <code class=\"language-text\">A</code> but not on the Container type <code class=\"language-text\">F</code>. So, we need <strong>Higher-Kinded Types</strong>, to represent <code class=\"language-text\">F&lt;A&gt;</code> as <code class=\"language-text\">Kind&lt;F, A&gt;</code>.</p>\n<h2 id=\"Ad-hoc-Polymorphism-by-example\" style=\"position:relative;\">Ad-hoc Polymorphism by example<a href=\"#Ad-hoc-Polymorphism-by-example\" aria-label=\"Ad hoc Polymorphism by example permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Now that we have both the tools (typeclasses and Higher-Kinded Types), let’s make a polymorphic template for our reusable domain logic. The samples used in the rest of this post can be seen in action in a fully working POC - <a href=\"https://github.com/overfullstack/ad-hoc-poly\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>. This has 3 modules:</p>\n<ul>\n<li><code class=\"language-text\">kofu-mvc-validation</code> - Blocking Service built with <code class=\"language-text\">Spring-WebMVC</code> [8]</li>\n<li><code class=\"language-text\">kofu-reactive-validation</code> - Reactive Service built with <code class=\"language-text\">Spring-WebFlux</code> [7]</li>\n<li><code class=\"language-text\">validation-templates</code> - Common module for both the services, holding templates.\nWe shall take-up the <strong><em>user validate-and-upsert</em></strong> as our example use-case, where a request to upsert a user is <strong><em>validated</em></strong>, followed by <strong><em>insert or update</em></strong> based on the user’s existence in the DB.</li>\n</ul>\n<p><code class=\"language-text\">Spring-WebFlux</code> works with <code class=\"language-text\">Mono&lt;A&gt;/Flux&lt;A&gt;</code> while <code class=\"language-text\">Spring-WebMVC</code> doesn’t. As discussed before, the difference in paradigms prevents reusability of common code. Observe, the differences in <code class=\"language-text\">upsert</code> functions in both the services - <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/6b151be233e45e45632fd38518f9133a267e843d/kofu-mvc-validation/src/main/kotlin/com/sample/Handlers.kt#L24-L43\" target=\"_blank\" rel=\"noopener noreferrer\">WebMVC Ref</a> and <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/6b151be233e45e45632fd38518f9133a267e843d/kofu-reactive-validation/src/main/kotlin/com/sample/Handlers.kt#L26-L52\" target=\"_blank\" rel=\"noopener noreferrer\">WebFlux Ref</a>.</p>\n<p>The goal is to abstract this use-case domain logic into a generic reusable template. We shall achieve it by creating some typeclasses and making use of some typeclasses from the Arrow library. These heterogeneous services can inflate these templates by supplying concrete instances of those typeclasses. Let’s get started!</p>\n<h3 id=\"The-Repo-typeclass\" style=\"position:relative;\">The Repo typeclass<a href=\"#The-Repo-typeclass\" aria-label=\"The Repo typeclass permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Let’s abstract the DB behavior in both these stacks to a generic typeclass interface, <code class=\"language-text\">Repo&lt;F&gt;</code>, where <code class=\"language-text\">F</code> represents the Effect-type on which the DB works in their respective stacks.</p>\n<div class=\"gatsby-code-title\">Repo.kt</div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Repo<span class=\"token operator\">&lt;</span>F<span class=\"token operator\">></span> <span class=\"token operator\">:</span> Async<span class=\"token operator\">&lt;</span>F<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> Unit<span class=\"token operator\">></span>\n    <span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> Unit<span class=\"token operator\">></span>\n    <span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">doesUserLoginExist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> Boolean<span class=\"token operator\">></span>\n    <span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">isUserCityValid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> Boolean<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>These operations has return type of <code class=\"language-text\">Kind&lt;F, A&gt;</code>(=<code class=\"language-text\">F&lt;Boolean&gt;</code>), which is generic and agnostic of <code class=\"language-text\">Effect</code>.</li>\n<li>Our services implement this typeclass with their respective effect types. The service repository functions are mapped to <code class=\"language-text\">Repo</code> operations, using <code class=\"language-text\">IO</code> and <code class=\"language-text\">MonoK</code> from Arrow Library - <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/e1a7586ed82765830cef03f3c797095ccb0a716e/kofu-mvc-validation/src/main/kotlin/com/sample/Configurations.kt#L38-L41\" target=\"_blank\" rel=\"noopener noreferrer\">WebMVC Ref</a> and <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/e1a7586ed82765830cef03f3c797095ccb0a716e/kofu-reactive-validation/src/main/kotlin/com/sample/Configurations.kt#L29-L32\" target=\"_blank\" rel=\"noopener noreferrer\">WebFlux Ref</a>.</li>\n</ul>\n<h2 id=\"Templates-using-Typeclasses\" style=\"position:relative;\">Templates using Typeclasses<a href=\"#Templates-using-Typeclasses\" aria-label=\"Templates using Typeclasses permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>Now we can weave our business-logic into generic templates depending on the generic operations of the typeclass <code class=\"language-text\">Repo&lt;F&gt;</code>.</li>\n<li>Templates are generic functions and they depend on Typeclasses. This dependency can be achieved by passing typeclass as a function parameter or declaring the template functions as extensions to a typeclass. I used the latter in my POC - <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/e1a7586ed82765830cef03f3c797095ccb0a716e/validation-fx/src/main/kotlin/com/validation/rules/UserRules.kt\" target=\"_blank\" rel=\"noopener noreferrer\">Ref</a></li>\n<li>Typeclass is the bridge between services and templates. Services supply concrete implementation of the typeclass and using those concrete instances, they can consume all the templates for free! <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/6b151be233e45e45632fd38518f9133a267e843d/kofu-mvc-validation/src/main/kotlin/com/sample/HandlersX.kt#L22-L30\" target=\"_blank\" rel=\"noopener noreferrer\">WebMVC Ref</a> and <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/6b151be233e45e45632fd38518f9133a267e843d/kofu-reactive-validation/src/main/kotlin/com/sample/HandlersX.kt#L20-L27\" target=\"_blank\" rel=\"noopener noreferrer\">WebFlux Ref</a></li>\n<li>Moreover, the typeclass is completely extendable to support more operations, in turn to extend our template base.</li>\n</ul>\n<h2 id=\"Outcomes-and-Conclusions\" style=\"position:relative;\">Outcomes and Conclusions<a href=\"#Outcomes-and-Conclusions\" aria-label=\"Outcomes and Conclusions permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>We achieved reusable domain logic using Ad-hoc Polymorphism, abstracting out the effect using typeclasses and Higher-Kinded Types, migrating our Monomorphic code to Polymorphic. This is very powerful to model B2C-services and to-be-scalable services. This <strong>zeros-down the cost and effort</strong> to rewrite and maintain common business logic across all parallel services and future service migrations, speeding-up the feature development.</p>\n<h2 id=\"References\" style=\"position:relative;\">References<a href=\"#References\" aria-label=\"References permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://community.oracle.com/docs/DOC-918126\" target=\"_blank\" rel=\"noopener noreferrer\">https://community.oracle.com/docs/DOC-918126</a></li>\n<li><a href=\"https://www.reactivemanifesto.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.reactivemanifesto.org/</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Subtyping\" target=\"_blank\" rel=\"noopener noreferrer\">https://en.wikipedia.org/wiki/Subtyping</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Parametric_polymorphism\" target=\"_blank\" rel=\"noopener noreferrer\">https://en.wikipedia.org/wiki/Parametric_polymorphism</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Ad_hoc_polymorphism\" target=\"_blank\" rel=\"noopener noreferrer\">https://en.wikipedia.org/wiki/Ad<em>hoc</em>polymorphism</a></li>\n<li><a href=\"https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymorphism.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymorphism.pdf</a></li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html</a></li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web</a></li>\n<li><a href=\"https://danielwestheide.com/blog/the-neophytes-guide-to-scala-part-12-type-classes/\" target=\"_blank\" rel=\"noopener noreferrer\">https://danielwestheide.com/blog/the-neophytes-guide-to-scala-part-12-type-classes/</a></li>\n</ol>","timeToRead":9,"fields":{"tagSlugs":["/tags/kotlin/","/tags/arrow/"],"slug":"/posts/top-with-ad-hoc-polymorphism/"},"frontmatter":{"title":"Template-Oriented-Programming (TOP) with Ad-Hoc Polymorphism","tags":["Kotlin","Arrow"],"date":"2020-03-06T00:00:00.000Z","description":"Top-up the Polymorphism","cover":{"childImageSharp":{"original":{"src":"/static/cover-9a40c4ec97d54bd9903dfb33033e2724.jpeg"}}}}}},"pageContext":{"slug":"/posts/top-with-ad-hoc-polymorphism/","previous":{"fields":{"slug":"/posts/monads-for-drunken-coders-pint-1/"},"frontmatter":{"title":"Monads for Drunken Coders, Pint-1🍺","tags":["Java 8","Monads"],"layout":"post","category":"Functional Programming"}},"next":null}}}