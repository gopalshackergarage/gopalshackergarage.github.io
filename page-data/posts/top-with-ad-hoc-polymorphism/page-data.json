{"componentChunkName":"component---src-templates-post-template-jsx","path":"/posts/top-with-ad-hoc-polymorphism/","result":{"data":{"site":{"siteMetadata":{"title":"It's All Over full-stack","subtitle":"So excited about this Craft that, I can't keep myself from blogging about it.","copyright":"© All rights reserved.","declaration":"I built this blog with React.js","author":{"name":"Gopal S Akshintala","twitter":"http://bit.ly/agstwtr","github":"http://bit.ly/agsgithub","linkedin":"http://bit.ly/agslnkd","telegram":"https://t.me/gopalakshintala","email":"gopal.akshintala@gmail.com","stackoverflow":"http://bit.ly/agsso","aboutme":"/about-me"},"disqusShortname":"gopal","url":"https://github.com/overfullstack/overfullstack.github.io"}},"markdownRemark":{"id":"337b887a-006f-52e4-8601-78245f20d778","html":"<h2 id=\"Abstract\" style=\"position:relative;\">Abstract<a href=\"#Abstract\" aria-label=\"Abstract permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>This paper is for Agile <strong>B2C product development</strong> teams, both in enterprises and startups, looking for ways to accelerate their feature development cycle.</p>\n<p>The trend in B2C world is to chop the use-cases with varied traffic-needs into <strong>Microservices</strong> managed by independent Scrum teams. These teams develop using Heterogeneous frameworks and tech-stacks, suitable for the traffic needs of their services. E.g., from Payments Domain - Purchases (high traffic Reactive service) and Refunds (low traffic blocking service) [1].</p>\n<p>Despite being heterogenous, these services have many commonalities in their Domain logic - such as Authentication, Request-Validation, Idempotency, external integrations, logging. But the code for common logic, cannot be reused due to the <em>heterogeneity</em>. This leads to scrum teams duplicating the same logic in all the services, or a service needs to be rewritten entirely, when migrated to a different paradigm.</p>\n<p>I shall demonstrate (with a working POC) how to make such common logic <strong>reusable</strong>, turning the <code class=\"language-text\">Monomorphic</code> code into <code class=\"language-text\">Polymorphic</code> reusable templates.</p>\n<h2 id=\"Things-to-know-before-reading\" style=\"position:relative;\">Things to know before reading<a href=\"#Things-to-know-before-reading\" aria-label=\"Things to know before reading permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Technical Level: Interesting to all, approachable for basic and up. Any Functional Programming enthusiast will love it.</p>\n<p>This talk targets basic to intermediate senior developers with a good understanding of <code class=\"language-text\">generics</code> and some exposure/interest towards blocking and non-blocking/reactive paradigms. This talk is language-agnostic, but I use <strong>Kotlin</strong> (a modern JVM language) in combination with <strong><a href=\"http://arrow-kt.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Arrow</a></strong> (A unique open-source library for Kotlin). Kotlin’s syntax is very close Java, and all software design patterns discussed in this talk can be implemented in almost any language. Thanks to the concise syntax of Kotlin [10] and powerful tool-set provided by Arrow, implementing <code class=\"language-text\">Ad-hoc Polymorphism</code> turns more ergonomic. I have used <code class=\"language-text\">Spring-MVC</code>[7] and <code class=\"language-text\">Spring-WebFlux</code>[8] (popular backend frameworks) for demonstration of the POC, but no prior knowledge is required about these frameworks.</p>\n<p>The readers learn about an innovative design technique to create reusable templates called <strong>Ad-hoc Polymorphism</strong>[13], and how is it profitable and reduces the maintenance overhead of rewriting the same business logic across heterogeneous services and service migrations.</p>\n<h2 id=\"Introduction\" style=\"position:relative;\">Introduction<a href=\"#Introduction\" aria-label=\"Introduction permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"The-Case-for-Heterogeneous-services\" style=\"position:relative;\">The Case for Heterogeneous services<a href=\"#The-Case-for-Heterogeneous-services\" aria-label=\"The Case for Heterogeneous services permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Taking the example from the Payments domain, Purchases tend to have high traffic (especially during Black Fridays, Flash sales, etc.), and it’s common to model them with an Asynchronous non-blocking paradigm like a Reactive Stack [2]. Whereas Refunds tend to have relatively low traffic, and a simple blocking stack can easily cater its scaling needs. Such use-cases can be found in many B2C products e.g., Reservations vs. Cancellations.</p>\n<h3 id=\"The-problem-of-Reusability-among-Heterogeneous-services\" style=\"position:relative;\">The problem of Reusability among Heterogeneous services<a href=\"#The-problem-of-Reusability-among-Heterogeneous-services\" aria-label=\"The problem of Reusability among Heterogeneous services permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>In the case of homogeneous services, the common code can be placed in a shared module and be added as a dependency in all services. But in heterogeneous case, blocking code can’t be reused for non-blocking service or vice-versa, because:</p>\n<ul>\n<li>It’s extremely dangerous to mix both paradigms, as it can lead to untraceable performance issues.</li>\n<li>Their styles of programming are different (Functional in non-blocking vs. Imperative in blocking).</li>\n<li>Non-Blocking code is filled with callbacks while the blocking code is sequential.</li>\n<li>The DB APIs are different, as non-blocking services use non-blocking DBs.</li>\n<li>Each paradigm has specific <code class=\"language-text\">Effect</code> it operates on, e.g., Non-blocking paradigms operate on reactive containers like <code class=\"language-text\">Mono&lt;A&gt;/Flux&lt;A&gt; or Observable&lt;A&gt;</code>, contrary to blocking paradigms which may (or need not) use simple Effect types like <code class=\"language-text\">Option/Either</code>.</li>\n</ul>\n<h2 id=\"Monomorphic-to-Polymorphic\" style=\"position:relative;\">Monomorphic to Polymorphic<a href=\"#Monomorphic-to-Polymorphic\" aria-label=\"Monomorphic to Polymorphic permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>If the Effect is abstracted out as a <em>Generic</em>, the domain logic turns reusable for service of any type, and it can be called <strong>Polymorphic</strong>. But to achieve that, we need to understand the concepts - <strong>Higher-Kinds</strong> and <strong>Typeclasses</strong>.</p>\n<h3 id=\"Need-for-Higher-Kinded-Types-6\" style=\"position:relative;\">Need for Higher-Kinded Types [6]<a href=\"#Need-for-Higher-Kinded-Types-6\" aria-label=\"Need for Higher Kinded Types 6 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Effects are of the form <code class=\"language-text\">F&lt;A&gt;</code> (e.g. <code class=\"language-text\">Mono&lt;A&gt;</code>), where <code class=\"language-text\">F</code> is the <em>Effect</em> type and <code class=\"language-text\">A</code> is the value type. The problem is, most JVM languages only support parametricity on the value type <code class=\"language-text\">A</code> but not on the Container type <code class=\"language-text\">F</code>. So, we need <strong>Higher-Kinded Types</strong>, to represent <code class=\"language-text\">F&lt;A&gt;</code> as <code class=\"language-text\">Kind&lt;F, A&gt;</code>.</p>\n<h3 id=\"Need-for-Typeclasses-12\" style=\"position:relative;\">Need for Typeclasses [12]<a href=\"#Need-for-Typeclasses-12\" aria-label=\"Need for Typeclasses 12 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>It’s a generic interface that is parametric on a Type <code class=\"language-text\">T</code>. E.g., <code class=\"language-text\">Comparator&lt;T&gt;</code> in JDK is a simple typeclass. <code class=\"language-text\">Comparator&lt;T&gt;</code> has one operation <code class=\"language-text\">fun compare(a: T?, b: T?): Int</code>. Now for a type <code class=\"language-text\">String</code> to be a member of this typeclass, prepare a concrete <code class=\"language-text\">Comparator&lt;String&gt;</code> implementing its <code class=\"language-text\">fun compare(a: String?, b: String?): Int</code>. That’s it! Now the <code class=\"language-text\">Collections.sort()</code> can make use of this concrete implementation to compare Strings.</p>\n<p>To put our above example into a formal definition - A type class defines some behavior in the form of operations that must be supported by a type. A type can be a member of a type class simply by providing implementations of the operations the type must support.</p>\n<p>This principle can be used to define abstract interfaces like <code class=\"language-text\">Comparator&lt;T&gt;</code> and reusable templates like <code class=\"language-text\">Collections.sort()</code>, whose behavior is polymorphic to the type <code class=\"language-text\">T</code> being sorted. This is <strong>Ad-hoc Polymorphism</strong>.</p>\n<p>The term <strong>Ad-hoc polymorphism</strong> refers to polymorphic functions that can be applied to arguments of different types, but that behave differently depending on the type of the argument to which they are applied.</p>\n<p>The code that relies on type classes is open for extension. Just like how <code class=\"language-text\">Comparator&lt;T&gt;</code> can be extended to compare any type.</p>\n<h2 id=\"Template-Oriented-Programming-with-a-POC\" style=\"position:relative;\">Template-Oriented-Programming with a POC<a href=\"#Template-Oriented-Programming-with-a-POC\" aria-label=\"Template Oriented Programming with a POC permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Now that we have both the tools (Higher-Kinded Types and Typeclasses), let’s make a polymorphic template for our reusable domain logic. The samples used in the rest of this paper can be seen in action in a fully working POC - <a href=\"https://github.com/overfullstack/ad-hoc-poly\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>. It has 3 modules:</p>\n<ul>\n<li><code class=\"language-text\">kofu-mvc-validation</code> - Blocking Service built with <code class=\"language-text\">Spring-WebMVC</code> [7]</li>\n<li><code class=\"language-text\">kofu-reactive-validation</code> - Reactive Service built with <code class=\"language-text\">Spring-WebFlux</code> [8]</li>\n<li><code class=\"language-text\">validation-templates</code> - Shared module for both the services, holding templates.</li>\n</ul>\n<p>We shall take-up the <strong><em>user validate-and-upsert</em></strong> as our example use-case, where a request to upsert a user is <strong><em>validated</em></strong>, followed by <strong><em>insert or update</em></strong> based on the user’s existence in the DB.</p>\n<p><code class=\"language-text\">Spring-WebFlux</code> works with <code class=\"language-text\">Mono&lt;A&gt;/Flux&lt;A&gt;</code> while <code class=\"language-text\">Spring-WebMVC</code> doesn’t. As a proof for reusability problem discussed above, refer the <code class=\"language-text\">upsert</code> function in both the services - <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/b59bd89a7302035e3d72dfb75071a2d05c055443/kofu-mvc-validation/src/main/kotlin/com/sample/Handlers.kt#L24-L43\" target=\"_blank\" rel=\"noopener noreferrer\">WebMVC Ref</a> and <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/b59bd89a7302035e3d72dfb75071a2d05c055443/kofu-reactive-validation/src/main/kotlin/com/sample/Handlers.kt#L26-L52\" target=\"_blank\" rel=\"noopener noreferrer\">WebFlux Ref</a>.</p>\n<p>The goal is to abstract this use-case domain logic into a generic reusable template. We shall achieve it by creating some typeclasses and making use of some typeclasses from the Arrow library. These heterogeneous services can inflate these templates by supplying concrete instances of those typeclass interfaces. Let’s get started!</p>\n<h3 id=\"The-code-classlanguage-textRepoltFgtcode-typeclass\" style=\"position:relative;\">The <code class=\"language-text\">Repo&lt;F&gt;</code> typeclass<a href=\"#The-code-classlanguage-textRepoltFgtcode-typeclass\" aria-label=\"The code classlanguage textRepoltFgtcode typeclass permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Let’s abstract the DB behavior in both these stacks to a generic typeclass interface, <code class=\"language-text\">Repo&lt;F&gt;</code>, where <code class=\"language-text\">F</code> represents the Effect-type on which the DB works in their respective stacks.</p>\n<div class=\"gatsby-code-title\">Repo.kt</div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Repo<span class=\"token operator\">&lt;</span>F<span class=\"token operator\">></span> <span class=\"token operator\">:</span> Async<span class=\"token operator\">&lt;</span>F<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> Unit<span class=\"token operator\">></span>\n    <span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> Unit<span class=\"token operator\">></span>\n    <span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">doesUserLoginExist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> Boolean<span class=\"token operator\">></span>\n    <span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">isUserCityValid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> Boolean<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>These operations have a return type of the form <code class=\"language-text\">Kind&lt;F, A&gt;</code>(=<code class=\"language-text\">F&lt;A&gt;</code>), which is generic and agnostic of <code class=\"language-text\">Effect</code>.</li>\n<li>Our services implement this typeclass with their respective effect types. In these concrete implementations, the service repository functions are mapped to <code class=\"language-text\">Repo</code> operations, using <code class=\"language-text\">IO</code> and <code class=\"language-text\">MonoK</code> from Arrow Library - <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/8a3aeb5c0f3137f74ac9b22ee128e45075e9f50d/kofu-mvc-validation/src/main/kotlin/com/sample/Configurations.kt#L38-L41\" target=\"_blank\" rel=\"noopener noreferrer\">WebMVC Ref</a> and <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/8a3aeb5c0f3137f74ac9b22ee128e45075e9f50d/kofu-reactive-validation/src/main/kotlin/com/sample/Configurations.kt#L29-L32\" target=\"_blank\" rel=\"noopener noreferrer\">WebFlux Ref</a>.</li>\n</ul>\n<h3 id=\"Templates-using-Typeclasses\" style=\"position:relative;\">Templates using Typeclasses<a href=\"#Templates-using-Typeclasses\" aria-label=\"Templates using Typeclasses permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>Now we can weave our business-logic into generic templates depending on the generic operations of the typeclass <code class=\"language-text\">Repo&lt;F&gt;</code>.</li>\n<li>Templates are generic functions and they depend on Typeclasses. This dependency can be achieved by passing typeclass as a function argument or declaring the template functions as extensions [11] to a typeclass. I used the latter in my POC - <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/8a3aeb5c0f3137f74ac9b22ee128e45075e9f50d/validation-fx/src/main/kotlin/com/validation/rules/UserRules.kt\" target=\"_blank\" rel=\"noopener noreferrer\">Ref</a></li>\n<li>Typeclass is the bridge between services and templates. Services supply a concrete implementation of the typeclass, essentially filling in the blanks for the templates - <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/b59bd89a7302035e3d72dfb75071a2d05c055443/kofu-mvc-validation/src/main/kotlin/com/sample/Configurations.kt#L36-L43\" target=\"_blank\" rel=\"noopener noreferrer\">WebMVC Ref</a> and <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/b59bd89a7302035e3d72dfb75071a2d05c055443/kofu-reactive-validation/src/main/kotlin/com/sample/Configurations.kt#L27-L34\" target=\"_blank\" rel=\"noopener noreferrer\">WebFlux Ref</a>.</li>\n<li>These templates work as shared logic, and the services can use those concrete instances to consume all these templates for free! - <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/b59bd89a7302035e3d72dfb75071a2d05c055443/kofu-mvc-validation/src/main/kotlin/com/sample/HandlersX.kt#L22-L30\" target=\"_blank\" rel=\"noopener noreferrer\">WebMVC Ref</a> and <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/b59bd89a7302035e3d72dfb75071a2d05c055443/kofu-reactive-validation/src/main/kotlin/com/sample/HandlersX.kt#L20-L27\" target=\"_blank\" rel=\"noopener noreferrer\">WebFlux Ref</a>.</li>\n<li>Moreover, the typeclass is entirely extensible to support more operations, in turn, to extend our template base.</li>\n</ul>\n<h2 id=\"Outcomes-and-Conclusions\" style=\"position:relative;\">Outcomes and Conclusions<a href=\"#Outcomes-and-Conclusions\" aria-label=\"Outcomes and Conclusions permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>We achieved reusable domain logic using Ad-hoc Polymorphism, abstracting out the Effect using typeclasses and Higher-Kinded Types, migrating our Monomorphic code to Polymorphic. This is very powerful to model and migrate B2C-services. This <strong>zeros-down the cost and effort</strong> to rewrite and maintain common business logic across all services and future service migrations. This can save a release cycle amount of work, bringing in real agility among scrum teams and startups to ship things faster.</p>\n<h2 id=\"References\" style=\"position:relative;\">References<a href=\"#References\" aria-label=\"References permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/\" target=\"_blank\" rel=\"noopener noreferrer\">https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/</a></li>\n<li><a href=\"https://www.reactivemanifesto.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.reactivemanifesto.org/</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Subtyping\" target=\"_blank\" rel=\"noopener noreferrer\">https://en.wikipedia.org/wiki/Subtyping</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Parametric_polymorphism\" target=\"_blank\" rel=\"noopener noreferrer\">https://en.wikipedia.org/wiki/Parametric_polymorphism</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Ad_hoc_polymorphism\" target=\"_blank\" rel=\"noopener noreferrer\">https://en.wikipedia.org/wiki/Ad_hoc_polymorphism</a></li>\n<li><a href=\"https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymorphism.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymorphism.pdf</a></li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web</a></li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html</a></li>\n<li><a href=\"https://danielwestheide.com/blog/the-neophytes-guide-to-scala-part-12-type-classes/\" target=\"_blank\" rel=\"noopener noreferrer\">https://danielwestheide.com/blog/the-neophytes-guide-to-scala-part-12-type-classes/</a></li>\n<li><a href=\"https://www.intuit.com/blog/uncategorized/kotlin-development-plan/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.intuit.com/blog/uncategorized/kotlin-development-plan/</a></li>\n<li><a href=\"https://kotlinlang.org/docs/reference/extensions.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://kotlinlang.org/docs/reference/extensions.html</a></li>\n<li><a href=\"https://arrow-kt.io/docs/patterns/glossary/#typeclasses\" target=\"_blank\" rel=\"noopener noreferrer\">https://arrow-kt.io/docs/patterns/glossary/#typeclasses</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Ad_hoc_polymorphism\" target=\"_blank\" rel=\"noopener noreferrer\">https://en.wikipedia.org/wiki/Ad_hoc_polymorphism</a></li>\n</ol>","timeToRead":10,"fields":{"tagSlugs":["/tags/kotlin/","/tags/arrow/"],"slug":"/posts/top-with-ad-hoc-polymorphism/"},"frontmatter":{"title":"Template-Oriented-Programming (TOP) to Ship Faster","tags":["Kotlin","Arrow"],"date":"2020-03-06T00:00:00.000Z","description":"Top-up with Ad-hoc Polymorphism","cover":{"childImageSharp":{"original":{"src":"/static/cover-9a40c4ec97d54bd9903dfb33033e2724.jpeg"}}}}}},"pageContext":{"slug":"/posts/top-with-ad-hoc-polymorphism/","previous":{"fields":{"slug":"/posts/monads-for-drunken-coders-pint-1/"},"frontmatter":{"title":"Monads for Drunken Coders, Pint-1🍺","tags":["Java 8","Monads"],"layout":"post","category":"Functional Programming"}},"next":{"fields":{"slug":"/posts/fight-complexity-with-fp/"},"frontmatter":{"title":"Fight Complexity with Functional Programming","tags":["Java","Vavr"],"layout":"post","category":"Design"}}}}}