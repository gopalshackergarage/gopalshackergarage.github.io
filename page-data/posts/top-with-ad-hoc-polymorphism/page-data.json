{"componentChunkName":"component---src-templates-post-template-jsx","path":"/posts/top-with-ad-hoc-polymorphism/","result":{"data":{"site":{"siteMetadata":{"title":"It's All Over full-stack","subtitle":"So excited about this Craft that, I can't keep myself from blogging about it.","copyright":"© All rights reserved.","declaration":"I built this blog with React.js","author":{"name":"Gopal S Akshintala","twitter":"http://bit.ly/agstwtr","github":"http://bit.ly/agsgithub","linkedin":"http://bit.ly/agslnkd","telegram":"https://t.me/gopalakshintala","email":"gopal.akshintala@gmail.com","stackoverflow":"http://bit.ly/agsso","aboutme":"/about-me"},"disqusShortname":"gopal","url":"https://github.com/overfullstack/overfullstack.github.io"}},"markdownRemark":{"id":"337b887a-006f-52e4-8601-78245f20d778","html":"<h2 id=\"abstract\" style=\"position:relative;\"><a href=\"#abstract\" aria-label=\"abstract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Abstract</h2>\n<p>With the advent of B2C products, the same product can have use-cases (or Services) with varied traffic and scaling needs. The trend is to split them into Microservices built on different paradigms/tech-stacks (blocking or non-blocking [1]). In domains like Payments, many such heterogeneous services are parallel as well (having most of the domain business logic in common e.g., Purchases and Refunds). Although the business logic is common, it cannot be reused among these parallel services, as the code is written specifically to that paradigm.</p>\n<p>This paper attempts to overcome this challenge and make such common logic <strong>reusable</strong>, turning the <code class=\"language-text\">Monomorphic</code> common code to <code class=\"language-text\">Polymorphic</code> templates, using an innovative design technique called <code class=\"language-text\">Ad-hoc Polymorphism</code>.</p>\n<h2 id=\"things-to-know-before-reading\" style=\"position:relative;\"><a href=\"#things-to-know-before-reading\" aria-label=\"things to know before reading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Things to know before reading</h2>\n<p>A good understanding of generics and exposure to blocking/non-blocking paradigms. This is language-agnostic, but the I will use <strong>Kotlin</strong> (a modern JVM language) for demonstration along with <strong>Arrow</strong> (An upcoming Functional Programming library for Kotlin).</p>\n<h2 id=\"the-case-for-heterogeneous-services\" style=\"position:relative;\"><a href=\"#the-case-for-heterogeneous-services\" aria-label=\"the case for heterogeneous services permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Case for Heterogeneous services</h2>\n<p>Taking the example from Payments domain, <strong>Purchases</strong> tend to have high traffic (especially during Black Fridays, Flash sales, etc), and it’s common to model them with an Asynchronous non-blocking paradigm like <strong>Reactive Stack</strong> [2]. Whereas, <strong>Refunds</strong> tend to have relatively low traffic and its scaling needs can easily be catered with a simple blocking stack.</p>\n<h2 id=\"problem-of-reusability-among-heterogeneous-services\" style=\"position:relative;\"><a href=\"#problem-of-reusability-among-heterogeneous-services\" aria-label=\"problem of reusability among heterogeneous services permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problem of Reusability among Heterogeneous services</h2>\n<p>Despite being heterogenous, these services have a lot of commonality in their Domain logic - like Authentication, Request-Validation, Idempotency, external integrations (like gateway interaction), logging, etc. In the case of homogeneous services, this reusable code can be placed in a different module and be added as a dependency in all services. But in heterogeneous case, blocking code can’t be reused for non-blocking service or vice-versa, because:</p>\n<ul>\n<li>Their styles of programming are different (Functional in non-blocking vs Imperative in blocking).</li>\n<li>Non-Blocking code is filled with callbacks while the blocking code is sequential.</li>\n<li>The DB APIs are different, as non-blocking services use non-blocking DBs.</li>\n<li>Each paradigm has specific <code class=\"language-text\">Effect (or Container)</code> it operates on, e.g - Non-blocking paradigms operate on reactive containers like <code class=\"language-mono<a\">/Flux&lt;A</code>, contrary to blocking paradigms which may (or need not) use simple containers like <code class=\"language-text\">Option/Either</code>.</li>\n</ul>\n<p>Due to this problem, the code is rewritten or duplicated for common use-cases, which eventually leads to maintenance overhead. This also applies to services that have future plans to migrate to async non-blocking as their business increases, in which case, the entire service needs to be rewritten although the domain business logic remains the same.</p>\n<h2 id=\"monomorphic-to-polymorphic\" style=\"position:relative;\"><a href=\"#monomorphic-to-polymorphic\" aria-label=\"monomorphic to polymorphic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Monomorphic to Polymorphic</h2>\n<p>Monomorphic code is written specifically to the <code class=\"language-text\">Effect (or Container)</code>. If the Effect is abstracted out as a <em>Generic</em>, the domain logic turns reusable for any type of service, and it can be called <strong>Polymorphic</strong>. But to achieve that, we need to understand concepts like <strong>TypeClasses</strong> and <strong>Higher-Kinds</strong>.</p>\n<p>But let’s briefly touch upon types of Polymorphism:</p>\n<h3 id=\"subtype-polymorphism-inheritance-3\" style=\"position:relative;\"><a href=\"#subtype-polymorphism-inheritance-3\" aria-label=\"subtype polymorphism inheritance 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subtype Polymorphism (Inheritance) [3]</h3>\n<p>This is the most common OOP pattern, where we achieve polymorphism through inheritance. An interface is implemented by multiple classes (called subtypes).</p>\n<h3 id=\"parametric-polymorphism-generics-4\" style=\"position:relative;\"><a href=\"#parametric-polymorphism-generics-4\" aria-label=\"parametric polymorphism generics 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parametric Polymorphism (Generics) [4]</h3>\n<p>Simply put, this style uses generics (like <code class=\"language-text\">&lt;T&gt;</code>), to generate templates of reusable code. This works when the logic doesn’t depend on any type-specific behavior. e.g., <code class=\"language-text\">Array&lt;T&gt;</code>.</p>\n<h3 id=\"ad-hoc-polymorphism-type-classes-5\" style=\"position:relative;\"><a href=\"#ad-hoc-polymorphism-type-classes-5\" aria-label=\"ad hoc polymorphism type classes 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ad-hoc Polymorphism (Type Classes) [5]</h3>\n<p>The term <strong>Ad-hoc polymorphism</strong> refers to polymorphic functions that can be applied to arguments of different types, but that behave differently depending on the type of the argument to which they are applied. To achieve this, we use <strong>TypeClasses</strong>. <code class=\"language-text\">Comparator&lt;T&gt;</code> in JDK is a simple typeClass. TypeClasses are just generic interfaces that are parametric on a Type <code class=\"language-text\">T</code>. </p>\n<h2 id=\"typeclass\" style=\"position:relative;\"><a href=\"#typeclass\" aria-label=\"typeclass permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeClass</h2>\n<p>A type class <code class=\"language-text\">C</code> defines some behavior in the form of operations that must be supported by a type <code class=\"language-text\">T</code> for it to be a member of type class <code class=\"language-text\">C</code>. A type can be a member of a type class simply by providing implementations of the operations the type must support. Once <code class=\"language-text\">T</code> is made a member of the type class <code class=\"language-text\">C</code>, functions that have constrained one or more of their parameters to be members of <code class=\"language-text\">C</code> can be called with arguments of type <code class=\"language-text\">T</code>.\n<code class=\"language-text\">Comparator&lt;T&gt;</code> has one operation <code class=\"language-text\">fun compare(a: T?, b: T?): Int</code>. Now for a type <code class=\"language-text\">Apple</code> to be a member of this TypeClass, prepare a concrete <code class=\"language-text\">Comparator&lt;Apple&gt;</code> implementing its <code class=\"language-text\">fun compare(a: Apple?, b: Apple?): Int</code>. That’s it! Now the JDK’s <code class=\"language-text\">Collections.sort()</code> can make use of this concrete implementation to compare apples.\nThe code that relies on type classes is open for extension. Just like how <code class=\"language-text\">Comparator&lt;T&gt;</code> can be extended to compare any type.</p>\n<h3 id=\"need-for-higher-kinded-types-6\" style=\"position:relative;\"><a href=\"#need-for-higher-kinded-types-6\" aria-label=\"need for higher kinded types 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Need for Higher-Kinded Types [6]</h3>\n<p>Effects are of the form <code class=\"language-text\">F&lt;A&gt;</code> (e.g. <code class=\"language-text\">Mono&lt;A&gt;</code>), where <code class=\"language-text\">F</code> is the container type and <code class=\"language-text\">A</code> is the value type. The problem is, most JVM languages only support parametricity on the value type <code class=\"language-text\">A</code> but not on the Container type <code class=\"language-text\">F</code>. So to represent it, we need <strong>Higher-Kinded Types</strong>, which are represented by <code class=\"language-text\">Kind&lt;F, A&gt;</code> which is synonymous to <code class=\"language-text\">F&lt;A&gt;</code></p>\n<h2 id=\"ad-hoc-polymorphism-by-example\" style=\"position:relative;\"><a href=\"#ad-hoc-polymorphism-by-example\" aria-label=\"ad hoc polymorphism by example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ad-hoc Polymorphism by example</h2>\n<p>Now that we have both the tools (TypeClasses and Higher-Kinded Types), let’s make a polymorphic template for our reusable domain logic. A POC working sample can be found in this <a href=\"https://github.com/overfullstack/ad-hoc-poly\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a>. I shall be using references from this code to explain the subsequent examples, where we have two identical services, one built with <code class=\"language-text\">Spring-WebFlux</code> (non-blocking reactive stack) [7] and another built with <code class=\"language-text\">Spring-WebMVC</code> (blocking servlet stack) [8]. We shall take-up the <em>user validate-and-upsert</em> as our example use-case (where a request to upsert a user is validated and either inserted or updated based on the user’s existence in the DB). We shall attempt to abstract this into a common module so that both the services can consume it.</p>\n<ul>\n<li><code class=\"language-text\">Spring-WebFlux</code> works with <code class=\"language-mono<a\">/Flux&lt;A</code> while <code class=\"language-text\">Spring-WebMVC</code> doesn’t. Also, we shall see how the difference in paradigms prevents reusability.</li>\n<li>The first step, is to abstract the DB behavior in both these stacks to a generic TypeClass interface, <code class=\"language-text\">RepoTC&lt;F&gt;</code>, where <code class=\"language-text\">F</code> represents the Effect-type on which the DB works in their respective stacks. This is how the simplest version of it looks like:</li>\n</ul>\n<div class=\"gatsby-code-title\">RepoTC.kt</div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> RepoTC<span class=\"token operator\">&lt;</span>F<span class=\"token operator\">></span> <span class=\"token operator\">:</span> Async<span class=\"token operator\">&lt;</span>F<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> User<span class=\"token operator\">?</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>This code may look alien at first, but if we get into the details it all makes sense.</p>\n<ul>\n<li>The operation <code class=\"language-text\">get()</code> has a return type <code class=\"language-text\">Kind&lt;F, User?&gt;</code>, which is synonymous to <code class=\"language-text\">F&lt;User?&gt;</code>. This indicates our operations are agnostic of <code class=\"language-text\">Effect</code>.</li>\n<li>Our <code class=\"language-text\">RepoTC&lt;F&gt;</code> extends from <code class=\"language-text\">Async&lt;F&gt;</code> which is TypeClass from <em>Arrow</em> library.</li>\n<li>Our Services are supposed to supply concrete instances of this <code class=\"language-text\">RepoTC&lt;F&gt;</code> and provide implementation for its operation <code class=\"language-text\">get()</code>.</li>\n<li>We can help our services to map their <em>Effect-full</em> operations to generic operations, for which we can write two utility functions, which are extension functions on <code class=\"language-text\">Async&lt;F&gt;</code> as below:</li>\n</ul>\n<div class=\"gatsby-code-title\">RepoUtils</div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token function\">forMono</span><span class=\"token punctuation\">(</span>thunk<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Mono<span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> R<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> effect <span class=\"token punctuation\">{</span> <span class=\"token function\">thunk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">k</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">suspended</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token function\">forIO</span><span class=\"token punctuation\">(</span>thunk<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> R<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span> <span class=\"token operator\">=</span> effect <span class=\"token punctuation\">{</span> <span class=\"token function\">thunk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ul>\n<li>The <code class=\"language-text\">Async&lt;F&gt;</code> typeClass has an important method called <code class=\"language-text\">effect{..}</code>, which wraps a function with an <em>Effect</em> return type (like <code class=\"language-text\">Mono&lt;F&gt;</code>) and returns a generic effect type <code class=\"language-text\">Kind&lt;F, A&gt;</code>.</li>\n<li>Utilizing these utilities, Just like <code class=\"language-text\">Comparator&lt;T&gt;</code> example we discussed, we can create two concrete instances of our <code class=\"language-text\">Repo&lt;TC&gt;</code> - <code class=\"language-text\">blockingRepo</code>, <code class=\"language-text\">nonBlockingReactiveRepo</code>.</li>\n</ul>\n<div class=\"gatsby-code-title\">ConcreteInstances</div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> blockingRepo <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> RepoTC<span class=\"token operator\">&lt;</span>ForIO<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Async<span class=\"token operator\">&lt;</span>ForIO<span class=\"token operator\">></span> <span class=\"token keyword\">by</span> IO<span class=\"token punctuation\">.</span><span class=\"token function\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>ForIO<span class=\"token punctuation\">,</span> User<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> forIO <span class=\"token punctuation\">{</span> userRepo<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>loginId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> nonBlockingReactiveRepo <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> RepoTC<span class=\"token operator\">&lt;</span>ForMonoK<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Async<span class=\"token operator\">&lt;</span>ForMonoK<span class=\"token operator\">></span> <span class=\"token keyword\">by</span> MonoK<span class=\"token punctuation\">.</span><span class=\"token function\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>ForMonoK<span class=\"token punctuation\">,</span> User<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> forMono <span class=\"token punctuation\">{</span> userReactiveRepo<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>loginId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>For blocking operations, <code class=\"language-text\">IO.async()</code> instance is supplied as implementation for <code class=\"language-text\">Async&lt;F&gt;</code> and for non-blocking operations, <code class=\"language-text\">MonoK.async()</code> is supplied. These concrete instances effect the <code class=\"language-text\">effect{..}</code> method’s behavior and supplies it with superpowers to handle a specified effect (<code class=\"language-text\">Mono</code> or <code class=\"language-text\">IO</code>).</li>\n<li>The return types of <code class=\"language-text\">userRepo.findOne(loginId)</code> is <code class=\"language-text\">User?</code> and <code class=\"language-text\">userReactiveRepo.findOne(loginId)</code> is <code class=\"language-text\">Mono&lt;User?&gt;</code>, both these are mapped to generic function <code class=\"language-text\">User.get()</code> whose return type is a higher-kind <code class=\"language-text\">Kind&lt;F, User?&gt;</code> where <code class=\"language-text\">F</code> is represented by <code class=\"language-text\">ForMonK</code> and <code class=\"language-text\">ForIO</code> in their respective concrete entities.</li>\n</ul>\n<h2 id=\"how-the-pieces-fit\" style=\"position:relative;\"><a href=\"#how-the-pieces-fit\" aria-label=\"how the pieces fit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How the pieces fit?</h2>\n<ul>\n<li>This typeClass <code class=\"language-text\">RepoTC&lt;F&gt;</code> is the bridge between the service and common module (In the GitHub repo, this common module is named as <code class=\"language-text\">validation-fx</code>).</li>\n<li><code class=\"language-text\">RepoTC&lt;F&gt;</code> has all the common business logic template (refer <code class=\"language-text\">validateUserForUpsert</code> function <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/master/validation-fx/src/main/kotlin/com/validation/RepoTC.kt#L32\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>). Arrow’s <code class=\"language-text\">fx</code> blocks are used to write this code, which shall be briefly explained in the talk.</li>\n<li>These templates depend on the TypeClass’s abstract functions (like <code class=\"language-text\">get()</code>) to weave their business logic. As shown in <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/master/validation-fx/src/main/kotlin/com/validation/RepoTC.kt#L13\" target=\"_blank\" rel=\"noopener noreferrer\">this code</a>, the <code class=\"language-text\">RepoTC&lt;F&gt;</code> can be extended with more DB operations to be used inside our templates.</li>\n<li>On the service side, we supply concrete implementation of TypeClasses as a dependency (Refer <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/master/kofu-mvc-validation/src/main/kotlin/com/sample/Configurations.kt#L29\" target=\"_blank\" rel=\"noopener noreferrer\">this</a> and <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/master/kofu-reactive-validation/src/main/kotlin/com/sample/Configurations.kt#L20\" target=\"_blank\" rel=\"noopener noreferrer\">this</a>).</li>\n<li>Now both services can consume the common business logic through these concrete entities (Refer <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/master/kofu-mvc-validation/src/main/kotlin/com/sample/Handlers.kt#L84\" target=\"_blank\" rel=\"noopener noreferrer\">this</a> and <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/master/kofu-reactive-validation/src/main/kotlin/com/sample/Handlers.kt#L97\" target=\"_blank\" rel=\"noopener noreferrer\">this</a>).</li>\n</ul>\n<h2 id=\"outcomes-and-conclusions\" style=\"position:relative;\"><a href=\"#outcomes-and-conclusions\" aria-label=\"outcomes and conclusions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outcomes and Conclusions</h2>\n<p>We achieved reusable domain logic using Ad-hoc Polymorphism, abstracting out the effect using TypeClasses and Higher-Kinded Types, migrating our Monomorphic code to Polymorphic. This is very powerful to model B2C-services and to-be-scalable services. This <strong>zeros-down the cost and effort</strong> to rewrite and maintain common business logic across all parallel services and future service migrations, speeding-up the feature development.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ol>\n<li><a href=\"https://community.oracle.com/docs/DOC-918126\" target=\"_blank\" rel=\"noopener noreferrer\">https://community.oracle.com/docs/DOC-918126</a></li>\n<li><a href=\"https://www.reactivemanifesto.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.reactivemanifesto.org/</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Subtyping\" target=\"_blank\" rel=\"noopener noreferrer\">https://en.wikipedia.org/wiki/Subtyping</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Parametric_polymorphism\" target=\"_blank\" rel=\"noopener noreferrer\">https://en.wikipedia.org/wiki/Parametric_polymorphism</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Ad_hoc_polymorphism\" target=\"_blank\" rel=\"noopener noreferrer\">https://en.wikipedia.org/wiki/Ad<em>hoc</em>polymorphism</a></li>\n<li><a href=\"https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymorphism.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymorphism.pdf</a></li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html</a></li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web</a></li>\n<li><a href=\"https://danielwestheide.com/blog/the-neophytes-guide-to-scala-part-12-type-classes/\" target=\"_blank\" rel=\"noopener noreferrer\">https://danielwestheide.com/blog/the-neophytes-guide-to-scala-part-12-type-classes/</a></li>\n</ol>","timeToRead":10,"fields":{"tagSlugs":["/tags/kotlin/","/tags/arrow/"],"slug":"/posts/top-with-ad-hoc-polymorphism/"},"frontmatter":{"title":"Template-Oriented-Programming (TOP) with Ad-Hoc Polymorphism","tags":["Kotlin","Arrow"],"date":"2020-03-06T00:00:00.000Z","description":"Template-Oriented-Programming (TOP) with Ad-Hoc Polymorphism","cover":{"childImageSharp":{"original":{"src":"/static/cover-9a40c4ec97d54bd9903dfb33033e2724.jpeg"}}}}}},"pageContext":{"slug":"/posts/top-with-ad-hoc-polymorphism/","previous":{"fields":{"slug":"/posts/monads-for-drunken-coders-pint-1/"},"frontmatter":{"title":"Monads for Drunken Coders, Pint-1🍺","tags":["Java 8","Monads"],"layout":"post","category":"Functional Programming"}},"next":null}}}