{"componentChunkName":"component---src-templates-post-template-jsx","path":"/posts/top-with-ad-hoc-polymorphism/","result":{"data":{"site":{"siteMetadata":{"blogTitle":"Overfullstack","subtitle":"So excited about this Craft that, I can't keep myself from blogging about it.","copyright":"© All rights reserved.","declaration":"I built this blog with React.js","author":{"name":"Gopal S Akshintala","twitter":"http://bit.ly/agstwtr","github":"http://bit.ly/agsgithub","linkedin":"http://bit.ly/agslnkd","telegram":"https://t.me/gopalakshintala","email":"gopal.akshintala@gmail.com","stackoverflow":"http://bit.ly/agsso","aboutme":"/about-me"},"disqusShortname":"gopal","url":"https://github.com/overfullstack/overfullstack.github.io"}},"markdownRemark":{"id":"8084c9ce-9661-5290-89ba-06a480260131","html":"<h2 id=\"Abstract\" style=\"position:relative;\">Abstract<a href=\"#Abstract\" aria-label=\"Abstract permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>B2C microservices are built on heterogeneous tech-stacks (blocking/reactive) as per their traffic and can have common use-cases E.g. Validation, Idempotency. But code can’t be shared/reused due to paradigm contrast. So it’s rewritten everywhere. With a hands-on demo, let’s see how to hasten feature development, by <strong>Templatizing</strong> code for large &#x26; common &#x26; well-tested features, to be <em>shared/reused</em> across heterogeneous services, using <strong>Open-Source</strong> technologies.</p>\n<h2 id=\"Audience-and-Takeaways\" style=\"position:relative;\">Audience and Takeaways<a href=\"#Audience-and-Takeaways\" aria-label=\"Audience and Takeaways permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Technical Level: Interesting to all, approachable for intermediate and up. Any Functional Programming enthusiasts love it.</p>\n<p>This talk targets intermediate to expert senior developers with a good understanding of <code class=\"language-text\">generics</code> and some exposure/interest towards blocking and non-blocking/reactive paradigms. This talk is language-agnostic, but I use <strong><a href=\"https://kotlinlang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Kotlin</a> (a Modern Open-source JVM language)</strong> in combination with <strong><a href=\"http://arrow-kt.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Arrow</a> (A Trending Open-source functional companion for Kotlin)</strong>.</p>\n<p>Kotlin’s syntax is very close to Java, and all software design patterns discussed in this talk can be implemented in almost any language. Thanks to the concise syntax of Kotlin<a href=\"https://www.intuit.com/blog/uncategorized/kotlin-development-plan/\" target=\"_blank\" rel=\"noopener noreferrer\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mrow><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">_{[2]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">]</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span></span></span></span></a> and robust tool-set provided by Arrow, implementing this technique turns ergonomic.</p>\n<p>I used popular <em>open-source</em> backend frameworks — <code class=\"language-text\">Spring-MVC</code><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web\" target=\"_blank\" rel=\"noopener noreferrer\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mrow><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">_{[3]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">3</span><span class=\"mclose mtight\">]</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span></span></span></span></a> and <code class=\"language-text\">Spring-WebFlux</code><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html\" target=\"_blank\" rel=\"noopener noreferrer\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mrow><mo stretchy=\"false\">[</mo><mn>4</mn><mo stretchy=\"false\">]</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">_{[4]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">4</span><span class=\"mclose mtight\">]</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span></span></span></span></a> to demonstrate heterogeneity, in my POC.</p>\n<p>No prior knowledge about these frameworks or kotlin is required, all the nuances required for this problem are contextually explained in the talk. The key takeaways for the audience are:</p>\n<ul>\n<li>How to create magic with the hot combination of open-source technologies — <em>Spring Boot + Kotlin + Arrow</em>.</li>\n<li>The <em>Why, How &#x26; What</em> of Monomorphic vs. Polymorphic code.</li>\n<li>Agile <strong>B2C product development</strong> teams, both in enterprises and startups, can learn ways to accelerate their feature development cycle, by converting large &#x26; common &#x26; well-tested features into reusable code templates, and how it is profitable and reduces the maintenance overhead of rewriting the same business logic across heterogeneous services and service migrations.</li>\n</ul>\n<h2 id=\"Introduction\" style=\"position:relative;\">Introduction<a href=\"#Introduction\" aria-label=\"Introduction permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"The-Case-for-Heterogeneous-services\" style=\"position:relative;\">The Case for Heterogeneous services<a href=\"#The-Case-for-Heterogeneous-services\" aria-label=\"The Case for Heterogeneous services permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>The trend in the B2C world is to chop the use-cases with varied traffic-needs into <em>Microservices/Macroservices</em> managed by independent Scrum teams. These teams develop using Heterogeneous frameworks and tech-stacks, suitable for the traffic needs of their services.</p>\n<p>Reactive/non-blocking stack<a href=\"https://www.reactivemanifesto.org/\" target=\"_blank\" rel=\"noopener noreferrer\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mrow><mo stretchy=\"false\">[</mo><mn>6</mn><mo stretchy=\"false\">]</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">_{[6]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">6</span><span class=\"mclose mtight\">]</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span></span></span></span></a> should only be used for high traffic services, as it adds a lot of complexity to the application<a href=\"https://blog.pragmatists.com/unobvious-traps-of-spring-webflux-16924a0d76d5\" target=\"_blank\" rel=\"noopener noreferrer\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mrow><mo stretchy=\"false\">[</mo><mn>7</mn><mo stretchy=\"false\">]</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">_{[7]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">7</span><span class=\"mclose mtight\">]</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span></span></span></span></a>. Taking an example from the Payments domain, Purchases tend to have high traffic (especially during Black Fridays, Flash sales, etc.), and it’s common to model them with an Asynchronous non-blocking paradigm like <em>Spring-WebFlux</em>. Whereas Refunds tend to have relatively low traffic, and a simple blocking stack like <em>Spring-MVC</em> can easily cater to its scaling needs. Such use-cases can be found in many B2C products, E.g. Reservations vs. Cancellations.</p>\n<h3 id=\"The-problem-of-Reusability-among-Heterogeneous-services\" style=\"position:relative;\">The problem of Reusability among Heterogeneous services<a href=\"#The-problem-of-Reusability-among-Heterogeneous-services\" aria-label=\"The problem of Reusability among Heterogeneous services permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Despite being heterogenous, these services have many commonalities in their Domain logic, ranging from small features such as Authentication, Logging, to large features such as Request-Validation, Idempotency, External-Integrations. In the case of homogeneous services, the common code can be placed in a shared module and be added as a dependency in all services. But in heterogeneous case, blocking code can’t be shared/reused for non-blocking service or vice-versa, because:</p>\n<ul>\n<li>It’s extremely dangerous to mix both paradigms, as it can lead to untraceable performance issues.</li>\n<li>Their styles of programming are different (Functional in non-blocking vs. Imperative in blocking).</li>\n<li>Non-Blocking code is filled with callbacks while the blocking code is sequential.</li>\n<li>The DB APIs are different, as non-blocking services use non-blocking DBs.</li>\n<li>Each paradigm has specific <code class=\"language-text\">Effect</code> it operates on, E.g. Non-blocking paradigms may operate on reactive Effect types like <code class=\"language-text\">Mono&lt;A&gt;/Flux&lt;A&gt; or Observable&lt;A&gt;</code>, contrary to blocking paradigms which may (or need not) use simple Effect types like <code class=\"language-text\">Option/Either</code>.</li>\n</ul>\n<p>This leads to scrum teams duplicating the same logic in all the services. Also, a service may be migrated, E.g. from <code class=\"language-text\">Spring-MVC</code> to <code class=\"language-text\">Spring-WebFlux</code> to scale better for increasing traffic, it needs to be entirely rewritten.</p>\n<p>Let’s see (with a working POC) how to make such common logic reusable/sharable, turning the Monomorphic code into Polymorphic templates, which enables scrum teams to share well-tested small &#x26; large features across their services.</p>\n<h2 id=\"Monomorphic-to-Polymorphicspan-classkatexspan-classkatex-mathmlmath-xmlnshttpwwww3org1998MathMathMLsemanticsmrowmsubmrowmrowmrowmo-stretchyfalsemomn8mnmo-stretchyfalsemomrowmsubmrowannotation-encodingapplicationx-tex_8annotationsemanticsmathspanspan-classkatex-html-aria-hiddentruespan-classbasespan-classstrut-styleheight07emvertical-align-03551999999999999emspanspan-classmordspanspanspan-classmsupsubspan-classvlist-t-vlist-t2span-classvlist-rspan-classvlist-styleheight034480000000000005emspan-styletop-25198emmargin-right005emspan-classpstrut-styleheight27emspanspan-classsizing-reset-size6-size3-mtightspan-classmord-mtightspan-classmopen-mtightspanspan-classmord-mtight8spanspan-classmclose-mtightspanspanspanspanspanspan-classvlist-sspanspanspan-classvlist-rspan-classvlist-styleheight03551999999999999emspanspanspanspanspanspanspanspanspanspan\" style=\"position:relative;\">Monomorphic to Polymorphic<a href=\"https://arrow-kt.io/docs/fx/polymorphism/\" target=\"_blank\" rel=\"noopener noreferrer\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mrow><mo stretchy=\"false\">[</mo><mn>8</mn><mo stretchy=\"false\">]</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">_{[8]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">8</span><span class=\"mclose mtight\">]</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span></span></span></span></a><a href=\"#Monomorphic-to-Polymorphicspan-classkatexspan-classkatex-mathmlmath-xmlnshttpwwww3org1998MathMathMLsemanticsmrowmsubmrowmrowmrowmo-stretchyfalsemomn8mnmo-stretchyfalsemomrowmsubmrowannotation-encodingapplicationx-tex_8annotationsemanticsmathspanspan-classkatex-html-aria-hiddentruespan-classbasespan-classstrut-styleheight07emvertical-align-03551999999999999emspanspan-classmordspanspanspan-classmsupsubspan-classvlist-t-vlist-t2span-classvlist-rspan-classvlist-styleheight034480000000000005emspan-styletop-25198emmargin-right005emspan-classpstrut-styleheight27emspanspan-classsizing-reset-size6-size3-mtightspan-classmord-mtightspan-classmopen-mtightspanspan-classmord-mtight8spanspan-classmclose-mtightspanspanspanspanspanspan-classvlist-sspanspanspan-classvlist-rspan-classvlist-styleheight03551999999999999emspanspanspanspanspanspanspanspanspanspan\" aria-label=\"Monomorphic to Polymorphicspan classkatexspan classkatex mathmlmath xmlnshttpwwww3org1998MathMathMLsemanticsmrowmsubmrowmrowmrowmo stretchyfalsemomn8mnmo stretchyfalsemomrowmsubmrowannotation encodingapplicationx tex_8annotationsemanticsmathspanspan classkatex html aria hiddentruespan classbasespan classstrut styleheight07emvertical align 03551999999999999emspanspan classmordspanspanspan classmsupsubspan classvlist t vlist t2span classvlist rspan classvlist styleheight034480000000000005emspan styletop 25198emmargin right005emspan classpstrut styleheight27emspanspan classsizing reset size6 size3 mtightspan classmord mtightspan classmopen mtightspanspan classmord mtight8spanspan classmclose mtightspanspanspanspanspanspan classvlist sspanspanspan classvlist rspan classvlist styleheight03551999999999999emspanspanspanspanspanspanspanspanspanspan permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>If the Effect is abstracted out as a <em>Generic</em>, the domain logic turns reusable for service of any type, and it can be called <strong>Polymorphic</strong>. But to achieve that, we need to understand the concepts - <strong>Higher-Kinded Types</strong> and <strong>Typeclasses</strong>.</p>\n<h3 id=\"Need-for-Higher-Kinded-Typesspan-classkatexspan-classkatex-mathmlmath-xmlnshttpwwww3org1998MathMathMLsemanticsmrowmsubmrowmrowmrowmo-stretchyfalsemomn9mnmo-stretchyfalsemomrowmsubmrowannotation-encodingapplicationx-tex_9annotationsemanticsmathspanspan-classkatex-html-aria-hiddentruespan-classbasespan-classstrut-styleheight07emvertical-align-03551999999999999emspanspan-classmordspanspanspan-classmsupsubspan-classvlist-t-vlist-t2span-classvlist-rspan-classvlist-styleheight034480000000000005emspan-styletop-25198emmargin-right005emspan-classpstrut-styleheight27emspanspan-classsizing-reset-size6-size3-mtightspan-classmord-mtightspan-classmopen-mtightspanspan-classmord-mtight9spanspan-classmclose-mtightspanspanspanspanspanspan-classvlist-sspanspanspan-classvlist-rspan-classvlist-styleheight03551999999999999emspanspanspanspanspanspanspanspanspanspan\" style=\"position:relative;\">Need for Higher-Kinded Types<a href=\"https://arrow-kt.io/docs/patterns/glossary/#higher-kinds\" target=\"_blank\" rel=\"noopener noreferrer\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mrow><mo stretchy=\"false\">[</mo><mn>9</mn><mo stretchy=\"false\">]</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">_{[9]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">9</span><span class=\"mclose mtight\">]</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span></span></span></span></a><a href=\"#Need-for-Higher-Kinded-Typesspan-classkatexspan-classkatex-mathmlmath-xmlnshttpwwww3org1998MathMathMLsemanticsmrowmsubmrowmrowmrowmo-stretchyfalsemomn9mnmo-stretchyfalsemomrowmsubmrowannotation-encodingapplicationx-tex_9annotationsemanticsmathspanspan-classkatex-html-aria-hiddentruespan-classbasespan-classstrut-styleheight07emvertical-align-03551999999999999emspanspan-classmordspanspanspan-classmsupsubspan-classvlist-t-vlist-t2span-classvlist-rspan-classvlist-styleheight034480000000000005emspan-styletop-25198emmargin-right005emspan-classpstrut-styleheight27emspanspan-classsizing-reset-size6-size3-mtightspan-classmord-mtightspan-classmopen-mtightspanspan-classmord-mtight9spanspan-classmclose-mtightspanspanspanspanspanspan-classvlist-sspanspanspan-classvlist-rspan-classvlist-styleheight03551999999999999emspanspanspanspanspanspanspanspanspanspan\" aria-label=\"Need for Higher Kinded Typesspan classkatexspan classkatex mathmlmath xmlnshttpwwww3org1998MathMathMLsemanticsmrowmsubmrowmrowmrowmo stretchyfalsemomn9mnmo stretchyfalsemomrowmsubmrowannotation encodingapplicationx tex_9annotationsemanticsmathspanspan classkatex html aria hiddentruespan classbasespan classstrut styleheight07emvertical align 03551999999999999emspanspan classmordspanspanspan classmsupsubspan classvlist t vlist t2span classvlist rspan classvlist styleheight034480000000000005emspan styletop 25198emmargin right005emspan classpstrut styleheight27emspanspan classsizing reset size6 size3 mtightspan classmord mtightspan classmopen mtightspanspan classmord mtight9spanspan classmclose mtightspanspanspanspanspanspan classvlist sspanspanspan classvlist rspan classvlist styleheight03551999999999999emspanspanspanspanspanspanspanspanspanspan permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Effects are of the form <code class=\"language-text\">F&lt;A&gt;</code> (e.g. <code class=\"language-text\">Mono&lt;A&gt;</code>), where <code class=\"language-text\">F</code> is the <em>Effect</em> type and <code class=\"language-text\">A</code> is the value type. The problem is, most JVM languages only support parametricity on the value type <code class=\"language-text\">A</code> but not on the Container/Effect type <code class=\"language-text\">F</code>. So, we need <strong>Higher-Kinded Types</strong>, to represent <code class=\"language-text\">F&lt;A&gt;</code> as <code class=\"language-text\">Kind&lt;F, A&gt;</code>.</p>\n<h3 id=\"Need-for-Typeclassesspan-classkatexspan-classkatex-mathmlmath-xmlnshttpwwww3org1998MathMathMLsemanticsmrowmsubmrowmrowmrowmo-stretchyfalsemomn10mnmo-stretchyfalsemomrowmsubmrowannotation-encodingapplicationx-tex_10annotationsemanticsmathspanspan-classkatex-html-aria-hiddentruespan-classbasespan-classstrut-styleheight07emvertical-align-03551999999999999emspanspan-classmordspanspanspan-classmsupsubspan-classvlist-t-vlist-t2span-classvlist-rspan-classvlist-styleheight034480000000000005emspan-styletop-25198emmargin-right005emspan-classpstrut-styleheight27emspanspan-classsizing-reset-size6-size3-mtightspan-classmord-mtightspan-classmopen-mtightspanspan-classmord-mtight1spanspan-classmord-mtight0spanspan-classmclose-mtightspanspanspanspanspanspan-classvlist-sspanspanspan-classvlist-rspan-classvlist-styleheight03551999999999999emspanspanspanspanspanspanspanspanspanspan\" style=\"position:relative;\">Need for Typeclasses<a href=\"https://arrow-kt.io/docs/patterns/glossary/#typeclasses\" target=\"_blank\" rel=\"noopener noreferrer\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mrow><mo stretchy=\"false\">[</mo><mn>10</mn><mo stretchy=\"false\">]</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">_{[10]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span><span class=\"mclose mtight\">]</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span></span></span></span></a><a href=\"#Need-for-Typeclassesspan-classkatexspan-classkatex-mathmlmath-xmlnshttpwwww3org1998MathMathMLsemanticsmrowmsubmrowmrowmrowmo-stretchyfalsemomn10mnmo-stretchyfalsemomrowmsubmrowannotation-encodingapplicationx-tex_10annotationsemanticsmathspanspan-classkatex-html-aria-hiddentruespan-classbasespan-classstrut-styleheight07emvertical-align-03551999999999999emspanspan-classmordspanspanspan-classmsupsubspan-classvlist-t-vlist-t2span-classvlist-rspan-classvlist-styleheight034480000000000005emspan-styletop-25198emmargin-right005emspan-classpstrut-styleheight27emspanspan-classsizing-reset-size6-size3-mtightspan-classmord-mtightspan-classmopen-mtightspanspan-classmord-mtight1spanspan-classmord-mtight0spanspan-classmclose-mtightspanspanspanspanspanspan-classvlist-sspanspanspan-classvlist-rspan-classvlist-styleheight03551999999999999emspanspanspanspanspanspanspanspanspanspan\" aria-label=\"Need for Typeclassesspan classkatexspan classkatex mathmlmath xmlnshttpwwww3org1998MathMathMLsemanticsmrowmsubmrowmrowmrowmo stretchyfalsemomn10mnmo stretchyfalsemomrowmsubmrowannotation encodingapplicationx tex_10annotationsemanticsmathspanspan classkatex html aria hiddentruespan classbasespan classstrut styleheight07emvertical align 03551999999999999emspanspan classmordspanspanspan classmsupsubspan classvlist t vlist t2span classvlist rspan classvlist styleheight034480000000000005emspan styletop 25198emmargin right005emspan classpstrut styleheight27emspanspan classsizing reset size6 size3 mtightspan classmord mtightspan classmopen mtightspanspan classmord mtight1spanspan classmord mtight0spanspan classmclose mtightspanspanspanspanspanspan classvlist sspanspanspan classvlist rspan classvlist styleheight03551999999999999emspanspanspanspanspanspanspanspanspanspan permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>It’s a generic interface that is parametric on a Type <code class=\"language-text\">T</code>. E.g. <code class=\"language-text\">Comparator&lt;T&gt;</code> in JDK is a simple typeclass. <code class=\"language-text\">Comparator&lt;T&gt;</code> has one operation <code class=\"language-text\">fun compare(a: T?, b: T?): Int</code>. Now for a type <code class=\"language-text\">String</code> to be a member of this typeclass, prepare a concrete <code class=\"language-text\">Comparator&lt;String&gt;</code> implementing its <code class=\"language-text\">fun compare(a: String?, b: String?): Int</code>. That’s it! Now the <code class=\"language-text\">Collections.sort()</code> can make use of this concrete implementation to compare Strings.</p>\n<p>To put our above example into a formal definition - A type class defines some behavior in the form of operations that must be supported by a type. A type can be a member of a typeclass by merely providing implementations of the operations the type must support.</p>\n<p>This principle can be used to define abstract interfaces like <code class=\"language-text\">Comparator&lt;T&gt;</code> and reusable templates like <code class=\"language-text\">Collections.sort()</code>, whose behavior is polymorphic to the type <code class=\"language-text\">T</code> being sorted. This is called <strong>Ad-hoc Polymorphism</strong>.</p>\n<p>The term <strong>Ad-hoc polymorphism</strong> refers to polymorphic functions that can be applied to arguments of different types, but that behave differently depending on the type of the argument to which they are applied.</p>\n<p>The code that relies on type classes is open for extension, just like how <code class=\"language-text\">Comparator&lt;T&gt;</code> can be extended to compare any type.</p>\n<h2 id=\"Template-Oriented-Programming-with-a-POC\" style=\"position:relative;\">Template-Oriented-Programming with a POC<a href=\"#Template-Oriented-Programming-with-a-POC\" aria-label=\"Template Oriented Programming with a POC permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Now that we have both the tools (Higher-Kinded Types and Typeclasses), let’s make a polymorphic template for our reusable domain logic. The samples used in the rest of this paper can be seen in action in a fully working POC - <a href=\"https://github.com/overfullstack/ad-hoc-poly\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>. It has 3 modules:</p>\n<ul>\n<li><code class=\"language-text\">kofu-mvc-validation</code> - Blocking Service built with <code class=\"language-text\">Spring-WebMVC</code><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web\" target=\"_blank\" rel=\"noopener noreferrer\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mrow><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">_{[3]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">3</span><span class=\"mclose mtight\">]</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span></span></span></span></a></li>\n<li><code class=\"language-text\">kofu-reactive-validation</code> - Reactive Service built with <code class=\"language-text\">Spring-WebFlux</code><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html\" target=\"_blank\" rel=\"noopener noreferrer\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mrow><mo stretchy=\"false\">[</mo><mn>4</mn><mo stretchy=\"false\">]</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">_{[4]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">4</span><span class=\"mclose mtight\">]</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span></span></span></span></a></li>\n<li><code class=\"language-text\">validation-templates</code> - Shared module for both the services, holding templates.</li>\n</ul>\n<p>We shall take-up the <strong><em>user validate-and-upsert</em></strong> as our example use-case, where a request to upsert a user is <strong><em>validated</em></strong>, followed by <strong><em>insert or update</em></strong> based on the user’s existence in the DB.</p>\n<p><code class=\"language-text\">Spring-WebFlux</code> works with <code class=\"language-text\">Mono&lt;A&gt;/Flux&lt;A&gt;</code> while <code class=\"language-text\">Spring-WebMVC</code> doesn’t. As a proof for reusability problem discussed above, refer the <code class=\"language-text\">upsert</code> function in both the services - <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/85ce3b819a/kofu-mvc-validation/src/main/kotlin/mvc/Handlers.kt#L24-L43\" target=\"_blank\" rel=\"noopener noreferrer\">WebMVC Ref</a> and <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/85ce3b819a/kofu-reactive-validation/src/main/kotlin/reactive/Handlers.kt#L25-L51\" target=\"_blank\" rel=\"noopener noreferrer\">WebFlux Ref</a>.</p>\n<p>The goal is to abstract this use-case domain logic into a generic reusable template. We shall achieve it by creating some typeclasses and making use of some typeclasses from the Arrow library. These heterogeneous services can inflate and consume these templates by supplying concrete instances of those typeclass interfaces. I coined this technique as <strong>Template-Oriented-Programming!</strong>.</p>\n<h3 id=\"The-code-classlanguage-textRepoltFgtcode-typeclass\" style=\"position:relative;\">The <code class=\"language-text\">Repo&lt;F&gt;</code> typeclass<a href=\"#The-code-classlanguage-textRepoltFgtcode-typeclass\" aria-label=\"The code classlanguage textRepoltFgtcode typeclass permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Let’s abstract the DB behavior in both these stacks to a generic typeclass interface, <code class=\"language-text\">Repo&lt;F&gt;</code>, where <code class=\"language-text\">F</code> represents the Effect-type on which the DB works in their respective stacks/paradigms.</p>\n<div class=\"gatsby-code-title\">Repo.kt</div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Repo<span class=\"token operator\">&lt;</span>F<span class=\"token operator\">></span> <span class=\"token operator\">:</span> Async<span class=\"token operator\">&lt;</span>F<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> Unit<span class=\"token operator\">></span>\n    <span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> Unit<span class=\"token operator\">></span>\n    <span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">doesUserLoginExist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> Boolean<span class=\"token operator\">></span>\n    <span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">isUserCityValid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> Boolean<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>These operations have a return type of the form <code class=\"language-text\">Kind&lt;F, A&gt;</code>(=<code class=\"language-text\">F&lt;A&gt;</code>), which is generic and agnostic of the <code class=\"language-text\">Effect</code>.</li>\n<li>The <code class=\"language-text\">Repo&lt;F&gt;</code> inherits from <code class=\"language-text\">Async&lt;F&gt;</code>, which is a typeclass from Arrow Library to represent Effectful Operations.</li>\n<li>Our services implement <code class=\"language-text\">Repo&lt;F&gt;</code> typeclass with their respective Effect types.</li>\n<li>In these concrete implementations, <code class=\"language-text\">IO</code> and <code class=\"language-text\">MonoK</code> supply concrete instances for <code class=\"language-text\">Async&lt;F&gt;</code>, and the service repository functions are mapped to <code class=\"language-text\">Repo</code> operations, using <code class=\"language-text\">IO</code> and <code class=\"language-text\">MonoK</code> from Arrow Library - <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/85ce3b819a/kofu-mvc-validation/src/main/kotlin/mvc/Configurations.kt#L36-L51\" target=\"_blank\" rel=\"noopener noreferrer\">WebMVC Ref</a> and <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/85ce3b819a/kofu-reactive-validation/src/main/kotlin/reactive/Configurations.kt#L27-L42\" target=\"_blank\" rel=\"noopener noreferrer\">WebFlux Ref</a>.</li>\n</ul>\n<h3 id=\"Templates-using-Typeclasses\" style=\"position:relative;\">Templates using Typeclasses<a href=\"#Templates-using-Typeclasses\" aria-label=\"Templates using Typeclasses permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>Now we can weave our business-logic into generic templates depending on the generic operations of the typeclass <code class=\"language-text\">Repo&lt;F&gt;</code>.</li>\n<li><strong>Templates</strong> are generic functions and they depend on Typeclasses. This dependency can be achieved by passing typeclass as a function argument or declaring the template functions as extensions to a typeclass. I used the latter in my POC - <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/85ce3b819a/validation-templates/src/main/kotlin/top/rules/UserRules.kt\" target=\"_blank\" rel=\"noopener noreferrer\">Ref</a>. This file has all the validation rules for a user and the order in which these validations should run.</li>\n<li>However, these rules are generic functions aka Templates, which are agnostic of validation orchestration strategy (Fail-fast/Error-Accumulation) and the paradigm in which these are triggered (blocking/reactive).</li>\n<li>To consume these templates, the <code class=\"language-text\">Repo&lt;F&gt;</code> typeclass acts as the bridge between services and templates. The concrete implementations of the typeclass supplied by Services, essentially fill in the blanks for the templates.</li>\n<li>These templates work as shared logic, and the services can use those concrete instances to consume all these templates.</li>\n<li>Refer how both the services are able to seamlessly call the validation templates using the concrete instances without rewriting the rules and orchestration - <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/85ce3b819a/kofu-mvc-validation/src/main/kotlin/mvc/HandlersX.kt#L23-L34\" target=\"_blank\" rel=\"noopener noreferrer\">WebMVC Ref</a> and <a href=\"https://github.com/overfullstack/ad-hoc-poly/blob/85ce3b819a/kofu-reactive-validation/src/main/kotlin/reactive/HandlersX.kt#L22-L36\" target=\"_blank\" rel=\"noopener noreferrer\">WebFlux Ref</a>.</li>\n</ul>\n<p>That means, any new service or service migration can borrow all those well-tested small and large features for <em>free</em> with minor efforts! Moreover, the typeclass is entirely extensible to support more operations, in turn, to extend and expand our template base.</p>\n<h2 id=\"Outcomes-and-Conclusions\" style=\"position:relative;\">Outcomes and Conclusions<a href=\"#Outcomes-and-Conclusions\" aria-label=\"Outcomes and Conclusions permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>We achieved reusable domain logic using Ad-hoc Polymorphism, abstracting out the Effect using Typeclasses and Higher-Kinded Types, turing our Monomorphic code to Polymorphic. This is very powerful to model and migrate B2C-services. This <strong>zeros-down the cost and effort</strong> to rewrite and maintain common business logic across all services and service migrations. This can save a release cycle amount of work, bringing in real agility among scrum teams and startups to ship features faster. All of this is achieved with <strong>Free &#x26; Open-Source</strong> technologies.</p>\n<h2 id=\"My-Talk-on-this\" style=\"position:relative;\">My Talk on this<a href=\"#My-Talk-on-this\" aria-label=\"My Talk on this permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>This is only an intro to explain prerequisites for the talk in this post. It that was successfully presented and warmly received at <a href=\"https://twitter.com/kotlinhyderabad\" target=\"_blank\" rel=\"noopener noreferrer\">Kotlin User Group, Hyderabad</a>\n<a href=\"https://www.meetup.com/en-AU/kotlinhyderabad/events/269763753/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.meetup.com/en-AU/kotlinhyderabad/events/269763753/</a></p>\n<p>The <a href=\"https://speakerdeck.com/gopalakshintala/template-oriented-programming-top-to-ship-faster\" target=\"_blank\" rel=\"noopener noreferrer\">Slide deck</a></p>\n<p>\n        <div class=\"embedVideo-container\">\n            <iframe\n              width=\"640\"\n              height=\"362\"\n              src=\"https://www.youtube.com/embed/_QBlKtUY6ac?rel=0\"\n              class=\"embedVideo-iframe\"\n              style=\"border:0\"\n              allowfullscreen\n            ></iframe>\n        </div></p>\n<h2 id=\"References\" style=\"position:relative;\">References<a href=\"#References\" aria-label=\"References permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/\" target=\"_blank\" rel=\"noopener noreferrer\">https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/</a></li>\n<li><a href=\"https://www.intuit.com/blog/uncategorized/kotlin-development-plan/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.intuit.com/blog/uncategorized/kotlin-development-plan/</a></li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web</a></li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Ad_hoc_polymorphism\" target=\"_blank\" rel=\"noopener noreferrer\">https://en.wikipedia.org/wiki/Ad_hoc_polymorphism</a></li>\n<li><a href=\"https://www.reactivemanifesto.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.reactivemanifesto.org/</a></li>\n<li><a href=\"https://blog.pragmatists.com/unobvious-traps-of-spring-webflux-16924a0d76d5\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.pragmatists.com/unobvious-traps-of-spring-webflux-16924a0d76d5</a></li>\n<li><a href=\"https://arrow-kt.io/docs/fx/polymorphism/\" target=\"_blank\" rel=\"noopener noreferrer\">https://arrow-kt.io/docs/fx/polymorphism/</a></li>\n<li><a href=\"https://arrow-kt.io/docs/patterns/glossary/#higher-kinds\" target=\"_blank\" rel=\"noopener noreferrer\">https://arrow-kt.io/docs/patterns/glossary/#higher-kinds</a></li>\n<li><a href=\"https://arrow-kt.io/docs/patterns/glossary/#typeclasses\" target=\"_blank\" rel=\"noopener noreferrer\">https://arrow-kt.io/docs/patterns/glossary/#typeclasses</a></li>\n<li><a href=\"https://danielwestheide.com/blog/the-neophytes-guide-to-scala-part-12-type-classes/\" target=\"_blank\" rel=\"noopener noreferrer\">https://danielwestheide.com/blog/the-neophytes-guide-to-scala-part-12-type-classes/</a></li>\n<li><a href=\"https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymorphism.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymorphism.pdf</a></li>\n<li><a href=\"https://people.csail.mit.edu/dnj/teaching/6898/papers/wadler88.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">https://people.csail.mit.edu/dnj/teaching/6898/papers/wadler88.pdf</a></li>\n</ol>","timeToRead":13,"fields":{"tagSlugs":["/tags/kotlin/","/tags/arrow/"],"slug":"/posts/top-with-ad-hoc-polymorphism/"},"frontmatter":{"title":"Template-Oriented-Programming (TOP) to Ship Faster","tags":["Kotlin","Arrow"],"date":"2020-03-06T00:00:00.000Z","description":"Top-up with Ad-hoc Polymorphism","cover":{"childImageSharp":{"original":{"src":"/static/cover-5c3e1bd7be4620f26ad33c93f34271d1.jpeg"}}}}}},"pageContext":{"slug":"/posts/top-with-ad-hoc-polymorphism/","previous":{"fields":{"slug":"/posts/monads-for-drunken-coders-pint-1/"},"frontmatter":{"title":"Monads for Drunken Coders, Pint-1🍺","tags":["Java 8","Monads"],"layout":"post","category":"Functional Programming"}},"next":{"fields":{"slug":"/posts/fight-complexity-with-fp/"},"frontmatter":{"title":"Fight Complexity with Functional Programming","tags":["Java","Vavr"],"layout":"post","category":"Design"}}}}}