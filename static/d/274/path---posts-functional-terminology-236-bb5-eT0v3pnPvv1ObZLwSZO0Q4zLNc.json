{"data":{"site":{"siteMetadata":{"title":"The Hacker Garage","subtitle":"So excited about this Craft that, I can't keep myself from blogging about it.","copyright":"© All rights reserved.","author":{"name":"Gopal S Akshintala","twitter":"http://bit.ly/agstwtr","github":"http://bit.ly/agsgithub","linkedin":"http://bit.ly/agslnkd","telegram":"https://t.me/gopalakshintala","email":"gopal.akshintala@gmail.com","rss":"#"},"disqusShortname":"gopal","url":"https://github.com/gopalshackergarage/gopalshackergarage.github.io"}},"markdownRemark":{"id":"87c03beb-0d3f-570f-813f-6e1d69fd7f9c","html":"<h2>Pure Functions</h2>\n<ul>\n<li>These return a value based on what is passed in to the function.</li>\n<li>For instance, if we pass x into a function as input we will get F of x out as output. </li>\n<li>Another property of a pure function is that it will always return the same result for the same passed in value. </li>\n<li>If we pass input x into the function again, we should get back the exact same value, F of x. You should be able to do this an infinite amount of times and always get back the same output for a specific input. In addition, pure functions do not modify values outside of its scope. They are independent from any state in the system.</li>\n<li>They never mutate data and they do not produce side effects. Generally, they can also easily be reused.</li>\n</ul>\n<h2>First-Class Functions</h2>\n<ul>\n<li>First of all, a programming language must support first-class functions to support the functional programming paradigm.</li>\n<li>First-class functions can be stored as a variable, they can be passed as an argument, and also they can be returned as the result of a function call.</li>\n<li>In addition, a first-class function can also be bound to a variable name, as well as stored in a data structure. Basically, you can generally do anything with a first-class function that you would be able to do with a variable or object. </li>\n</ul>\n<h2>Higher-order Functions</h2>\n<ul>\n<li>These are functions that can operate on other functions. They can take in a function as input, or even return one as output.</li>\n<li>First-class functions are useless without higher-order functions to pass them into or return them from.</li>\n</ul>\n<h2>Anonymous Functions</h2>\n<ul>\n<li>The roots of anonymous functions lie heavily in lambda calculus.</li>\n<li>An anonymous function allows us to define ad hoc logic as we need, without needing to declare a formal named function. </li>\n<li>They are nameless and they can also serve as an argument to another function. </li>\n<li>Also, they can be assigned to a variable. They are basically a nameless first-class function.</li>\n<li>Anonymous functions can be passed into or returned from a higher-order function. </li>\n</ul>\n<h2>Clousures</h2>\n<ul>\n<li>Closures are lexically scoped name binding in languages with first-class functions. Closures give us function portability. Closures are what allow us to pass around and store functions. </li>\n<li>A closure is defined as a <strong>persistent local variable scope</strong> which holds on to local variables after the code execution has moved out of that block.</li>\n<li>Captured variables can be accessed through the closure’s copies of variable values or references when the function is invoked outside of their scope. A closure, which is the scope of a function, is kept alive by a reference to that function. Variables which were in scope when that function was defined will still be in scope when we call it later in a different context.</li>\n<li>A closure can also be thought of as a record storing a function together with a environment. One final way of defining a closure is as a mapping associating each variable of the function with the value or reference to which the name was bound when the closure was created. Next up, let’s go over functional composition.</li>\n</ul>\n<h2>Some-more</h2>\n<ul>\n<li><strong>Monad</strong>, Think of monads as a context object that wraps a value and allows us to apply a set of transformations on that value and get it back out with all the transformations applied. </li>\n<li>Stream and Optional are Monads, when they are used as <code class=\"language-text\">Stream.of()</code> and <code class=\"language-text\">Optional.of()</code> as constructors and <code class=\"language-text\">map()</code> and <code class=\"language-text\">flatMap()</code> as binding functions.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">Optional<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>addOne<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>addTwo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Optional<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>addThree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">collect()</code> method is called <strong>fold</strong> in FP terms, which summarizes bunch of values into one.</li>\n</ul>","fields":{"tagSlugs":["/tags/functional-programming/"]},"frontmatter":{"title":"Functional Terminology","tags":["Functional Programming"],"date":"2018-12-07T00:00:00.000Z","description":"Speak Functional language fluently"}}},"pageContext":{"slug":"/posts/functional-terminology/"}}