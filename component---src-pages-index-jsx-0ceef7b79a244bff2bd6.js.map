{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./src/components/Post/index.jsx","webpack:///./src/components/SEO.js"],"names":["IndexRoute","render","items","_this$props$data$site","this","props","data","site","siteMetadata","title","subtitle","caption","logo","allMarkdownRemark","edges","forEach","post","push","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_components_Post__WEBPACK_IMPORTED_MODULE_5__","key","node","fields","slug","style","color","background","transition","minHeight","_components_Layout__WEBPACK_IMPORTED_MODULE_4__","_components_SEO__WEBPACK_IMPORTED_MODULE_7__","image","description","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","name","content","_components_Sidebar__WEBPACK_IMPORTED_MODULE_6__","className","React","Component","pageQuery","Post","_this$props$data$node","frontmatter","date","category","_this$props$data$node2","categorySlug","timeToRead","react__WEBPACK_IMPORTED_MODULE_1___default","dateTime","moment","format","boxShadow","textDecoration","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","formatReadingTime","SEO","_ref","meta","gatsby__WEBPACK_IMPORTED_MODULE_5__","query","metaDescription","metaImage","siteurl","url","Object","assign","htmlAttributes","lang","titleTemplate","property","author","aboutme","concat","_public_static_d_2713032698_json__WEBPACK_IMPORTED_MODULE_1__","defaultProps","propTypes","PropTypes","string","isRequired","array"],"mappings":"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","file":"component---src-pages-index-jsx-0ceef7b79a244bff2bd6.js","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport Post from '../components/Post';\nimport Sidebar from '../components/Sidebar';\nimport SEO from '../components/SEO';\n\nclass IndexRoute extends React.Component {\n  render() {\n    const items = [];\n    const {\n      title, subtitle, caption, logo,\n    } = this.props.data.site.siteMetadata;\n    const posts = this.props.data.allMarkdownRemark.edges;\n    posts.forEach(post => {\n      items.push(<Post data={post} key={post.node.fields.slug}/>);\n    });\n\n    return (\n      <div style={{\n        color: 'var(--textNormal)',\n        background: 'var(--bg)',\n        transition: 'color 0.2s ease-out, background 0.2s ease-out',\n        minHeight: '100vh',\n      }}\n      >\n        <Layout>\n          <SEO image={logo} description={subtitle} title={title} caption={caption} />\n          <div>\n            <Helmet>\n              <title>{title}</title>\n              <meta name=\"description\" content={subtitle}/>\n            </Helmet>\n            <Sidebar {...this.props} />\n            <div className=\"content\">\n              <div className=\"content__inner\">{items}</div>\n            </div>\n          </div>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default IndexRoute;\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    site {\n      siteMetadata {\n        title\n        subtitle\n        caption\n        copyright\n        declaration\n        logo\n        menu {\n          label\n          path\n        }\n        author {\n          name\n          email\n          telegram\n          twitter\n          github\n          linkedin\n          stackoverflow\n          aboutme\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      filter: { frontmatter: { layout: { eq: \"post\" }, draft: { ne: true } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            categorySlug\n          }\n          timeToRead\n          frontmatter {\n            title\n            date\n            category\n            description\n            cover {\n              childImageSharp {\n                original {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport moment from 'moment';\nimport './style.scss';\nimport { formatReadingTime } from '../utils';\n\nclass Post extends React.Component {\n  render() {\n    const {\n      title,\n      date,\n      category,\n      description,\n    } = this.props.data.node.frontmatter;\n    const { slug, categorySlug } = this.props.data.node.fields;\n    const { timeToRead } = this.props.data.node;\n\n    return (\n      <div className=\"post\">\n        <div className=\"post__meta\">\n          <time\n            className=\"post__meta-time\"\n            dateTime={moment(date).format('MMMM D, YYYY')}\n            style={{\n              boxShadow: 'none',\n              textDecoration: 'none',\n              color: 'var(--textNormal)',\n            }}\n          >\n            {moment(date).format('MMMM YYYY')}\n          </time>\n          <span className=\"post__meta-divider\" />\n          <span className=\"post__meta-category\" key={categorySlug}>\n            <Link to={categorySlug} className=\"post__meta-category-link\">\n              {category}\n            </Link>\n          </span>\n        </div>\n        <h2 className=\"post__title\">\n          <Link\n            className=\"post__title-link\"\n            to={slug}\n            style={{\n              boxShadow: 'none',\n              textDecoration: 'none',\n              color: 'var(--textLink)',\n            }}\n          >\n            {title}\n          </Link>\n        </h2>\n        <p className=\"post__description\">{description}</p>\n        <div>\n          {`${formatReadingTime(timeToRead)}`}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Post;\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        subtitle\n        caption\n        siteurl\n        author {\n          aboutme\n        }\n      }\n    }\n  }\n`;\n\nconst SEO = ({\n  meta, image, title, caption, description, slug,\n}) => (\n  <StaticQuery\n    query={query}\n    render={data => {\n      const { siteMetadata } = data.site;\n      const metaDescription = description || siteMetadata.subtitle;\n      const metaImage = image ? `${siteMetadata.siteurl}/${image}` : null;\n      const url = `${siteMetadata.siteurl}${slug}`;\n      return (\n        <Helmet\n          htmlAttributes={{ lang: 'en' }}\n          {...(caption\n            ? {\n              titleTemplate: `${caption} - %s`,\n              title: siteMetadata.title,\n            }\n            : {\n              title: `A blog by Gopal S Akshintala - ${siteMetadata.title}`,\n            })}\n          meta={[\n            {\n              name: 'description',\n              content: metaDescription,\n            },\n            {\n              property: 'og:url',\n              content: url,\n            },\n            {\n              property: 'og:title',\n              content: title || siteMetadata.title,\n            },\n            {\n              property: 'og:description',\n              content: metaDescription,\n            },\n            {\n              name: 'twitter:card',\n              content: 'summary',\n            },\n            {\n              name: 'twitter:creator',\n              content: siteMetadata.author.aboutme,\n            },\n            {\n              name: 'twitter:title',\n              content: title || siteMetadata.title,\n            },\n            {\n              name: 'twitter:description',\n              content: metaDescription,\n            },\n          ]\n            .concat(\n              metaImage\n                ? [\n                  {\n                    property: 'og:image',\n                    content: metaImage,\n                  },\n                  {\n                    name: 'twitter:image',\n                    content: metaImage,\n                  },\n                ]\n                : []\n            )\n            .concat(meta)}\n        />\n      );\n    }}\n  />\n);\n\nSEO.defaultProps = {\n  meta: [],\n  slug: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}