{"version":3,"sources":["webpack:///./src/components/Post/index.jsx","webpack:///./src/pages/index.jsx","webpack:///./src/components/SEO.js","webpack:///./src/components/Menu/index.jsx","webpack:///./src/components/Emoji/Emoji.jsx","webpack:///./src/components/Sidebar/index.jsx"],"names":["Post","render","this","props","data","node","frontmatter","title","date","category","description","fields","slug","categorySlug","timeToRead","className","dateTime","moment","format","style","boxShadow","textDecoration","color","key","to","formatReadingTime","React","Component","IndexRoute","items","site","siteMetadata","blogTitle","subtitle","caption","logo","author","allMarkdownRemark","edges","forEach","post","push","background","transition","minHeight","cover","name","content","SEO","meta","query","metaDescription","metaImage","siteUrl","url","htmlAttributes","lang","titleTemplate","property","social","twitter","concat","defaultProps","Menu","menu","menuBlock","map","item","path","activeClassName","label","Emoji","symbol","role","aria-label","aria-hidden","Sidebar","location","copyright","declaration","Bio","getCurrentPath","Links","ThemeToggle","marginTop"],"mappings":"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","file":"component---src-pages-index-jsx-caf4a0eb1dbd13629eb3.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport moment from 'moment';\nimport './style.scss';\nimport { formatReadingTime } from '../utils';\n\nclass Post extends React.Component {\n  render() {\n    const {\n      title,\n      date,\n      category,\n      description,\n    } = this.props.data.node.frontmatter;\n    const { slug, categorySlug } = this.props.data.node.fields;\n    const { timeToRead } = this.props.data.node;\n\n    return (\n      <div className=\"post\">\n        <div className=\"post__meta\">\n          <time\n            className=\"post__meta-time\"\n            dateTime={moment(date).format('MMMM D, YYYY')}\n            style={{\n              boxShadow: 'none',\n              textDecoration: 'none',\n              color: 'var(--textNormal)',\n            }}\n          >\n            {moment(date).format('MMMM YYYY')}\n          </time>\n          <span className=\"post__meta-divider\" />\n          <span className=\"post__meta-category\" key={categorySlug}>\n            <Link to={categorySlug} className=\"post__meta-category-link\">\n              {category}\n            </Link>\n          </span>\n        </div>\n        <h2 className=\"post__title\">\n          <Link\n            className=\"post__title-link\"\n            to={slug}\n            style={{\n              boxShadow: 'none',\n              textDecoration: 'none',\n              color: 'var(--textLink)',\n            }}\n          >\n            {title}\n          </Link>\n        </h2>\n        <p className=\"post__description\">{description}</p>\n        <div>\n          {`${formatReadingTime(timeToRead)}`}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Post;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport Post from '../components/Post';\nimport Sidebar from '../components/Sidebar';\nimport SEO from '../components/SEO';\n\nclass IndexRoute extends React.Component {\n  render() {\n    const items = [];\n    const { blogTitle, subtitle, caption, logo, author } = this.props.data.site.siteMetadata\n    const posts = this.props.data.allMarkdownRemark.edges;\n    posts.forEach(post => {\n      items.push(<Post data={post} key={post.node.fields.slug} />)\n    });\n\n    return (\n      <div style={{\n        color: 'var(--textNormal)',\n        background: 'var(--bg)',\n        transition: 'color 0.2s ease-out, background 0.2s ease-out',\n        minHeight: '100vh',\n      }}\n      >\n        <Layout>\n          <SEO\n            cover={logo}\n            description={subtitle}\n            caption={caption}\n          />\n          <div>\n            <Helmet>\n              <title>{`${author.name} | ${blogTitle}`}</title>\n              <meta name=\"description\" content={subtitle}/>\n            </Helmet>\n            <Sidebar {...this.props} />\n            <div className=\"content\">\n              <div className=\"content__inner\">{items}</div>\n            </div>\n          </div>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default IndexRoute;\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    site {\n      siteMetadata {\n        blogTitle\n        subtitle\n        caption\n        copyright\n        declaration\n        logo\n        menu {\n          label\n          path\n        }\n        author {\n          name\n          email\n          telegram\n          twitter\n          github\n          linkedin\n          stackoverflow\n          aboutme\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      filter: { frontmatter: { layout: { eq: \"post\" }, draft: { ne: true } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            categorySlug\n          }\n          timeToRead\n          frontmatter {\n            title\n            date\n            category\n            description\n            cover {\n              childImageSharp {\n                original {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        blogTitle\n        subtitle\n        caption\n        siteUrl\n        author {\n          name\n        }\n        social {\n          twitter\n        }\n      }\n    }\n  }\n`;\n\nconst SEO = ({\n               meta, cover, title, caption, description, slug,\n             }) => (\n  <StaticQuery\n    query={query}\n    render={data => {\n      const { siteMetadata } = data.site;\n      const metaDescription = description || siteMetadata.description;\n      const metaImage = cover ? `${siteMetadata.siteUrl}/${cover}` : null;\n      const url = `${siteMetadata.siteUrl}${slug}`;\n      return (\n        <Helmet\n            htmlAttributes={{ lang: `en` }}\n            {...(title\n            ? {\n                  titleTemplate: `%s | ${siteMetadata.author.name} | ${siteMetadata.blogTitle}`,\n                  title,\n            }\n            : {\n                  title: `${siteMetadata.author.name} | ${siteMetadata.blogTitle}`,\n            })}\n          meta={[\n            {\n              name: 'description',\n              content: metaDescription,\n            },\n            {\n              property: 'og:url',\n              content: url,\n            },\n            {\n              property: 'og:title',\n              content: title || siteMetadata.title,\n            },\n            {\n              property: 'og:description',\n              content: metaDescription,\n            },\n            {\n              name: 'twitter:card',\n              content: 'summary',\n            },\n            {\n              name: 'twitter:creator',\n                content: siteMetadata.social.twitter,\n            },\n            {\n              name: 'twitter:title',\n              content: title || siteMetadata.title,\n            },\n            {\n              name: 'twitter:description',\n              content: metaDescription,\n            },\n          ]\n            .concat(\n              metaImage\n                ? [\n                  {\n                    property: 'og:image',\n                    content: metaImage,\n                  },\n                  {\n                    name: 'twitter:image',\n                    content: metaImage,\n                  },\n                ]\n                : [],\n            )\n            .concat(meta)}\n        />\n      );\n    }}\n  />\n);\n\nSEO.defaultProps = {\n  meta: [],\n  slug: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string.isRequired,\n  cover: PropTypes.string.isRequired,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string,\n};\n\nexport default SEO;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport './style.scss';\n\nclass Menu extends React.Component {\n  render() {\n    const menu = this.props.data;\n\n    const menuBlock = (\n      <ul className=\"menu__list\">\n        {menu.map(item => (\n          <li className=\"menu__list-item\" key={item.path}>\n            <Link\n              to={item.path}\n              className=\"menu__list-item-link\"\n              activeClassName=\"menu__list-item-link menu__list-item-link--active\"\n              style={{\n                boxShadow: 'none',\n                textDecoration: 'none',\n                color: 'var(--textLink)',\n              }}\n            >\n              {item.label}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    );\n\n    return <nav className=\"menu\">{menuBlock}</nav>;\n  }\n}\n\nexport default Menu;\n","import React from 'react';\n\nconst Emoji = ({ label, symbol }) => (\n  <span\n    className=\"emoji\"\n    role=\"img\"\n    aria-label={label || ''}\n    aria-hidden={label ? 'false' : 'true'}\n  >\n    {symbol}\n  </span>\n);\nexport default Emoji;\n","import React from 'react';\nimport Menu from '../Menu';\nimport Links from '../Links';\nimport './style.scss';\nimport Emoji from '../Emoji/Emoji';\nimport Bio from '../Bio';\nimport { getCurrentPath } from '../utils';\nimport ThemeToggle from '../Toggle/ThemeToggle';\n\nclass Sidebar extends React.Component {\n  render() {\n    const { location } = this.props;\n    const {\n      author,\n      subtitle,\n      copyright,\n      declaration,\n      menu,\n    } = this.props.data.site.siteMetadata;\n\n    return (\n      <div className=\"sidebar\">\n        <div className=\"sidebar__inner\">\n          <Bio\n            className=\"sidebar__author\"\n            author={author}\n            subtitle={subtitle}\n            path={getCurrentPath(location)}\n          />\n\n          <div className=\"sidebar__inner-middle\">\n            <Menu data={menu} />\n            <Links data={author} />\n            <ThemeToggle/>\n          </div>\n\n          <div>\n            <p className=\"sidebar__copyright\" style={{ marginTop: '0' }}>\n              {declaration}\n              &nbsp;\n              <Emoji symbol=\"⚛️\" />\n            </p>\n            <p className=\"sidebar__copyright\">{copyright}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Sidebar;\n"],"sourceRoot":""}